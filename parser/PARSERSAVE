command_list:
	command_list COMMAND_SEPARATOR command
	{
		std::cout << "command_list ; command" << std::endl;
	}
|
	command
	{
		std::cout << "command_list -> command" << std::endl;
	}
;

command:
	expression
	{
		std::cout << "expression" << std::endl;
	}
|
	OPARENTHESIS command_list CPARENTHESIS
	{
		std::cout << "OPARENTHESIS command_list CPARENTHESIS" << std::endl;
	}
|
	OCURLY command_list CCURLY
	{
		std::cout << "OCURLY command_list CCURLY" << std::endl;
	}
|
	KEYWORD_FOR expression KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_FOR expression KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_FOR expression KEYWORD_IN expression KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_FOR IDENTIFIER KEYWORD_IN expression KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_FOR OPARENTHESIS expression COMMAND_SEPARATOR expression COMMAND_SEPARATOR expression CPARENTHESIS KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_FOR OPARENTHESIS expression COMMAND_SEPARATOR expression COMMAND_SEPARATOR expression CPARENTHESIS KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_WHILE expression KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_WHILE expression KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_UNTIL expression KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_UNTIL expression KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_CASE expression KEYWORD_IN caseparts KEYWORD_ESAC
	{
		std::cout << "KEYWORD_CASE expression KEYWORD_IN caseparts KEYWORD_ESAC" << std::endl;
	}
|
	KEYWORD_IF expression KEYWORD_THEN command_list else_part KEYWORD_FI
	{
		std::cout << "KEYWORD_IF expression KEYWORD_THEN command_list else_part KEYWORD_FI" << std::endl;
	}
;


expression:
	IDENTIFIER OPERATOR_LET_BE expression
	{
		std::cout << "IDENTIFIER OPERATOR_LET_BE expression" << std::endl;
	}
|
	NEGATE expression
	{
		std::cout << "NEGATE expression" << std::endl;
	}
|
	expression OPERATOR_AND expression
	{
		std::cout << "expression OPERATOR_AND expression" << std::endl;
	}
|
	expression OPERATOR_OR expression
	{
		std::cout << "expression OPERATOR_OR expression" << std::endl;
	}
|
	expression OPERATOR_EQUAL expression
	{
		std::cout << "expression OPERATOR_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_NOT_EQUAL expression
	{
		std::cout << "expression OPERATOR_NOT_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_LESS_EQUAL expression
	{
		std::cout << "expression OPERATOR_LESS_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_GREATER_EQUAL expression
	{
		std::cout << "expression OPERATOR_GREATER_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_LESS_THAN expression
	{
		std::cout << "expression OPERATOR_LESS_THAN expression" << std::endl;
	}
|
	expression OPERATOR_GREATER_THAN expression
	{
		std::cout << "expression OPERATOR_GREATER_THAN expression" << std::endl;
	}
|
	expression OPERATOR_PLUS expression
	{
		std::cout << "expression OPERATOR_PLUS expression" << std::endl;
	}
|
	expression OPERATOR_MINUS expression
	{
		std::cout << "expression OPERATOR_MINUS expression" << std::endl;
	}
|
	expression OPERATOR_MULTIPLICATION expression
	{
		std::cout << "expression OPERATOR_MULTIPLICATION expression" << std::endl;
	}
|
	expression OPERATOR_DIVISION expression
	{
		std::cout << "expression OPERATOR_DIVISION expression" << std::endl;
	}
|
	expression OPERATOR_MODULO expression
	{
		std::cout << "expression OPERATOR_MODULO expression" << std::endl;
	}
|
	expression OPERATOR_POWER expression
	{
		std::cout << "expression OPERATOR_POWER expression" << std::endl;
	}
|
	OPERATOR_MINUS expression %prec UNARY_MINUS
	{
		std::cout << "unary minus" << std::endl;
	}
|
	INTEGER
	{
		std::cout << "INTEGER" << std::endl;
	}
|
	DOUBLE
	{
		std::cout << "DOUBLE" << std::endl;
	}
|
	HEXADECIMAL
	{
		std::cout << "HEXADECIMAL" << std::endl;
	}
|
	SINGLEQUOTE
	{
		std::cout << "SINGLEQUOTE" << std::endl;
	}
|
	DOUBLEQUOTE
	{
		std::cout << "DOUBLEQUOTE" << std::endl;
	}
|
	input_output
	{
		std::cout << "input_output" << std::endl;
	}
|
	IDENTIFIER
	{
		std::cout << "IDENTIFIER" << std::endl;
	}
;

input_output:
	OUTPUT_CREATION IDENTIFIER
	{
		std::cout << "OUTPUT_CREATION IDENTIFIER" << std::endl;
	}
|
	INPUT_REDIRECTION IDENTIFIER
	{
		std::cout << "INPUT_REDIRECTION IDENTIFIER" << std::endl;
	}
|
	INPUT_FROM_A_HERE_DOCUMENT IDENTIFIER
	{
		std::cout << "INPUT_FROM_A_HERE_DOCUMENT IDENTIFIER" << std::endl;
	}
|
	OUTPUT_APPEND IDENTIFIER
	{
		std::cout << "OUTPUT_APPEND IDENTIFIER" << std::endl;
	}
;

	
caseparts:
	case_part caseparts2
	{
		std::cout << "case_part caseparts2" << std::endl;
	}
;

caseparts2:
	case_part caseparts2
	{
		std::cout << "case_part caseparts2" << std::endl;
	}
|
	//empty
	{
		std::cout << "caseparts2->empty" << std::endl;
	}
;

case_part:
	pattern CPARENTHESIS command_list CASE_DELIMITER
	{
		std::cout << "pattern CPARENTHESIS command_list CASE_DELIMITER" << std::endl;
	}
;

else_part:
	KEYWORD_ELSE command_list
	{
		std::cout << "KEYWORD_ELSE command_list" << std::endl;
	}
|
	//empty
	{
		std::cout << "else_part -> empty" << std::endl;
	}
;

pattern:
	IDENTIFIER
	{
		std::cout << "IDENTIFIER" << std::endl;
	}
|
	pattern PIPE_SYMBOL IDENTIFIER
	{
		std::cout << "pattern PIPE_SYMBOL IDENTIFIER" << std::endl;
	}
;