// Generated by Flexc++ V2.06.02 on Mon, 26 Nov 2018 14:02:10 +0100

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>
#include "../shell.hh"

// $insert class_ih
#include "Scanner.ih"


    // s_ranges__: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const ScannerBase::s_ranges__[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
     5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
    23,23,23,23,23,23,23,23,24,25,26,27,28,29,29,30,31,31,32,33,33,33,33,33,33,
    33,34,35,36,37,38,38,39,40,40,41,42,42,42,42,42,43,44,45,46,47,48,49,50,51,
    52,53,54,55,56,57,58,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,72,73,74,
    75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
    76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
    76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
    76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
    76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
    76,76,76,76,76,76,
};

// $insert startcondinfo
    // s_dfa__ contains the rows of *all* DFAs ordered by start state.  The
    // enum class StartCondition__is defined in the baseclass header.
    // StartCondition__::INITIAL is always 0.  Each entry defines the row to
    // transit to if the column's character range was sensed. Row numbers are
    // relative to the used DFA, and d_dfaBase__ is set to the first row of
    // the subset to use.  The row's final two values are respectively the
    // rule that may be matched at this state, and the rule's FINAL flag. If
    // the final value equals FINAL (= 1) then, if there's no continuation,
    // the rule is matched. If the BOL flag (8) is also set (so FINAL + BOL (=
    // 9) is set) then the rule only matches when d_atBOL is also true.
int const ScannerBase::s_dfa__[][80] =
{
    // INITIAL
    { 1, 2, 3, 1, 2, 1, 2, 4, 5, 1, 6, 7, 8, 9,10,11,12,13,14,15,
         16,17,18,19, 1,20,21,22,23, 1,24,25,25,25,25,25,26,27,25,25,
         25,25,25,28, 1,29,30, 1, 1,24,25,31,32,33,34,25,25,35,25,36,
         25,26,27,25,25,25,25,37,38,25,39,25,25,40,41,42, 1,43,    -1, -1},  // 0
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    63, -1},  // 1
    {44, 2, 3,44, 2,44, 2,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    60, -1},  // 2
    {-1, 3, 3,-1, 3,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    60, -1},  // 3
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    32, -1},  // 4
    {46,46,47,46,46,46,46,46,48,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,49,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-1,    63, -1},  // 5
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    42, -1},  // 6
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    38, -1},  // 7
    {44,44,-1,44,44,44,44,44,44,44,44,44,50,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    27, -1},  // 8
    {51,51,52,51,51,51,51,51,51,51,51,51,51,53,51,51,51,51,51,51,
         51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,51,51,51,54,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-1,    63, -1},  // 9
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    19, -1},  // 10
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    20, -1},  // 11
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,55,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    37, -1},  // 12
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    34, -1},  // 13
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    25, -1},  // 14
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,56,44,44,44,57,44,58,44,44,44,59,
         44,60,61,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    35, -1},  // 15
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,62,62,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    63, -1},  // 16
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    36, -1},  // 17
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         63,44,19,19,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,64,44,44,44,44,44,-1,    57, -1},  // 18
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         63,44,19,19,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    57, -1},  // 19
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,65,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    24, -1},  // 20
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,66,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    28, -1},  // 21
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,67,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    41, -1},  // 22
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,68,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    30, -1},  // 23
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,70,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,70,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 24
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 25
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,71,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,71,25,25,25,25,44,44,44,44,-1,    59, -1},  // 26
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,72,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,72,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 27
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    17, -1},  // 28
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    18, -1},  // 29
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    40, -1},  // 30
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,73,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 31
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,74,25,25,25,25,25,25,
         25,25,75,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 32
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,76,
         25,25,25,25,25,25,77,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 33
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,78,25,25,
         25,25,79,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 34
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,80,25,25,25,25,25,
         25,81,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 35
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,82,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 36
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,83,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 37
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,84,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 38
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,85,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 39
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    15, -1},  // 40
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,86,44,44,-1,    21, -1},  // 41
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    16, -1},  // 42
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    61, -1},  // 43
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 44
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,87,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 45
    {46,46,47,46,46,46,46,46,48,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,49,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-1,    -1, -1},  // 46
    {47,47,47,47,47,47,47,47,88,47,47,47,47,47,47,47,47,47,47,47,
         47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
         47,47,47,47,89,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
         47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-1,    -1, -1},  // 47
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    55, -1},  // 48
    {46,46,-1,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,90,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,91,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-1,    -1, -1},  // 49
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    22, -1},  // 50
    {51,51,52,51,51,51,51,51,51,51,51,51,51,53,51,51,51,51,51,51,
         51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,51,51,51,54,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-1,    -1, -1},  // 51
    {52,52,52,52,52,52,52,52,52,52,52,52,52,92,52,52,52,52,52,52,
         52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,
         52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,
         52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-1,    -1, -1},  // 52
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    54, -1},  // 53
    {51,51,52,51,51,51,51,51,51,51,51,51,51,53,51,51,51,51,51,51,
         51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,51,51,51,54,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,93,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-1,    -1, -1},  // 54
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    39, -1},  // 55
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    49, -1},  // 56
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,94,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 57
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,95,44,44,44,44,44,44,
         44,44,44,44,44,44,44,96,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 58
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,97,44,44,44,44,44,44,
         44,44,44,44,44,44,44,98,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 59
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,99,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 60
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    50, -1},  // 61
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,62,62,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    56, -1},  // 62
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,62,62,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 63
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,100,100,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 64
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    26, -1},  // 65
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    29, -1},  // 66
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    33, -1},  // 67
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    31, -1},  // 68
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,101,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 69
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,102,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,102,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 70
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,103,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,103,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 71
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    52, -1},  // 72
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,104,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 73
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,105,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 74
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,106,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    11, -1},  // 75
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,107,25,25,
         25,25,25,25,25,25,108,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 76
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,109,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 77
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     4, -1},  // 78
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,110,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 79
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     0, -1},  // 80
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     6, -1},  // 81
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,111,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 82
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,112,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 83
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,113,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 84
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,114,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 85
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    23, -1},  // 86
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    62, -1},  // 87
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    55, -1},  // 88
    {47,47,-1,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
         47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
         47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
         47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-1,    -1, -1},  // 89
    {46,46,47,46,46,46,46,46,48,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,49,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,91,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-1,    -1, -1},  // 90
    {46,46,47,46,46,46,46,46,48,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,49,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,
         46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-1,    62, -1},  // 91
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    54, -1},  // 92
    {51,51,52,51,51,51,51,51,51,51,51,51,51,53,51,51,51,51,51,51,
         51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,51,51,51,54,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
         51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-1,    62, -1},  // 93
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    43, -1},  // 94
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,115,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 95
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    44, -1},  // 96
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,116,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 97
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    45, -1},  // 98
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,117,44,44,44,44,44,44,44,44,44,44,44,44,-1,    -1, -1},  // 99
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,100,100,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    58, -1},  // 100
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,118,118,118,118,118,118,118,118,118,118,
         118,118,118,44,45,44,44,44,44,118,118,118,118,118,118,118,118,118,118,118,
         118,118,118,118,118,118,118,118,118,118,118,118,118,44,44,44,44,-1,    -1, -1},  // 101
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    51, -1},  // 102
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,119,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,119,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 103
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,120,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 104
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,121,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 105
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,122,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 106
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,123,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 107
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,124,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 108
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,125,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 109
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     8, -1},  // 110
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,126,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 111
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,127,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 112
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,128,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 113
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,129,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 114
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    46, -1},  // 115
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    47, -1},  // 116
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-1,    48, -1},  // 117
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,118,118,69,44,44,44,44,44,118,118,118,118,118,118,118,118,118,118,
         118,118,118,44,45,44,44,118,44,118,118,118,118,118,118,118,118,118,118,118,
         118,118,118,118,118,118,118,118,118,118,118,118,118,44,44,44,44,-1,    59, -1},  // 118
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    53, -1},  // 119
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     5, -1},  // 120
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,130,25,25,25,25,44,44,44,44,-1,    59, -1},  // 121
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    12, -1},  // 122
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     3, -1},  // 123
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     2, -1},  // 124
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     7, -1},  // 125
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,131,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 126
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     1, -1},  // 127
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,132,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 128
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,133,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 129
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,134,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 130
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    14, -1},  // 131
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    10, -1},  // 132
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,     9, -1},  // 133
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,135,25,25,25,25,25,44,44,44,44,-1,    59, -1},  // 134
    {44,44,-1,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,
         44,44,25,25,69,44,44,44,44,44,25,25,25,25,25,25,25,25,25,25,
         25,25,25,44,45,44,44,25,44,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,25,25,25,44,44,44,44,-1,    13, -1},  // 135
};


int const (*ScannerBase::s_dfaBase__[])[80] =
{
    s_dfa__ + 0,
};

size_t ScannerBase::s_istreamNr = 0;

// $insert inputImplementation
ScannerBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

ScannerBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t ScannerBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        // FALLING THROUGH

        default:
        return ch;
    }
}

size_t ScannerBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : static_cast<size_t>(AT_EOF);
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void ScannerBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void ScannerBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

ScannerBase::ScannerBase(std::istream &in, std::ostream &out)
:
    d_filename("-"),
    d_out(new std::ostream(out.rdbuf())),
// $insert interactiveInit
    d_in(0),
    d_input(new std::istream(in.rdbuf())),
    d_dfaBase__(s_dfa__)
{}

ScannerBase::ScannerBase(std::string const &infilename, std::ostream &out)
:
	d_filename(infilename),
	d_out(new std::ostream(out.rdbuf())),
	d_input(new std::ifstream(infilename)),
	d_dfaBase__(s_dfa__)
{}

ScannerBase::ScannerBase(std::stringstream &ss, std::ostream &out)
:
	d_filename("-"),
	d_out(new std::ostream(out.rdbuf())),
	d_in(&ss),
	d_input(new std::stringstream(ss.rdbuf()->str())),
	d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStream__(std::istream &in, size_t lineNr)
{
    d_input.close();
    d_input = Input(new std::istream(in.rdbuf()), lineNr);
}


ScannerBase::ScannerBase(std::string const &infilename, std::string const &outfilename)
:
    d_filename(infilename),
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_input(new std::ifstream(infilename)),
    d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream__(in, 1);
    switchOstream(out);
}


void ScannerBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void ScannerBase::setDebug(bool onOff)
{}

bool ScannerBase::debug() const
{
    return false;
}

void ScannerBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input.reRead(d_matched, from);
    d_matched.resize(from);
}

void ScannerBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


void ScannerBase::switchIstream(std::istream &in)
{
	switchStream__(in, 1);
}

void ScannerBase::switchIstream(std::string const &infilename)
{
    d_input.close();
    d_filename = infilename;
    d_input = Input(new std::ifstream(infilename));
    d_atBOL = true;
}

void ScannerBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void ScannerBase::pushStream(std::istream  &istr)
{
    std::istream *streamPtr = new std::istream(istr.rdbuf());
    p_pushStream("(istream)", streamPtr);
}

void ScannerBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}


void ScannerBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack__)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_streamStack.push_back(StreamStruct{d_filename, d_input});
    d_filename = name;
    d_input = Input(streamPtr);
    d_atBOL = true;
}

bool ScannerBase::popStream()
{
    d_input.close();

    if (d_streamStack.empty())
        return false;

    StreamStruct &top = d_streamStack.back();

    d_input =   top.pushedInput;
    d_filename = top.pushedName;
    d_streamStack.pop_back();

    return true;
}



  // See the manual's section `Run-time operations' section for an explanation
  // of this member.
ScannerBase::ActionType__ ScannerBase::actionType__(size_t range)
{
    d_nextState = d_dfaBase__[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType__::CONTINUE;

    if (knownFinalState())                  // FINAL state reached
        return ActionType__::MATCH;         

    if (d_matched.size())
        return ActionType__::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF__ ? 
                ActionType__::ECHO_CH 
            : 
                ActionType__::RETURN;
}

void ScannerBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input.reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

void ScannerBase::setMatchedSize(size_t length)
{
    d_input.reRead(d_matched, length);  // reread the tail section
    d_matched.resize(length);           // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule's index is returned.
  // The numbers behind the finalPtr assignments are explained in the 
  // manual's `Run-time operations' section.
size_t ScannerBase::matched__(size_t ch)
{
    d_input.reRead(ch);

    FinalData *finalPtr;
                            
    if (not d_atBOL)                    // not at BOL
        finalPtr = &d_final.std;        // then use the std rule (3, 4)

                                        // at BOL
    else if (not available(d_final.std.rule))   // only a BOL rule avail.
            finalPtr = &d_final.bol;            // use the BOL rule (6)

    else if (not available(d_final.bol.rule)) // only a std rule is avail.
        finalPtr = &d_final.std;        // use the std rule (7)
        
    else if (                           // Both are available (8)
        d_final.bol.length !=           // check lengths of matched texts
        d_final.std.length              // unequal lengths, use the rule
    )                                   // having the longer match length
        finalPtr =              
            d_final.bol.length > d_final.std.length ?
                &d_final.bol
            :
                &d_final.std;

    else                            // lengths are equal: use 1st rule
        finalPtr = 
            d_final.bol.rule < d_final.std.rule ?
                &d_final.bol
            :
                &d_final.std;

    setMatchedSize(finalPtr->length);

    d_atBOL = d_matched.back() == '\n';


    return finalPtr->rule;
}

size_t ScannerBase::getRange__(int ch)       // using int to prevent casts
{
    return ch == AT_EOF ? as<size_t>(s_rangeOfEOF__) : s_ranges__[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match
void ScannerBase::continue__(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void ScannerBase::echoCh__(size_t ch)
{
    *d_out << as<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void ScannerBase::echoFirst__(size_t ch)
{
    d_input.reRead(ch);
    d_input.reRead(d_matched, 1);
    echoCh__(d_matched[0]);
}

    // Update the rules associated with the current state, do this separately
    // for BOL and std rules.
    // If a rule was set, update the rule index and the current d_matched
    // length. 
void ScannerBase::updateFinals__()
{
    size_t len = d_matched.size();

    int const *rf = d_dfaBase__[d_state] + s_finIdx__;

    if (rf[0] != -1)        // update to the latest std rule
    {
        d_final.std = FinalData { as<size_t>(rf[0]), len };
    }

    if (rf[1] != -1)        // update to the latest bol rule
    {
        d_final.bol = FinalData { as<size_t>(rf[1]), len };
    }
}

void ScannerBase::reset__()
{
    d_final = Final{ 
                    FinalData{s_unavailable, 0}, 
                    FinalData {s_unavailable, 0} 
                };

    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int Scanner::executeAction__(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 0:
        {
#line 7 "lexer"
            return Parser::KEYWORD_IF;
        }
        break;
        case 1:
        {
#line 8 "lexer"
            {
                commandline::shell::scanDepth++;
                return Parser::KEYWORD_THEN;
            }
        }
        break;
        case 2:
        {
#line 12 "lexer"
            return Parser::KEYWORD_ELSE;
        }
        break;
        case 3:
        {
#line 13 "lexer"
            return Parser::KEYWORD_ELIF;
        }
        break;
        case 4:
        {
#line 14 "lexer"
            {
                commandline::shell::scanDepth--;
                return Parser::KEYWORD_FI;
            }
        }
        break;
        case 5:
        {
#line 18 "lexer"
            return Parser::KEYWORD_CASE;
        }
        break;
        case 6:
        {
#line 19 "lexer"
            return Parser::KEYWORD_IN;
        }
        break;
        case 7:
        {
#line 20 "lexer"
            {
                commandline::shell::scanDepth--;
                return Parser::KEYWORD_ESAC;
            }
        }
        break;
        case 8:
        {
#line 24 "lexer"
            return Parser::KEYWORD_FOR;
        }
        break;
        case 9:
        {
#line 25 "lexer"
            return Parser::KEYWORD_WHILE;
        }
        break;
        case 10:
        {
#line 26 "lexer"
            return Parser::KEYWORD_UNTIL;
        }
        break;
        case 11:
        {
#line 27 "lexer"
            {
                commandline::shell::scanDepth++;
                return Parser::KEYWORD_DO;
            }
        }
        break;
        case 12:
        {
#line 31 "lexer"
            {
                commandline::shell::scanDepth--;
                return Parser::KEYWORD_DONE;
            }
        }
        break;
        case 13:
        {
#line 35 "lexer"
            return Parser::KEYWORD_DEFAULT;
        }
        break;
        case 14:
        {
#line 36 "lexer"
            return Parser::KEYWORD_LOCAL;
        }
        break;
        case 15:
        {
#line 38 "lexer"
            {
                commandline::shell::scanDepth++;
                return Parser::OPEN_CURLY_BRACKET;
            }
        }
        break;
        case 16:
        {
#line 42 "lexer"
            {
                commandline::shell::scanDepth--;
                return Parser::CLOSING_CURLY_BRACKET;
            }
        }
        break;
        case 17:
        {
#line 47 "lexer"
            return Parser::OPEN_SQUARE_BRACKET;
        }
        break;
        case 18:
        {
#line 48 "lexer"
            return Parser::CLOSING_SQUARE_BRACKET;
        }
        break;
        case 19:
        {
#line 50 "lexer"
            return Parser::OPEN_PARENTHESIS;
        }
        break;
        case 20:
        {
#line 51 "lexer"
            return Parser::CLOSING_PARENTHESIS;
        }
        break;
        case 21:
        {
#line 53 "lexer"
            return Parser::PIPE_SYMBOL;
        }
        break;
        case 22:
        {
#line 54 "lexer"
            return Parser::ANDF_SYMBOL;
        }
        break;
        case 23:
        {
#line 55 "lexer"
            return Parser::ORF_SYMBOL;
        }
        break;
        case 24:
        {
#line 56 "lexer"
            return Parser::COMMAND_SEPARATOR;
        }
        break;
        case 25:
        {
#line 57 "lexer"
            return Parser::ELEMENT_SEPARATOR;
        }
        break;
        case 26:
        {
#line 58 "lexer"
            return Parser::CASE_DELIMITER;
        }
        break;
        case 27:
        {
#line 59 "lexer"
            return Parser::BACKGROUND_COMMANDS;
        }
        break;
        case 28:
        {
#line 60 "lexer"
            return Parser::INPUT_REDIRECTION;
        }
        break;
        case 29:
        {
#line 61 "lexer"
            return Parser::INPUT_FROM_A_HERE_DOCUMENT;
        }
        break;
        case 30:
        {
#line 62 "lexer"
            return Parser::OUTPUT_CREATION;
        }
        break;
        case 31:
        {
#line 63 "lexer"
            return Parser::OUTPUT_APPEND;
        }
        break;
        case 32:
        {
#line 64 "lexer"
            return Parser::NEGATE;
        }
        break;
        case 33:
        {
#line 66 "lexer"
            return Parser::ARROW;
        }
        break;
        case 34:
        {
#line 68 "lexer"
            return Parser::OPERATOR_PLUS;
        }
        break;
        case 35:
        {
#line 69 "lexer"
            return Parser::OPERATOR_MINUS;
        }
        break;
        case 36:
        {
#line 70 "lexer"
            return Parser::OPERATOR_DIVISION;
        }
        break;
        case 37:
        {
#line 71 "lexer"
            return Parser::OPERATOR_MULTIPLICATION;
        }
        break;
        case 38:
        {
#line 72 "lexer"
            return Parser::OPERATOR_MODULO;
        }
        break;
        case 39:
        {
#line 73 "lexer"
            return Parser::OPERATOR_POWER;
        }
        break;
        case 40:
        {
#line 74 "lexer"
            return Parser::OPERATOR_POWER;
        }
        break;
        case 41:
        {
#line 75 "lexer"
            return Parser::OPERATOR_ASSIGN;
        }
        break;
        case 42:
        {
#line 76 "lexer"
            return Parser::COMMAND_RETURNER;
        }
        break;
        case 43:
        {
#line 77 "lexer"
            return Parser::OPERATOR_EQUAL;
        }
        break;
        case 44:
        {
#line 78 "lexer"
            return Parser::OPERATOR_GREATER_THAN;
        }
        break;
        case 45:
        {
#line 79 "lexer"
            return Parser::OPERATOR_LESS_THAN;
        }
        break;
        case 46:
        {
#line 80 "lexer"
            return Parser::OPERATOR_GREATER_EQUAL;
        }
        break;
        case 47:
        {
#line 81 "lexer"
            return Parser::OPERATOR_LESS_EQUAL;
        }
        break;
        case 48:
        {
#line 82 "lexer"
            return Parser::OPERATOR_NOT_EQUAL;
        }
        break;
        case 49:
        {
#line 83 "lexer"
            return Parser::OPERATOR_AND;
        }
        break;
        case 50:
        {
#line 84 "lexer"
            return Parser::OPERATOR_OR;
        }
        break;
        case 51:
        {
#line 86 "lexer"
            return Parser::OPERATOR_AND;
        }
        break;
        case 52:
        {
#line 87 "lexer"
            return Parser::OPERATOR_OR;
        }
        break;
        case 53:
        {
#line 90 "lexer"
            return Parser::CONST_NULL;
        }
        break;
        case 54:
        {
#line 92 "lexer"
            return Parser::SINGLE_QUOTE;
        }
        break;
        case 55:
        {
#line 93 "lexer"
            return Parser::DOUBLE_QUOTE;
        }
        break;
        case 56:
        {
#line 94 "lexer"
            return Parser::DOUBLE;
        }
        break;
        case 57:
        {
#line 95 "lexer"
            return Parser::INTEGER;
        }
        break;
        case 58:
        {
#line 96 "lexer"
            return Parser::HEXADECIMAL;
        }
        break;
        case 59:
        {
#line 97 "lexer"
            return Parser::IDENTIFIER;
        }
        break;
        case 61:
        {
#line 102 "lexer"
            { throw ParserBase::FINISH_THIS_STRINGSTREAM; }
        }
        break;
        case 62:
        {
#line 104 "lexer"
            {
                std::cerr << lineNr() << ": \e[31;01mLexical error\e[0m" << std::endl;
                std::cerr << "the symbol " << matched() << " will be ignored, continue the command from there! (call the execute function again to continue!)" << std::endl;
                
                return Parser::LEX_ERR;
                
            }
        }
        break;
        case 63:
        {
#line 112 "lexer"
            {
                std::cerr << lineNr() << ": \e[31;01mLexical error\e[0m" << std::endl;
                std::cerr << "the symbol " << matched() << " will be ignored, continue the command from there! (call the execute function again to continue!)" << std::endl;
                
                return Parser::LEX_ERR;
                
            }
        }
        break;
    }
    noReturn__();
    return 0;
}
catch (Leave__ value)
{
    return static_cast<int>(value);
}

int Scanner::lex__()
{
    reset__();
    preCode();

    while (true)
    {
        size_t ch = get__();                // fetch next char
        size_t range = getRange__(ch);      // determine the range

        updateFinals__();                    // update the state's Final info

        switch (actionType__(range))        // determine the action
        {
            case ActionType__::CONTINUE:
                continue__(ch);
            continue;

            case ActionType__::MATCH:
            {
                d_token__ = executeAction__(matched__(ch));
                if (return__())
                {
                    print();
                    postCode(PostEnum__::RETURN);
                    return d_token__;
                }
                break;
            }

            case ActionType__::ECHO_FIRST:
                echoFirst__(ch);
            break;

            case ActionType__::ECHO_CH:
                echoCh__(ch);
            break;

            case ActionType__::RETURN:
                if (!popStream())
                {
                     postCode(PostEnum__::END);
                     return 0;
                }
                postCode(PostEnum__::POP);
             continue;
        } // switch

        postCode(PostEnum__::WIP);

        reset__();
        preCode();
    } // while
}

void ScannerBase::print__() const
{
}


