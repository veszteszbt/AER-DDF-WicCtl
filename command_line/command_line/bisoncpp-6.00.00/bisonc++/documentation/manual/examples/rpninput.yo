Consider the definition of tt(input):
        verb(
    input:    
            // empty 
    | 
            input line
    ;
        )
    This definition should be read as follows: em(A complete input is either
an empty string, or a complete input followed by an input line). Notice that
`complete input' is defined in terms of itself. This definition is said to be
em(left recursive) since the rule's nonterminal (tt(input)) appears as the
leftmost symbol in the production rule. See section ref(RECURSIVE).

The first alternative is empty: there are no symbols between the colon and the
first `tt(|)'; this means that input can match an empty string of input (no
tokens). We write the rules this way because it is legitimate to type
tt(Ctrl-d) (end of input) immediately after starting the calculator. By
convention empty alternatives are provided with the comment `tt(// empty)'.

The second production rule (`tt(input line)') handles all nontrivial input. It
means em(after reading any number of lines, read one more line). The left
recursion turns this rule into a loop: it processes any number of lines.

The parser's parsing function continues to process input until a grammatical
error is encountered or untilthe lexical analyzer returns the end-of-file
token. 

