Once b() has successfully analyzed the grammar it generates the tables that
are used by the parsing function to parse input according to the provided
grammar. Each state results in a em(state transition table). For the example
grammar used so far there are five states. Each table consists of rows having
two elements. The meaning of the elements depends on their position in the
table. 
    itemization(
    it() For the em(first) row, 
        itemization(
        it() the first element indicates the em(type) of the
state. The following types are recognized:
    table(2)(ll)(
    row(cell(NORMAL)cell(Despite its name, it's not used))
    row(cell(ERR_ITEM)cell(The state allows error recovery))
    row(cell(REQ_TOKEN)cell(The state requires a token nl()
                        (which may already be available)))
    row(cell(ERR_REQ)cell(combines ERR_ITEM and REQ_TOKEN))
    row(cell(DEF_RED)cell(This state has a default reduction))
    row(cell(ERR_DEF)cell(combines ERR_ITEM and DEF_RED))
    row(cell(REQ_DEF)cell(combines REQ_TOKEN and  DEF_RED))
    row(cell(ERR_REQ_DEF)cell(combines ERR_ITEM, REQ_TOKEN and DEF_RED))
    )
        it() the second element indicates the index of the table's last
        element. 
        )
    it() For the em(last) row,
        itemization(
        it() the first element stores the current token (it is not used when
the option tt(--thread-safe) was specified)
        it() the second element defines the action to perform. A positive
value indicates a shift to the indicated state; a negative value a reduction
according to the indicated rule number, disregarding its sign (note that it's
rule em(number), rather than rule em(offset); zero indicates the input is
accepted as correct according to the parser's grammar.
        )
    it() For all intermediate remaining rows:
        the first element stores the value of a required token for the action
specified in the second element, similar to the way an action is specified in
the last row. Symbolic values (like tt(PARSE_ACCEPT) rather than 0) may be
used as well.
    )
    )
    Here are the tables defining the five states of the example grammar 
as they are generated by b() in the file containing the parsing function:
        verb(
    SR__ s_0[] =
    {
        { { DEF_RED}, {  2} },         
        { {     258}, {  1} }, // start
        { {       0}, { -2} },         
    
    };
    
    SR__ s_1[] =
    {
        { { REQ_TOKEN}, {            4} },        
        { {       259}, {            2} }, // expr
        { {       257}, {            3} }, // NR  
        { {     EOF__}, { PARSE_ACCEPT} },        
        { {         0}, {            0} },        
    
    };
    
    SR__ s_2[] =
    {
        { { REQ_DEF}, {  2} },       
        { {      43}, {  4} }, // '+'
        { {       0}, { -1} },       
    
    };
    
    SR__ s_3[] =
    {
        { { DEF_RED}, {  1} }, 
        { {       0}, { -3} }, 
    
    };
    
    SR__ s_4[] =
    {
        { { REQ_TOKEN}, { 3} },        
        { {       259}, { 5} }, // expr
        { {       257}, { 3} }, // NR  
        { {         0}, { 0} },        
    
    };
    
    SR__ s_5[] =
    {
        { { REQ_DEF}, {  1} }, 
        { {       0}, { -4} }, 
    
    };
        )
