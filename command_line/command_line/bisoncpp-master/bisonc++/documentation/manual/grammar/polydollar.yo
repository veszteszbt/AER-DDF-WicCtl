itemization(
    itt($$ = ) 

    A semantic value is assigned to the rule's nonterminal's semantic
value. The right-hand side (rhs) of the assignment expression must be an
expression of the type that is associated with $$. This assignment operation
assumes that the type of the rhs-expression equals $$'s semantic value
type. If the types don't match the compiler issues a compilation error when
compiling tt(parse.cc). Casting the rhs to the correct value type is possible,
but in that case the function call operator (see the next item) is preferred,
as it does not require casting. If no semantic value type was associated with
$$ then the assignment tt($$ = STYPE__{}) can be used.

    itt($$(expr))

    A value is assigned to the rule's nonterminal's semantic value. tt(Expr)
must be of a type that can be statically cast to $$'s semantic value type. The
required tt(static_cast) is generated by bic() and doesn't have to be
specified for tt(expr).

    itt(_$$)

    This refers to the rule's nonterminal's semantic value, disregarding any
polymorphic type that might have been associated with the rule's nonterminal.

    itt($$)

    If no polymorphic type was associated with the rule's nonterminal then
this is shorthand for a reference to the rule's plain tt(STYPE__) value. If a
polymorphic value type was associated with the rule's nonterminal then this
shorthand represents a reference to a value of that particular type.

    itt($$.)

    If no polymorphic type was associated with the rule's nonterminal then
this is shorthand for the member selector operator, applied to a reference to
the rule's nonterminal's tt(STYPE__) value.  If a polymorphic value type was
associated with the rule's nonterminal then this shorthand represents the
member selector operator, applied to a reference of that particular type.

    itt($$->)

    If no polymorphic type was associated with the rule's nonterminal then
this is shorthand for the pointer to member operator, applied to a reference
to the rule's nonterminal's tt(STYPE__) value.  If a polymorphic value type
was associated with the rule's nonterminal then this shorthand represents the
pointer to member operator, applied to a reference of that particular type.

    itt(_$1)

    This refers to the current production rule's first component's generic
tt(STYPE__) value.

    itt($1)

    This shorthand refers to the semantic value of the production rule's
first element. If it was associated with a polymorphic type, then tt($1)
refers to a value of that particular type. If no association was defined then
tt($1) represents a generic tt(STYPE__) value.

    itt($1.)

    If the production rule's first component's semantic value was associated
with a polymorphic type, then tt($1.) is shorthand for the member selector
operator, applied to the value of the associated polymorphic type. If no
association was defined then tt($1.) is shorthand for the member selector
operator, applied to the first component's generic tt(STYPE__) value.

    itt($1->)

    If the production rule's first component's semantic value was associated
with a polymorphic type, then tt($1->) is shorthand for the pointer to member 
operator, applied to the value of the associated polymorphic type. If no
association was defined then tt($1.) is shorthand for the pointer to member 
operator, applied to the first component's generic tt(STYPE__) value.

    itt(_$-1)

    This refers to the generic (tt(STYPE__)) value of a component in a
production rule, listed immediately before the current rule's nonterminal ($-2
refers to a component used two elements before the current nonterminal, etc.).

    itt($-1)

    Same: this refers to the generic (tt(STYPE__)) value of a component in a
production rule, listed immediately before the current rule's nonterminal ($-2
refers to a component used two elements before the current nonterminal, etc.).

 
    itt($-1.)

    This is shorthand for the member selector operator applied to to the
generic tt(STYPE__) value of some production rule element, 1 element before
the current rule's nonterminal.

    itt($-1->)

    This is shorthand for the pointer to member operator applied to to the
generic tt(STYPE__) value of some production rule element, 1 element before
the current rule's nonterminal.

    itt($<tag>-1)

    This shorthand represents a reference to the semantic value of the
polymorphic type associated with tt(tag) of some production rule element, 1
element before the current rule's nonterminal.

If, when using the generated parser's class tt(parse) function, the
polymorphic type of that element turns out not to match the type that is
associated with tt(tag) then a run-time fatal error results. 

If that happens, and the tt(debug) option/directive had been specified when
bic() was run, then rerun the program after specifying
tt(parser.setDebug(Parser::ACTIONCASES)) to locate the tt(parse) function's
action block where the fatal error was encountered.
 
    itt($<tag>-1.)

    This shorthand represents the member selector operator, applied to the
semantic value of the polymorphic type associated with tt(tag) of some
production rule element, 1 element before the current rule's nonterminal.

If, when using the generated parser's class tt(parse) function, the
polymorphic type of that element turns out not to match the type that is
associated with tt(tag) then a run-time fatal error results.  The procedure
suggested at the previous (tt($<tag>-1)) item for solving such errors can be
applied here as well.
 
    itt($<tag>-1->)

    This shorthand represents the pointer to member selector operator, applied
to the semantic value of the polymorphic type associated with tt(tag) of some
production rule element, 1 element before the current rule's nonterminal.

If, when using the generated parser's class tt(parse) function, the
polymorphic type of that element turns out not to match the type that is
associated with tt(tag) then a run-time fatal error results.  The procedure
suggested at the previous (tt($<tag>-1)) item for solving such errors can be
applied here as well.
     )
