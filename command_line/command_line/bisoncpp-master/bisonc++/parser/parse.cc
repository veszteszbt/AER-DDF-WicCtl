// Generated by Bisonc++ V6.00.00 on Thu, 18 May 2017 09:02:19 +0200

// base/comment

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved__::UNDETERMINED__, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok__
// which is applied. In this errTok__ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved__
    {
        UNDETERMINED__   = -2,
        EOF__            = -1,
        errTok__         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    enum StateTransition
    {
        ACCEPT__   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {310, 4}, // 1: input ->  directives _two_percents rules optTwo_percents
     {312, 1}, // 2: _two_percents (TWO_PERCENTS) ->  TWO_PERCENTS
     {315, 1}, // 3: identifier (IDENTIFIER) ->  IDENTIFIER
     {316, 3}, // 4: typename ('<') ->  '<' identifier '>'
     {317, 1}, // 5: optComma (',') ->  ','
     {317, 0}, // 6: optComma ->  <empty>
     {318, 1}, // 7: optNumber (NUMBER) ->  NUMBER
     {318, 0}, // 8: optNumber ->  <empty>
     {319, 1}, // 9: optSemiCol (';') ->  ';'
     {319, 0}, // 10: optSemiCol ->  <empty>
     {320, 0}, // 11: _tokenname ->  <empty>
     {321, 2}, // 12: optTypename ->  typename _tokenname
     {321, 1}, // 13: optTypename ->  _tokenname
     {314, 1}, // 14: optTwo_percents (TWO_PERCENTS) ->  TWO_PERCENTS
     {314, 0}, // 15: optTwo_percents ->  <empty>
     {322, 1}, // 16: _baseclass_header (BASECLASS_HEADER) ->  BASECLASS_HEADER
     {323, 1}, // 17: _baseclass_preinclude (BASECLASS_PREINCLUDE) ->  BASECLASS_PREINCLUDE
     {324, 1}, // 18: _class_header (CLASS_HEADER) ->  CLASS_HEADER
     {325, 1}, // 19: _class_name (CLASS_NAME) ->  CLASS_NAME
     {326, 1}, // 20: _expect (EXPECT) ->  EXPECT
     {327, 1}, // 21: _filenames (FILENAMES) ->  FILENAMES
     {328, 1}, // 22: _implementation_header (IMPLEMENTATION_HEADER) ->  IMPLEMENTATION_HEADER
     {329, 0}, // 23: _incrementPrecedence ->  <empty>
     {330, 2}, // 24: _left (LEFT) ->  LEFT _typesymbol
     {332, 1}, // 25: _locationstruct (LOCATIONSTRUCT) ->  LOCATIONSTRUCT
     {333, 1}, // 26: _ltype (LTYPE) ->  LTYPE
     {334, 1}, // 27: _namespace (NAMESPACE) ->  NAMESPACE
     {335, 2}, // 28: _nonassoc (NONASSOC) ->  NONASSOC _typesymbol
     {336, 1}, // 29: _parsefun_source (PARSEFUN_SOURCE) ->  PARSEFUN_SOURCE
     {337, 0}, // 30: _pushPrecedence ->  <empty>
     {338, 1}, // 31: _required (REQUIRED) ->  REQUIRED
     {339, 2}, // 32: _right (RIGHT) ->  RIGHT _typesymbol
     {340, 1}, // 33: _scanner (SCANNER) ->  SCANNER
     {341, 1}, // 34: _scanner_class_name (SCANNER_CLASS_NAME) ->  SCANNER_CLASS_NAME
     {342, 1}, // 35: _scanner_token_function (SCANNER_TOKEN_FUNCTION) ->  SCANNER_TOKEN_FUNCTION
     {343, 1}, // 36: _scanner_matched_text_function (SCANNER_MATCHED_TEXT_FUNCTION) ->  SCANNER_MATCHED_TEXT_FUNCTION
     {344, 1}, // 37: _stack_expansion (STACK_EXPANSION) ->  STACK_EXPANSION
     {345, 1}, // 38: _start (START) ->  START
     {346, 0}, // 39: _symbol_exp ->  <empty>
     {347, 1}, // 40: _symbol (QUOTE) ->  QUOTE
     {347, 2}, // 41: _symbol ->  identifier optNumber
     {348, 3}, // 42: _symbolList ->  _symbolList optComma _symbol
     {348, 1}, // 43: _symbolList ->  _symbol
     {349, 3}, // 44: _symbols ->  _symbol_exp _symbolList optSemiCol
     {350, 1}, // 45: _target_directory (TARGET_DIRECTORY) ->  TARGET_DIRECTORY
     {351, 1}, // 46: _type (TYPE) ->  TYPE
     {352, 1}, // 47: _stype (STYPE) ->  STYPE
     {331, 0}, // 48: _typesymbol ->  <empty>
     {353, 2}, // 49: _token (TOKEN) ->  TOKEN _typesymbol
     {354, 1}, // 50: _union (UNION) ->  UNION
     {355, 1}, // 51: _default_actions (DEFAULT_ACTIONS) ->  DEFAULT_ACTIONS
     {356, 1}, // 52: _constructor_checks (CONSTRUCTOR_CHECKS) ->  CONSTRUCTOR_CHECKS
     {357, 1}, // 53: _tag_mismatches (WARN_TAGS) ->  WARN_TAGS
     {358, 1}, // 54: _polymorphic (POLYMORPHIC) ->  POLYMORPHIC
     {359, 1}, // 55: _typespec (':') ->  ':'
     {360, 3}, // 56: _polyspec ->  identifier _typespec identifier
     {361, 3}, // 57: _polyspecs (';') ->  _polyspecs ';' _polyspec
     {361, 1}, // 58: _polyspecs ->  _polyspec
     {362, 2}, // 59: _directiveSpec (STRING) ->  _baseclass_header STRING
     {362, 2}, // 60: _directiveSpec (STRING) ->  _baseclass_preinclude STRING
     {362, 2}, // 61: _directiveSpec (STRING) ->  _class_header STRING
     {362, 2}, // 62: _directiveSpec (IDENTIFIER) ->  _class_name IDENTIFIER
     {362, 1}, // 63: _directiveSpec (DEBUGFLAG) ->  DEBUGFLAG
     {362, 1}, // 64: _directiveSpec (PROMPT) ->  PROMPT
     {362, 1}, // 65: _directiveSpec (THREAD_SAFE) ->  THREAD_SAFE
     {362, 1}, // 66: _directiveSpec (ERROR_VERBOSE) ->  ERROR_VERBOSE
     {362, 2}, // 67: _directiveSpec (NUMBER) ->  _expect NUMBER
     {362, 2}, // 68: _directiveSpec (STRING) ->  _filenames STRING
     {362, 1}, // 69: _directiveSpec (FLEX) ->  FLEX
     {362, 2}, // 70: _directiveSpec (STRING) ->  _implementation_header STRING
     {362, 4}, // 71: _directiveSpec ->  _left _incrementPrecedence optTypename _symbols
     {362, 3}, // 72: _directiveSpec (BLOCK) ->  _locationstruct BLOCK optSemiCol
     {362, 1}, // 73: _directiveSpec (LSP_NEEDED) ->  LSP_NEEDED
     {362, 2}, // 74: _directiveSpec (STRING) ->  _ltype STRING
     {362, 2}, // 75: _directiveSpec (IDENTIFIER) ->  _namespace IDENTIFIER
     {362, 1}, // 76: _directiveSpec (NEG_DOLLAR) ->  NEG_DOLLAR
     {362, 1}, // 77: _directiveSpec (NOLINES) ->  NOLINES
     {362, 4}, // 78: _directiveSpec ->  _nonassoc _incrementPrecedence optTypename _symbols
     {362, 2}, // 79: _directiveSpec (STRING) ->  _parsefun_source STRING
     {362, 1}, // 80: _directiveSpec (PRINT_TOKENS) ->  PRINT_TOKENS
     {362, 2}, // 81: _directiveSpec (NUMBER) ->  _required NUMBER
     {362, 4}, // 82: _directiveSpec ->  _right _incrementPrecedence optTypename _symbols
     {362, 2}, // 83: _directiveSpec (STRING) ->  _scanner STRING
     {362, 2}, // 84: _directiveSpec (STRING) ->  _scanner_class_name STRING
     {362, 2}, // 85: _directiveSpec (STRING) ->  _scanner_token_function STRING
     {362, 2}, // 86: _directiveSpec (STRING) ->  _scanner_matched_text_function STRING
     {362, 2}, // 87: _directiveSpec (NUMBER) ->  _stack_expansion NUMBER
     {362, 2}, // 88: _directiveSpec (IDENTIFIER) ->  _start IDENTIFIER
     {362, 2}, // 89: _directiveSpec (STRING) ->  _stype STRING
     {362, 2}, // 90: _directiveSpec (STRING) ->  _target_directory STRING
     {362, 4}, // 91: _directiveSpec ->  _token optTypename _pushPrecedence _symbols
     {362, 3}, // 92: _directiveSpec ->  _type typename _symbols
     {362, 3}, // 93: _directiveSpec (BLOCK) ->  _union BLOCK optSemiCol
     {362, 2}, // 94: _directiveSpec (IDENTIFIER) ->  _default_actions IDENTIFIER
     {362, 2}, // 95: _directiveSpec (IDENTIFIER) ->  _constructor_checks IDENTIFIER
     {362, 3}, // 96: _directiveSpec ->  _polymorphic _polyspecs optSemiCol
     {362, 1}, // 97: _directiveSpec (WEAK_TAGS) ->  WEAK_TAGS
     {362, 2}, // 98: _directiveSpec (IDENTIFIER) ->  _tag_mismatches IDENTIFIER
     {362, 1}, // 99: _directiveSpec (errTok__) ->  errTok__
     {363, 1}, // 100: _directive ->  _directiveSpec
     {311, 2}, // 101: directives ->  directives _directive
     {311, 0}, // 102: directives ->  <empty>
     {364, 1}, // 103: _precSpec (IDENTIFIER) ->  IDENTIFIER
     {364, 1}, // 104: _precSpec (QUOTE) ->  QUOTE
     {365, 1}, // 105: _productionElement (QUOTE) ->  QUOTE
     {365, 1}, // 106: _productionElement (IDENTIFIER) ->  IDENTIFIER
     {365, 1}, // 107: _productionElement (BLOCK) ->  BLOCK
     {365, 2}, // 108: _productionElement (PREC) ->  PREC _precSpec
     {366, 2}, // 109: _productionElements ->  _productionElements _productionElement
     {366, 1}, // 110: _productionElements ->  _productionElement
     {367, 1}, // 111: _production ->  _productionElements
     {367, 0}, // 112: _production ->  <empty>
     {368, 1}, // 113: _productionSeparator ('|') ->  '|'
     {369, 3}, // 114: _productionList ->  _productionList _productionSeparator _production
     {369, 1}, // 115: _productionList ->  _production
     {370, 2}, // 116: _ruleName (':') ->  identifier ':'
     {371, 3}, // 117: _rule (';') ->  _ruleName _productionList ';'
     {313, 2}, // 118: rules ->  rules _rule
     {313, 0}, // 119: rules ->  <empty>
     {372, 1}, // 120: input_$ ->  input
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { DEF_RED}, {    3} },              
    { {     310}, {    1} }, // input     
    { {     311}, {    2} }, // directives
    { {       0}, { -102} },              
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {        2} }, 
    { {     EOF__}, { ACCEPT__} }, 
    { {         0}, {        0} }, 
};

SR__ s_2[] =
{
    { {  ERR_REQ}, { 76} },                                  
    { {      312}, {  3} }, // _two_percents                 
    { {      363}, {  4} }, // _directive                    
    { {      297}, {  5} }, // TWO_PERCENTS                  
    { {      362}, {  6} }, // _directiveSpec                
    { {      322}, {  7} }, // _baseclass_header             
    { {      323}, {  8} }, // _baseclass_preinclude         
    { {      324}, {  9} }, // _class_header                 
    { {      325}, { 10} }, // _class_name                   
    { {      263}, { 11} }, // DEBUGFLAG                     
    { {      302}, { 12} }, // PROMPT                        
    { {      303}, { 13} }, // THREAD_SAFE                   
    { {      265}, { 14} }, // ERROR_VERBOSE                 
    { {      326}, { 15} }, // _expect                       
    { {      327}, { 16} }, // _filenames                    
    { {      268}, { 17} }, // FLEX                          
    { {      328}, { 18} }, // _implementation_header        
    { {      330}, { 19} }, // _left                         
    { {      332}, { 20} }, // _locationstruct               
    { {      273}, { 21} }, // LSP_NEEDED                    
    { {      333}, { 22} }, // _ltype                        
    { {      334}, { 23} }, // _namespace                    
    { {      276}, { 24} }, // NEG_DOLLAR                    
    { {      277}, { 25} }, // NOLINES                       
    { {      335}, { 26} }, // _nonassoc                     
    { {      336}, { 27} }, // _parsefun_source              
    { {      283}, { 28} }, // PRINT_TOKENS                  
    { {      338}, { 29} }, // _required                     
    { {      339}, { 30} }, // _right                        
    { {      340}, { 31} }, // _scanner                      
    { {      341}, { 32} }, // _scanner_class_name           
    { {      342}, { 33} }, // _scanner_token_function       
    { {      343}, { 34} }, // _scanner_matched_text_function
    { {      344}, { 35} }, // _stack_expansion              
    { {      345}, { 36} }, // _start                        
    { {      352}, { 37} }, // _stype                        
    { {      350}, { 38} }, // _target_directory             
    { {      353}, { 39} }, // _token                        
    { {      351}, { 40} }, // _type                         
    { {      354}, { 41} }, // _union                        
    { {      355}, { 42} }, // _default_actions              
    { {      356}, { 43} }, // _constructor_checks           
    { {      358}, { 44} }, // _polymorphic                  
    { {      301}, { 45} }, // WEAK_TAGS                     
    { {      357}, { 46} }, // _tag_mismatches               
    { { errTok__}, { 47} }, // errTok__                      
    { {      257}, { 48} }, // BASECLASS_HEADER              
    { {      258}, { 49} }, // BASECLASS_PREINCLUDE          
    { {      260}, { 50} }, // CLASS_HEADER                  
    { {      261}, { 51} }, // CLASS_NAME                    
    { {      266}, { 52} }, // EXPECT                        
    { {      267}, { 53} }, // FILENAMES                     
    { {      270}, { 54} }, // IMPLEMENTATION_HEADER         
    { {      271}, { 55} }, // LEFT                          
    { {      272}, { 56} }, // LOCATIONSTRUCT                
    { {      274}, { 57} }, // LTYPE                         
    { {      275}, { 58} }, // NAMESPACE                     
    { {      278}, { 59} }, // NONASSOC                      
    { {      280}, { 60} }, // PARSEFUN_SOURCE               
    { {      285}, { 61} }, // REQUIRED                      
    { {      286}, { 62} }, // RIGHT                         
    { {      287}, { 63} }, // SCANNER                       
    { {      288}, { 64} }, // SCANNER_CLASS_NAME            
    { {      290}, { 65} }, // SCANNER_TOKEN_FUNCTION        
    { {      289}, { 66} }, // SCANNER_MATCHED_TEXT_FUNCTION 
    { {      291}, { 67} }, // STACK_EXPANSION               
    { {      292}, { 68} }, // START                         
    { {      294}, { 69} }, // STYPE                         
    { {      295}, { 70} }, // TARGET_DIRECTORY              
    { {      296}, { 71} }, // TOKEN                         
    { {      298}, { 72} }, // TYPE                          
    { {      299}, { 73} }, // UNION                         
    { {      264}, { 74} }, // DEFAULT_ACTIONS               
    { {      262}, { 75} }, // CONSTRUCTOR_CHECKS            
    { {      281}, { 76} }, // POLYMORPHIC                   
    { {      300}, { 77} }, // WARN_TAGS                     
    { {        0}, {  0} },                                  
};

SR__ s_3[] =
{
    { { DEF_RED}, {    2} },         
    { {     313}, {   78} }, // rules
    { {       0}, { -119} },         
};

SR__ s_4[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 79} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 80} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 81} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       269}, { 82} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       279}, { 83} }, // NUMBER
    { {         0}, {  0} },          
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 84} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 85} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_19[] =
{
    { { DEF_RED}, {   2} },                        
    { {     329}, {  86} }, // _incrementPrecedence
    { {       0}, { -23} },                        
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       259}, { 87} }, // BLOCK
    { {         0}, {  0} },         
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 88} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       269}, { 89} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {   2} },                        
    { {     329}, {  90} }, // _incrementPrecedence
    { {       0}, { -23} },                        
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 91} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       279}, { 92} }, // NUMBER
    { {         0}, {  0} },          
};

SR__ s_30[] =
{
    { { DEF_RED}, {   2} },                        
    { {     329}, {  93} }, // _incrementPrecedence
    { {       0}, { -23} },                        
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 94} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 95} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 96} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       293}, { 97} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       279}, { 98} }, // NUMBER
    { {         0}, {  0} },          
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       269}, { 99} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       293}, { 100} }, // STRING
    { {         0}, {   0} },          
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       293}, { 101} }, // STRING
    { {         0}, {   0} },          
};

SR__ s_39[] =
{
    { { REQ_DEF}, {   5} },               
    { {     321}, { 102} }, // optTypename
    { {     316}, { 103} }, // typename   
    { {     320}, { 104} }, // _tokenname 
    { {      60}, { 105} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       316}, { 106} }, // typename
    { {        60}, { 105} }, // '<'     
    { {         0}, {   0} },            
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       259}, { 107} }, // BLOCK
    { {         0}, {   0} },         
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       269}, { 108} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       269}, { 109} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {   5} },              
    { {       361}, { 110} }, // _polyspecs
    { {       360}, { 111} }, // _polyspec 
    { {       315}, { 112} }, // identifier
    { {       269}, { 113} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       269}, { 114} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_55[] =
{
    { { DEF_RED}, {   2} },               
    { {     331}, { 115} }, // _typesymbol
    { {       0}, { -48} },               
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   2} },               
    { {     331}, { 116} }, // _typesymbol
    { {       0}, { -48} },               
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {   2} },               
    { {     331}, { 117} }, // _typesymbol
    { {       0}, { -48} },               
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   2} },               
    { {     331}, { 118} }, // _typesymbol
    { {       0}, { -48} },               
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_78[] =
{
    { { REQ_DEF}, {   7} },                   
    { {     314}, { 119} }, // optTwo_percents
    { {     371}, { 120} }, // _rule          
    { {     297}, { 121} }, // TWO_PERCENTS   
    { {     370}, { 122} }, // _ruleName      
    { {     315}, { 123} }, // identifier     
    { {     269}, { 113} }, // IDENTIFIER     
    { {       0}, { -15} },                   
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_83[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_86[] =
{
    { { REQ_DEF}, {   5} },               
    { {     321}, { 124} }, // optTypename
    { {     316}, { 103} }, // typename   
    { {     320}, { 104} }, // _tokenname 
    { {      60}, { 105} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_87[] =
{
    { { REQ_DEF}, {   3} },              
    { {     319}, { 125} }, // optSemiCol
    { {      59}, { 126} }, // ';'       
    { {       0}, { -10} },              
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_90[] =
{
    { { REQ_DEF}, {   5} },               
    { {     321}, { 127} }, // optTypename
    { {     316}, { 103} }, // typename   
    { {     320}, { 104} }, // _tokenname 
    { {      60}, { 105} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   5} },               
    { {     321}, { 128} }, // optTypename
    { {     316}, { 103} }, // typename   
    { {     320}, { 104} }, // _tokenname 
    { {      60}, { 105} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {   2} },                   
    { {     337}, { 129} }, // _pushPrecedence
    { {       0}, { -30} },                   
};

SR__ s_103[] =
{
    { { DEF_RED}, {   2} },              
    { {     320}, { 130} }, // _tokenname
    { {       0}, { -11} },              
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       315}, { 131} }, // identifier
    { {       269}, { 113} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_106[] =
{
    { { DEF_RED}, {   3} },               
    { {     349}, { 132} }, // _symbols   
    { {     346}, { 133} }, // _symbol_exp
    { {       0}, { -39} },               
};

SR__ s_107[] =
{
    { { REQ_DEF}, {   3} },              
    { {     319}, { 134} }, // optSemiCol
    { {      59}, { 126} }, // ';'       
    { {       0}, { -10} },              
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   3} },              
    { {     319}, { 135} }, // optSemiCol
    { {      59}, { 136} }, // ';'       
    { {       0}, { -10} },              
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {   3} },             
    { {       359}, { 137} }, // _typespec
    { {        58}, { 138} }, // ':'      
    { {         0}, {   0} },             
};

SR__ s_113[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_120[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR__ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_122[] =
{
    { { REQ_DEF}, {    9} },                       
    { {     369}, {  139} }, // _productionList    
    { {     367}, {  140} }, // _production        
    { {     366}, {  141} }, // _productionElements
    { {     365}, {  142} }, // _productionElement 
    { {     284}, {  143} }, // QUOTE              
    { {     269}, {  144} }, // IDENTIFIER         
    { {     259}, {  145} }, // BLOCK              
    { {     282}, {  146} }, // PREC               
    { {       0}, { -112} },                       
};

SR__ s_123[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 147} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_124[] =
{
    { { DEF_RED}, {   3} },               
    { {     349}, { 148} }, // _symbols   
    { {     346}, { 133} }, // _symbol_exp
    { {       0}, { -39} },               
};

SR__ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_126[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_127[] =
{
    { { DEF_RED}, {   3} },               
    { {     349}, { 149} }, // _symbols   
    { {     346}, { 133} }, // _symbol_exp
    { {       0}, { -39} },               
};

SR__ s_128[] =
{
    { { DEF_RED}, {   3} },               
    { {     349}, { 150} }, // _symbols   
    { {     346}, { 133} }, // _symbol_exp
    { {       0}, { -39} },               
};

SR__ s_129[] =
{
    { { DEF_RED}, {   3} },               
    { {     349}, { 151} }, // _symbols   
    { {     346}, { 133} }, // _symbol_exp
    { {       0}, { -39} },               
};

SR__ s_130[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        62}, { 152} }, // '>'
    { {         0}, {   0} },       
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {   6} },               
    { {       348}, { 153} }, // _symbolList
    { {       347}, { 154} }, // _symbol    
    { {       284}, { 155} }, // QUOTE      
    { {       315}, { 156} }, // identifier 
    { {       269}, { 113} }, // IDENTIFIER 
    { {         0}, {   0} },               
};

SR__ s_134[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_136[] =
{
    { { REQ_DEF}, {   4} },              
    { {     360}, { 157} }, // _polyspec 
    { {     315}, { 112} }, // identifier
    { {     269}, { 113} }, // IDENTIFIER
    { {       0}, {  -9} },              
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       315}, { 158} }, // identifier
    { {       269}, { 113} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_139[] =
{
    { { REQ_TOKEN}, {   4} },                        
    { {        59}, { 159} }, // ';'                 
    { {       368}, { 160} }, // _productionSeparator
    { {       124}, { 161} }, // '|'                 
    { {         0}, {   0} },                        
};

SR__ s_140[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_141[] =
{
    { { REQ_DEF}, {    6} },                      
    { {     365}, {  162} }, // _productionElement
    { {     284}, {  143} }, // QUOTE             
    { {     269}, {  144} }, // IDENTIFIER        
    { {     259}, {  145} }, // BLOCK             
    { {     282}, {  146} }, // PREC              
    { {       0}, { -111} },                      
};

SR__ s_142[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_144[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_145[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       364}, { 163} }, // _precSpec 
    { {       269}, { 164} }, // IDENTIFIER
    { {       284}, { 165} }, // QUOTE     
    { {         0}, {   0} },              
};

SR__ s_147[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_150[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_152[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_153[] =
{
    { {  REQ_DEF}, {  47} },                                 
    { {      319}, { 166} }, // optSemiCol                   
    { {      317}, { 167} }, // optComma                     
    { {       59}, { 126} }, // ';'                          
    { {       44}, { 168} }, // ','                          
    { { errTok__}, { -10} }, // errTok__                     
    { {      257}, { -10} }, // BASECLASS_HEADER             
    { {      258}, { -10} }, // BASECLASS_PREINCLUDE         
    { {      260}, { -10} }, // CLASS_HEADER                 
    { {      261}, { -10} }, // CLASS_NAME                   
    { {      262}, { -10} }, // CONSTRUCTOR_CHECKS           
    { {      263}, { -10} }, // DEBUGFLAG                    
    { {      264}, { -10} }, // DEFAULT_ACTIONS              
    { {      265}, { -10} }, // ERROR_VERBOSE                
    { {      266}, { -10} }, // EXPECT                       
    { {      267}, { -10} }, // FILENAMES                    
    { {      268}, { -10} }, // FLEX                         
    { {      270}, { -10} }, // IMPLEMENTATION_HEADER        
    { {      271}, { -10} }, // LEFT                         
    { {      292}, { -10} }, // START                        
    { {      272}, { -10} }, // LOCATIONSTRUCT               
    { {      273}, { -10} }, // LSP_NEEDED                   
    { {      274}, { -10} }, // LTYPE                        
    { {      275}, { -10} }, // NAMESPACE                    
    { {      276}, { -10} }, // NEG_DOLLAR                   
    { {      277}, { -10} }, // NOLINES                      
    { {      278}, { -10} }, // NONASSOC                     
    { {      280}, { -10} }, // PARSEFUN_SOURCE              
    { {      281}, { -10} }, // POLYMORPHIC                  
    { {      283}, { -10} }, // PRINT_TOKENS                 
    { {      285}, { -10} }, // REQUIRED                     
    { {      286}, { -10} }, // RIGHT                        
    { {      287}, { -10} }, // SCANNER                      
    { {      288}, { -10} }, // SCANNER_CLASS_NAME           
    { {      289}, { -10} }, // SCANNER_MATCHED_TEXT_FUNCTION
    { {      290}, { -10} }, // SCANNER_TOKEN_FUNCTION       
    { {      291}, { -10} }, // STACK_EXPANSION              
    { {      294}, { -10} }, // STYPE                        
    { {      295}, { -10} }, // TARGET_DIRECTORY             
    { {      296}, { -10} }, // TOKEN                        
    { {      297}, { -10} }, // TWO_PERCENTS                 
    { {      298}, { -10} }, // TYPE                         
    { {      299}, { -10} }, // UNION                        
    { {      300}, { -10} }, // WARN_TAGS                    
    { {      301}, { -10} }, // WEAK_TAGS                    
    { {      302}, { -10} }, // PROMPT                       
    { {      303}, { -10} }, // THREAD_SAFE                  
    { {        0}, {  -6} },                                 
};

SR__ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_155[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_156[] =
{
    { { REQ_DEF}, {   3} },             
    { {     318}, { 169} }, // optNumber
    { {     279}, { 170} }, // NUMBER   
    { {       0}, {  -8} },             
};

SR__ s_157[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_158[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_159[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_160[] =
{
    { { REQ_DEF}, {    8} },                       
    { {     367}, {  171} }, // _production        
    { {     366}, {  141} }, // _productionElements
    { {     365}, {  142} }, // _productionElement 
    { {     284}, {  143} }, // QUOTE              
    { {     269}, {  144} }, // IDENTIFIER         
    { {     259}, {  145} }, // BLOCK              
    { {     282}, {  146} }, // PREC               
    { {       0}, { -112} },                       
};

SR__ s_161[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_162[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -109} }, 
};

SR__ s_163[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_164[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_165[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_166[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_167[] =
{
    { { REQ_TOKEN}, {   5} },              
    { {       347}, { 172} }, // _symbol   
    { {       284}, { 155} }, // QUOTE     
    { {       315}, { 156} }, // identifier
    { {       269}, { 113} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_168[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_169[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_170[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_171[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR__ s_172[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,
};

} // anonymous namespace ends



// $insert polymorphicCode
namespace Meta__
{

size_t const *t_nErrors;
// $insert idoftag
char const *idOfTag__[] = {
    "TERMINAL",
    "BLOCK",
    "TEXT",
    "BOOL",
    "SYMBOL",
    "SIZE_T",
    "<undefined>"
};

size_t const *s_nErrors__;

Base::~Base()
{}

}   // namespace Meta__

// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved__::UNDETERMINED__),
    // $insert baseclasscode
    d_requiredTokens__(0)
{
    Meta__::t_nErrors = &d_nErrors__;
}

// base/clearin
void ParserBase::clearin__()
{
    d_nErrors__ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved__::UNDETERMINED__;
    d_next = TokenPair{ Reserved__::UNDETERMINED__, STYPE__{} };
    d_recovery = false;
    d_acceptedTokens__ = d_requiredTokens__;
    d_val__ = STYPE__{};

    push__(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

// base/lex
void ParserBase::lex__(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved__::EOF__;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup__() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR__ const *sr = s_state[d_state];
    SR__ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken__()
{
    d_token = d_next.first;
    d_val__ = std::move(d_next.second);

    d_next.first = Reserved__::UNDETERMINED__;
}

// base/push
void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize__() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val__) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken__(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val__) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken__()
{
    if (d_token != Reserved__::UNDETERMINED__)
        pushToken__(d_token);
}

// base/reduce
void ParserBase::reduce__(int rule)
{
    PI__ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop__(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift__(int action)
{
    push__(action);
    popToken__();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens__ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery__()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken__(Reserved__::errTok__);      // specify errTok__ as next token
    push__(lookup__());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top__() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery__()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle__ for details.

    startRecovery__();
}

// derived/executeaction
void Parser::executeAction__(int production)
try
{
    if (token__() != Reserved__::UNDETERMINED__)
        pushToken__(token__());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 47 "grammar"
        {
         expectRules();
         }
        break;

        case 3:
#line 3 "inc/identifier"
        {
         d_val__ = d_matched;
         }
        break;

        case 4:
#line 5 "inc/typename"
        {
         checkField(vs__(-1).get<Tag__::TEXT>()); 
         }
        break;

        case 7:
#line 9 "inc/opt"
        {
         d_val__ = true;
         }
        break;

        case 8:
#line 13 "inc/opt"
        {
         d_val__ = false;
         }
        break;

        case 11:
#line 25 "inc/opt"
        {
         d_expect = "token name";
         }
        break;

        case 13:
#line 35 "inc/opt"
        {
         d_field.clear();
         }
        break;

        case 14:
#line 42 "inc/opt"
        {
         wmsg << 
         "Ignoring all input beyond the second %% token" << endl;
         ACCEPT();
         }
        break;

        case 16:
#line 3 "inc/directives"
        {
         d_expect = "baseclass header name";
         }
        break;

        case 17:
#line 10 "inc/directives"
        {
         d_expect = "baseclass pre-include name";
         }
        break;

        case 18:
#line 17 "inc/directives"
        {
         d_expect = "class header name";
         }
        break;

        case 19:
#line 24 "inc/directives"
        {
         d_expect = "class name";
         }
        break;

        case 20:
#line 31 "inc/directives"
        {
         d_expect = "number (of conflicts)";
         }
        break;

        case 21:
#line 38 "inc/directives"
        {
         d_expect = "generic name of files";
         }
        break;

        case 22:
#line 45 "inc/directives"
        {
         d_expect = "implementation header name";
         }
        break;

        case 23:
#line 51 "inc/directives"
        {
         Terminal::incrementPrecedence();
         }
        break;

        case 24:
#line 59 "inc/directives"
        {
         d_association = Terminal::LEFT;
         }
        break;

        case 25:
#line 66 "inc/directives"
        {
         d_expect = "Location struct definition";
         }
        break;

        case 26:
#line 73 "inc/directives"
        {
         d_expect = "Location type specification";
         }
        break;

        case 27:
#line 80 "inc/directives"
        {
         d_expect = "Namespace identifier";
         }
        break;

        case 28:
#line 88 "inc/directives"
        {
         d_association = Terminal::NONASSOC;
         }
        break;

        case 29:
#line 95 "inc/directives"
        {
         d_expect = "File name for the parse() member";
         }
        break;

        case 30:
#line 101 "inc/directives"
        {
         d_val__ = Terminal::sPrecedence();
         Terminal::resetPrecedence();
         }
        break;

        case 31:
#line 109 "inc/directives"
        {
         d_expect = "Required number of tokens between errors";
         }
        break;

        case 32:
#line 117 "inc/directives"
        {
         d_association = Terminal::RIGHT;
         }
        break;

        case 33:
#line 124 "inc/directives"
        {
         d_expect = "Path to the scanner header filename";
         }
        break;

        case 34:
#line 131 "inc/directives"
        {
         d_expect = "Name of the Scanner class";
         }
        break;

        case 35:
#line 138 "inc/directives"
        {
         d_expect = "Scanner function returning the next token";
         }
        break;

        case 36:
#line 145 "inc/directives"
        {
         d_expect = "Scanner function returning the matched text";
         }
        break;

        case 37:
#line 152 "inc/directives"
        {
         d_expect = "Stack expansion size";
         }
        break;

        case 38:
#line 159 "inc/directives"
        {
         d_expect = "Start rule" ;
         }
        break;

        case 39:
#line 165 "inc/directives"
        {
         d_expect = "identifier or character-constant";
         }
        break;

        case 40:
#line 172 "inc/directives"
        {
         defineTerminal(d_scanner.canonicalQuote(), Symbol::CHAR_TERMINAL);
         }
        break;

        case 41:
#line 178 "inc/directives"
        { 
         defineTokenName(vs__(-1).get<Tag__::TEXT>(), vs__(0).get<Tag__::BOOL>()); 
         }
        break;

        case 45:
#line 197 "inc/directives"
        {
         d_expect = "target directory";
         }
        break;

        case 46:
#line 204 "inc/directives"
        {
         d_expect = "type-name";
         d_typeDirective = true;
         }
        break;

        case 47:
#line 212 "inc/directives"
        {
         d_expect = "STYPE type name" ;
         }
        break;

        case 48:
#line 218 "inc/directives"
        {
         d_expect = "opt. <type> identifier(s) or char constant(s)";
         }
        break;

        case 49:
#line 226 "inc/directives"
        {
         d_association = Terminal::UNDEFINED;
         }
        break;

        case 50:
#line 233 "inc/directives"
        {
         d_expect = "Semantic value union definition";
         }
        break;

        case 51:
#line 240 "inc/directives"
        {
         d_expect = "%default-actions on/off specification";
         }
        break;

        case 52:
#line 247 "inc/directives"
        {
         d_expect = "%constructor-checks  on/off specification";
         }
        break;

        case 53:
#line 254 "inc/directives"
        {
         d_expect = "%tag-mismatches on/off specification";
         }
        break;

        case 54:
#line 261 "inc/directives"
        {
         setPolymorphicDecl();
         }
        break;

        case 55:
#line 268 "inc/directives"
        {
         d_scanner.beginTypeSpec();
         }
        break;

        case 56:
#line 275 "inc/directives"
        {
         addPolymorphic(vs__(-2).get<Tag__::TEXT>(), vs__(0).get<Tag__::TEXT>());
         }
        break;

        case 59:
#line 290 "inc/directives"
        {
         d_options.setBaseClassHeader(); 
         }
        break;

        case 60:
#line 296 "inc/directives"
        {
         d_options.setPreInclude();
         }
        break;

        case 61:
#line 302 "inc/directives"
        {
         d_options.setClassHeader();
         }
        break;

        case 62:
#line 308 "inc/directives"
        {
         d_options.setClassName();
         }
        break;

        case 63:
#line 313 "inc/directives"
        {
         d_options.setGenDebug();
         }
        break;

        case 64:
#line 318 "inc/directives"
        {
         d_options.setPrompt();
         }
        break;

        case 65:
#line 323 "inc/directives"
        {
         d_options.setThreadSafe();
         }
        break;

        case 66:
#line 328 "inc/directives"
        {
         d_options.setErrorVerbose();
         }
        break;

        case 67:
#line 334 "inc/directives"
        {
         setExpectedConflicts();
         }
        break;

        case 68:
#line 340 "inc/directives"
        {
         d_options.setGenericFilename();
         }
        break;

        case 69:
#line 345 "inc/directives"
        {
         d_options.setFlex();
         }
        break;

        case 70:
#line 351 "inc/directives"
        {
         d_options.setImplementationHeader();
         }
        break;

        case 72:
#line 363 "inc/directives"
        {
         d_options.setLocationDecl(d_scanner.block().str());
         }
        break;

        case 73:
#line 368 "inc/directives"
        {
         d_options.setLspNeeded();
         }
        break;

        case 74:
#line 374 "inc/directives"
        {
         d_options.setLtype();
         }
        break;

        case 75:
#line 380 "inc/directives"
        {
         d_options.setNamespace();
         }
        break;

        case 76:
#line 385 "inc/directives"
        {
         setNegativeDollarIndices();
         }
        break;

        case 77:
#line 390 "inc/directives"
        {
         d_options.unsetLines();
         }
        break;

        case 79:
#line 401 "inc/directives"
        {
         d_options.setParsefunSource();
         }
        break;

        case 80:
#line 406 "inc/directives"
        {
         d_options.setPrintTokens();
         }
        break;

        case 81:
#line 412 "inc/directives"
        {
         d_options.setRequiredTokens(d_scanner.number());
         }
        break;

        case 83:
#line 423 "inc/directives"
        {
         d_options.setScannerInclude();
         }
        break;

        case 84:
#line 429 "inc/directives"
        {
         d_options.setScannerClassName();
         }
        break;

        case 85:
#line 435 "inc/directives"
        {
         d_options.setScannerTokenFunction();
         }
        break;

        case 86:
#line 441 "inc/directives"
        {
         d_options.setScannerMatchedTextFunction();
         }
        break;

        case 87:
#line 447 "inc/directives"
        {
         d_options.setStackExpansion(d_scanner.number());
         }
        break;

        case 88:
#line 453 "inc/directives"
        {
         setStart();
         }
        break;

        case 89:
#line 459 "inc/directives"
        {
         d_options.setStype();
         }
        break;

        case 90:
#line 465 "inc/directives"
        {
         d_options.setTargetDirectory();
         }
        break;

        case 91:
#line 473 "inc/directives"
        {
         Terminal::set_sPrecedence(vs__(-1).get<Tag__::SIZE_T>());
         }
        break;

        case 93:
#line 484 "inc/directives"
        {
         setUnionDecl();
         }
        break;

        case 94:
#line 490 "inc/directives"
        {
         defaultAction();
         }
        break;

        case 95:
#line 496 "inc/directives"
        {
         constructorChecks();
         }
        break;

        case 97:
#line 505 "inc/directives"
        {
         d_options.unsetStrongTags();
         }
        break;

        case 98:
#line 511 "inc/directives"
        {
         warnTagMismatches();
         }
        break;

        case 100:
#line 521 "inc/directives"
        {
         d_expect.erase();
         d_typeDirective = false;
         }
        break;

        case 103:
#line 3 "inc/rules"
        {
         d_val__.assign<Tag__::SIZE_T>(IDENTIFIER);
         }
        break;

        case 104:
#line 8 "inc/rules"
        {
         d_val__.assign<Tag__::SIZE_T>(QUOTE);
         }
        break;

        case 105:
#line 15 "inc/rules"
        {
         d_val__ = useTerminal();
         }
        break;

        case 106:
#line 20 "inc/rules"
        {
         d_val__ = useSymbol();
         }
        break;

        case 107:
#line 25 "inc/rules"
        {
         d_val__ = d_scanner.block();
         }
        break;

        case 108:
#line 31 "inc/rules"
        {
         setPrecedence(vs__(0).get<Tag__::SIZE_T>());
         d_val__ = STYPE__{};
         }
        break;

        case 109:
#line 39 "inc/rules"
        {
         d_val__ = handleProductionElements(vs__(-1), vs__(0));
         
         
         }
        break;

        case 110:
#line 46 "inc/rules"
        {
         d_val__ = vs__(0);
         }
        break;

        case 111:
#line 53 "inc/rules"
        {
         handleProductionElement(vs__(0));
         
         
         }
        break;

        case 112:
#line 59 "inc/rules"
        {
         
         
         checkEmptyBlocktype();
         }
        break;

        case 113:
#line 69 "inc/rules"
        {
         d_rules.addProduction(d_scanner.lineNr());
         }
        break;

        case 116:
#line 84 "inc/rules"
        {
         openRule(vs__(-1).get<Tag__::TEXT>());
         }
        break;

        case 117:
#line 93 "inc/rules"
        {
         updateDefaultActionLineNr();
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle__()
try
{
    if (s_state[state__()]->d_type & REQ_TOKEN)
        nextToken__();              // obtain next token


    int action = lookup__();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift__(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery__())
            redoToken__();
        else
            executeAction__(-action);
                                            // next token is the rule's LHS
        reduce__(-action); 
        return;
    }

    if (recovery__())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery__)
{
    if (not recovery__())
        errorRecovery__();
    else
    {
        if (token__() == Reserved__::EOF__)
            ABORT();
        popToken__();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken__()
{ 
    // If d_token is Reserved__::UNDETERMINED__ then if savedToken__() is
    // Reserved__::UNDETERMINED__ another token is obtained from lex(). Then
    // savedToken__() is assigned to d_token.

                                    // no need for a token: got one already
    if (token__() != Reserved__::UNDETERMINED__) 
    {
        return;                             
    }

    if (savedToken__() != Reserved__::UNDETERMINED__)
    {
        popToken__();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;       // accept another token (see
                                    // errorRecover())
        lex__(lex());
        print__();
    }
    print();
}

// derived/print
void Parser::print__()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin__.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin__();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle__();
    }
}
catch (Return__ retValue)
{
    return retValue or d_nErrors__;
}


// derived/tail


