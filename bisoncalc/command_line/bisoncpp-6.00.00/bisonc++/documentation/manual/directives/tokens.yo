Syntax: quote(
    bf(%token) tt(terminal token(s)) nl()
    bf(%token) [ <type> ] tt(terminal token(s)) 
        )

The bf(%token) directive is used to define one or more symbolic terminal
tokens.  When multiple tokens are listed they must be separated by whitespace
or by commas. 

    The tt(<type>) specification is optional, and specifies the type of the
semantic value when receiving one of the subsequently named tokens is
received. The pointed arrows are part of the type specification; the type
itself must be a field of a tt(%union) specification (see section ref(UNION))
or a tag defined at the tt(%polymorphic) directive (see section
ref(POLYMORPHIC)).

        b() converts symbolic tokens (including those defined by the
precedence directives (cf. section ref(PRECEDENCE))) into tt(Parser::Tokens)
enumeration values (see section ref(PARSERCLASS)). This allows the lexical
scanner to return named tokens directly as tt(Parser::name).

    The enumeration containing the token names is defined in tt(Parserbase.h),
the parser's base class header file. So externally defined lexical scanners
can include that header file to have access to those enumeration values. 
Token names can be returned as tt(Parser::name): it's not necessary to
refer to token names as tt(ParserBase::name).
