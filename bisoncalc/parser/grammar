%baseclass-preinclude cmath

%scanner ../scanner/Scanner.h


%token KEYWORD_IF
%token KEYWORD_THEN
%token KEYWORD_ELSE
%token KEYWORD_ELIF
%token KEYWORD_FI
%token KEYWORD_CASE
%token KEYWORD_IN
%token KEYWORD_ESAC
%token KEYWORD_FOR
%token KEYWORD_WHILE
%token KEYWORD_UNTIL
%token KEYWORD_DO
%token KEYWORD_DONE
%token OCURLY
%token CCURLY
%token PIPE_SYMBOL
%token ANDF_SYMBOL
%token ORF_SYMBOL
%token COMMAND_SEPARATOR
%token CASE_DELIMITER
%token BACKGROUND_COMMANDS
%token OPARENTHESIS
%token CPARENTHESIS
%token INPUT_REDIRECTION
%token INPUT_FROM_A_HERE_DOCUMENT
%token OUTPUT_CREATION
%token OUTPUT_APPEND
%token SINGLEQUOTE
%token DOUBLEQUOTE
%token FLOAT
%token INTEGER
%token IDENTIFIER
%token OPERATOR_LET_BE
%token NEGATE

%left OPERATOR_AND OPERATOR_OR
%left OPERATOR_EQUAL OPERATOR_GREATER_THAN OPERATOR_LESS_THAN OPERATOR_GREATER_EQUAL OPERATOR_LESS_EQUAL OPERATOR_NOT_EQUAL
%left OPERATOR_PLUS OPERATOR_MINUS
%left OPERATOR_MULTIPLICATION OPERATOR_DIVISION OPERATOR_MODULO
%left OPERATOR_POWER


%%


start:
	command_list
	{
		std::cout << "command_list" << std::endl;
	}
;

command_list:
	command command_list
	{
		std::cout << "command command_list" << std::endl;
	}
|
	//empty
	{
		std::cout << "command_list -> empty" << std::endl;
	}
;

command:
	expression
	{
		std::cout << "expression" << std::endl;
	}
|
	assign
	{
		std::cout << "assign" << std::endl;
	}
|
	OPARENTHESIS command_list CPARENTHESIS
	{
		std::cout << "OPARENTHESIS command_list CPARENTHESIS" << std::endl;
	}
|
	OCURLY command_list CCURLY
	{
		std::cout << "OCURLY command_list CCURLY" << std::endl;
	}
|
	KEYWORD_FOR condition KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_FOR condition KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_FOR IDENTIFIER KEYWORD_IN expression KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_FOR IDENTIFIER KEYWORD_IN expression KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_FOR OPARENTHESIS assign COMMAND_SEPARATOR expression COMMAND_SEPARATOR expression CPARENTHESIS KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_FOR OPARENTHESIS assign COMMAND_SEPARATOR expression COMMAND_SEPARATOR expression CPARENTHESIS KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_WHILE condition KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_WHILE condition KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_UNTIL condition KEYWORD_DO command_list KEYWORD_DONE
	{
		std::cout << "KEYWORD_UNTIL condition KEYWORD_DO command_list KEYWORD_DONE" << std::endl;
	}
|
	KEYWORD_CASE expression KEYWORD_IN caseparts KEYWORD_ESAC
	{
		std::cout << "KEYWORD_CASE expression KEYWORD_IN caseparts KEYWORD_ESAC" << std::endl;
	}
|
	KEYWORD_IF condition KEYWORD_THEN command_list else_part KEYWORD_FI
	{
		std::cout << "KEYWORD_IF condition KEYWORD_THEN command_list else_part KEYWORD_FI" << std::endl;
	}
;

condition:
	expression
	{
		std::cout << "expression" << std::endl;
	}
|
	NEGATE expression
	{
		std::cout << "NEGATE expression" << std::endl;
	}
;

expression:
	expression OPERATOR_AND expression
	{
		std::cout << "expression OPERATOR_AND expression" << std::endl;
	}
|
	expression OPERATOR_OR expression
	{
		std::cout << "expression OPERATOR_OR expression" << std::endl;
	}
|
	expression OPERATOR_EQUAL expression
	{
		std::cout << "expression OPERATOR_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_NOT_EQUAL expression
	{
		std::cout << "expression OPERATOR_NOT_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_LESS_EQUAL expression
	{
		std::cout << "expression OPERATOR_LESS_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_GREATER_EQUAL expression
	{
		std::cout << "expression OPERATOR_GREATER_EQUAL expression" << std::endl;
	}
|
	expression OPERATOR_LESS_THAN expression
	{
		std::cout << "expression OPERATOR_LESS_THAN expression" << std::endl;
	}
|
	expression OPERATOR_GREATER_THAN expression
	{
		std::cout << "expression OPERATOR_GREATER_THAN expression" << std::endl;
	}
|
	expression OPERATOR_PLUS expression
	{
		std::cout << "expression OPERATOR_PLUS expression" << std::endl;
	}
|
	expression OPERATOR_MINUS expression
	{
		std::cout << "expression OPERATOR_MINUS expression" << std::endl;
	}
|
	expression OPERATOR_MULTIPLICATION expression
	{
		std::cout << "expression OPERATOR_MULTIPLICATION expression" << std::endl;
	}
|
	expression OPERATOR_DIVISION expression
	{
		std::cout << "expression OPERATOR_DIVISION expression" << std::endl;
	}
|
	expression OPERATOR_MODULO expression
	{
		std::cout << "expression OPERATOR_MODULO expression" << std::endl;
	}
|
	expression OPERATOR_POWER expression
	{
		std::cout << "expression OPERATOR_POWER expression" << std::endl;
	}
|
	INTEGER
	{
		std::cout << "INTEGER" << std::endl;
	}
|
	FLOAT
	{
		std::cout << "FLOAT" << std::endl;
	}
|
	SINGLEQUOTE
	{
		std::cout << "SINGLEQUOTE" << std::endl;
	}
|
	DOUBLEQUOTE
	{
		std::cout << "DOUBLEQUOTE" << std::endl;
	}
|
	input_output
	{
		std::cout << "input_output" << std::endl;
	}
|
	IDENTIFIER
	{
		std::cout << "IDENTIFIER" << std::endl;
	}
;


input_output:
	OUTPUT_CREATION IDENTIFIER
	{
		std::cout << "OUTPUT_CREATION IDENTIFIER" << std::endl;
	}
|
	INPUT_REDIRECTION IDENTIFIER
	{
		std::cout << "INPUT_REDIRECTION IDENTIFIER" << std::endl;
	}
|
	INPUT_FROM_A_HERE_DOCUMENT IDENTIFIER
	{
		std::cout << "INPUT_FROM_A_HERE_DOCUMENT IDENTIFIER" << std::endl;
	}
|
	OUTPUT_APPEND IDENTIFIER
	{
		std::cout << "OUTPUT_APPEND IDENTIFIER" << std::endl;
	}
;

	
	
assign:
	IDENTIFIER OPERATOR_LET_BE expression
	{
		std::cout << "IDENTIFIER OPERATOR_LET_BE expression" << std::endl;
	}
;
	
caseparts:
	case_part caseparts2
	{
		std::cout << "case_part caseparts2" << std::endl;
	}
;

caseparts2:
	case_part caseparts2
	{
		std::cout << "case_part caseparts2" << std::endl;
	}
|
	//empty
	{
		std::cout << "caseparts2->empty" << std::endl;
	}
;

case_part:
	pattern CCURLY command_list CASE_DELIMITER
	{
		std::cout << "pattern CCURLY command_list CASE_DELIMITER" << std::endl;
	}
;

else_part:
	KEYWORD_ELIF condition KEYWORD_THEN command_list else_part
	{
		std::cout << "KEYWORD_ELIF condition KEYWORD_THEN command_list else_part" << std::endl;
	}
|
	KEYWORD_ELSE command_list
	{
		std::cout << "KEYWORD_ELSE command_list" << std::endl;
	}
|
	//empty
	{
		std::cout << "else_part -> empty" << std::endl;
	}
;

pattern:
	IDENTIFIER
	{
		std::cout << "IDENTIFIER" << std::endl;
	}
|
	pattern PIPE_SYMBOL IDENTIFIER
	{
		std::cout << "pattern PIPE_SYMBOL IDENTIFIER" << std::endl;
	}
;
	