// Generated by Bisonc++ V6.00.00 on Wed, 16 May 2018 17:56:44 +0200

// base/comment

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved__::UNDETERMINED__, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok__
// which is applied. In this errTok__ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved__
    {
        UNDETERMINED__   = -2,
        EOF__            = -1,
        errTok__         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    enum StateTransition
    {
        ACCEPT__   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {319, 2}, // 1: start ->  command_list end
     {319, 1}, // 2: start ->  end
     {320, 1}, // 3: end (EXIT_CALL) ->  EXIT_CALL
     {321, 3}, // 4: command_list (COMMAND_SEPARATOR) ->  command_list command COMMAND_SEPARATOR
     {321, 2}, // 5: command_list (COMMAND_SEPARATOR) ->  command COMMAND_SEPARATOR
     {322, 1}, // 6: command ->  expression
     {322, 3}, // 7: command (OCURLY) ->  OCURLY command_list CCURLY
     {322, 5}, // 8: command (KEYWORD_FOR) ->  KEYWORD_FOR expression KEYWORD_DO command_list KEYWORD_DONE
     {322, 7}, // 9: command (KEYWORD_FOR) ->  KEYWORD_FOR IDENTIFIER KEYWORD_IN expression_list KEYWORD_DO command_list KEYWORD_DONE
     {322, 9}, // 10: command (KEYWORD_FOR) ->  KEYWORD_FOR expression COMMAND_SEPARATOR expression COMMAND_SEPARATOR expression KEYWORD_DO command_list KEYWORD_DONE
     {322, 5}, // 11: command (KEYWORD_WHILE) ->  KEYWORD_WHILE expression KEYWORD_DO command_list KEYWORD_DONE
     {322, 5}, // 12: command (KEYWORD_UNTIL) ->  KEYWORD_UNTIL expression KEYWORD_DO command_list KEYWORD_DONE
     {322, 5}, // 13: command (KEYWORD_CASE) ->  KEYWORD_CASE expression KEYWORD_IN caseparts KEYWORD_ESAC
     {322, 6}, // 14: command (KEYWORD_IF) ->  KEYWORD_IF expression KEYWORD_THEN command_list else_part KEYWORD_FI
     {324, 3}, // 15: expression (OPARENTHESIS) ->  OPARENTHESIS expression CPARENTHESIS
     {324, 3}, // 16: expression (IDENTIFIER) ->  IDENTIFIER OPERATOR_LET_BE expression
     {324, 2}, // 17: expression (NEGATE) ->  NEGATE expression
     {324, 3}, // 18: expression (OPERATOR_AND) ->  expression OPERATOR_AND expression
     {324, 3}, // 19: expression (OPERATOR_OR) ->  expression OPERATOR_OR expression
     {324, 3}, // 20: expression (OPERATOR_EQUAL) ->  expression OPERATOR_EQUAL expression
     {324, 3}, // 21: expression (OPERATOR_NOT_EQUAL) ->  expression OPERATOR_NOT_EQUAL expression
     {324, 3}, // 22: expression (OPERATOR_LESS_EQUAL) ->  expression OPERATOR_LESS_EQUAL expression
     {324, 3}, // 23: expression (OPERATOR_GREATER_EQUAL) ->  expression OPERATOR_GREATER_EQUAL expression
     {324, 3}, // 24: expression (OPERATOR_LESS_THAN) ->  expression OPERATOR_LESS_THAN expression
     {324, 3}, // 25: expression (OPERATOR_GREATER_THAN) ->  expression OPERATOR_GREATER_THAN expression
     {324, 3}, // 26: expression (OPERATOR_PLUS) ->  expression OPERATOR_PLUS expression
     {324, 3}, // 27: expression (OPERATOR_MINUS) ->  expression OPERATOR_MINUS expression
     {324, 3}, // 28: expression (OPERATOR_MULTIPLICATION) ->  expression OPERATOR_MULTIPLICATION expression
     {324, 3}, // 29: expression (OPERATOR_DIVISION) ->  expression OPERATOR_DIVISION expression
     {324, 3}, // 30: expression (OPERATOR_MODULO) ->  expression OPERATOR_MODULO expression
     {324, 3}, // 31: expression (OPERATOR_POWER) ->  expression OPERATOR_POWER expression
     {324, 2}, // 32: expression (UNARY_MINUS) ->  OPERATOR_MINUS expression
     {324, 1}, // 33: expression (INTEGER) ->  INTEGER
     {324, 1}, // 34: expression (DOUBLE) ->  DOUBLE
     {324, 1}, // 35: expression (SINGLEQUOTE) ->  SINGLEQUOTE
     {324, 1}, // 36: expression (DOUBLEQUOTE) ->  DOUBLEQUOTE
     {324, 1}, // 37: expression (HEXADECIMAL) ->  HEXADECIMAL
     {324, 1}, // 38: expression ->  input_output
     {324, 1}, // 39: expression (IDENTIFIER) ->  IDENTIFIER
     {324, 1}, // 40: expression (CONST_TRUE) ->  CONST_TRUE
     {324, 1}, // 41: expression (CONST_FALSE) ->  CONST_FALSE
     {324, 1}, // 42: expression (CONST_PI) ->  CONST_PI
     {325, 2}, // 43: input_output (OUTPUT_CREATION) ->  OUTPUT_CREATION IDENTIFIER
     {325, 2}, // 44: input_output (INPUT_REDIRECTION) ->  INPUT_REDIRECTION IDENTIFIER
     {325, 2}, // 45: input_output (INPUT_FROM_A_HERE_DOCUMENT) ->  INPUT_FROM_A_HERE_DOCUMENT IDENTIFIER
     {325, 2}, // 46: input_output (OUTPUT_APPEND) ->  OUTPUT_APPEND IDENTIFIER
     {323, 2}, // 47: caseparts ->  case_part caseparts2
     {327, 2}, // 48: caseparts2 ->  case_part caseparts2
     {327, 0}, // 49: caseparts2 ->  <empty>
     {326, 4}, // 50: case_part (CPARENTHESIS) ->  pattern CPARENTHESIS command_list CASE_DELIMITER
     {329, 2}, // 51: else_part (KEYWORD_ELSE) ->  KEYWORD_ELSE command_list
     {329, 0}, // 52: else_part ->  <empty>
     {328, 1}, // 53: pattern (IDENTIFIER) ->  IDENTIFIER
     {328, 3}, // 54: pattern (PIPE_SYMBOL) ->  pattern PIPE_SYMBOL IDENTIFIER
     {330, 3}, // 55: expression_list (ELEMENT_SEPARATOR) ->  expression_list ELEMENT_SEPARATOR expression
     {330, 1}, // 56: expression_list ->  expression
     {331, 1}, // 57: start_$ ->  start
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 30} },                              
    { {       319}, {  1} }, // start                     
    { {       321}, {  2} }, // command_list              
    { {       320}, {  3} }, // end                       
    { {       322}, {  4} }, // command                   
    { {       295}, {  5} }, // EXIT_CALL                 
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {        2} }, 
    { {     EOF__}, { ACCEPT__} }, 
    { {         0}, {        0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, { 28} },                              
    { {       320}, { 30} }, // end                       
    { {       322}, { 31} }, // command                   
    { {       295}, {  5} }, // EXIT_CALL                 
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, {  2} },                     
    { {       275}, { 32} }, // COMMAND_SEPARATOR
    { {         0}, {  0} },                     
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_6[] =
{
    { { REQ_DEF}, { 15} },                           
    { {     297}, { 33} }, // OPERATOR_AND           
    { {     298}, { 34} }, // OPERATOR_OR            
    { {     299}, { 35} }, // OPERATOR_EQUAL         
    { {     304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {     303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {     302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {     301}, { 39} }, // OPERATOR_LESS_THAN     
    { {     300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {     305}, { 41} }, // OPERATOR_PLUS          
    { {     306}, { 42} }, // OPERATOR_MINUS         
    { {     307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {     308}, { 44} }, // OPERATOR_DIVISION      
    { {     309}, { 45} }, // OPERATOR_MODULO        
    { {     310}, { 46} }, // OPERATOR_POWER         
    { {       0}, { -6} },                           
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, { 27} },                              
    { {       321}, { 47} }, // command_list              
    { {       322}, {  4} }, // command                   
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 48} }, // expression                
    { {       289}, { 49} }, // IDENTIFIER                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 50} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 51} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 52} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 53} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 54} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_14[] =
{
    { { REQ_DEF}, {   2} },                   
    { {     296}, {  55} }, // OPERATOR_LET_BE
    { {       0}, { -39} },                   
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 56} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 57} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       289}, { 58} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       289}, { 59} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       289}, { 60} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       289}, { 61} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_30[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },                     
    { {       275}, { 62} }, // COMMAND_SEPARATOR
    { {         0}, {  0} },                     
};

SR__ s_32[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 63} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 64} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 65} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 66} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 67} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 68} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 69} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 70} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 71} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 72} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 73} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 74} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 75} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 76} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 27} },                              
    { {       271}, { 77} }, // CCURLY                    
    { {       322}, { 31} }, // command                   
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, { 17} },                           
    { {       268}, { 78} }, // KEYWORD_DO             
    { {       275}, { 79} }, // COMMAND_SEPARATOR      
    { {       297}, { 33} }, // OPERATOR_AND           
    { {       298}, { 34} }, // OPERATOR_OR            
    { {       299}, { 35} }, // OPERATOR_EQUAL         
    { {       304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, { 39} }, // OPERATOR_LESS_THAN     
    { {       300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {       305}, { 41} }, // OPERATOR_PLUS          
    { {       306}, { 42} }, // OPERATOR_MINUS         
    { {       307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {       308}, { 44} }, // OPERATOR_DIVISION      
    { {       309}, { 45} }, // OPERATOR_MODULO        
    { {       310}, { 46} }, // OPERATOR_POWER         
    { {         0}, {  0} },                           
};

SR__ s_49[] =
{
    { { REQ_DEF}, {   3} },                   
    { {     263}, {  80} }, // KEYWORD_IN     
    { {     296}, {  55} }, // OPERATOR_LET_BE
    { {       0}, { -39} },                   
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, { 16} },                           
    { {       268}, { 81} }, // KEYWORD_DO             
    { {       297}, { 33} }, // OPERATOR_AND           
    { {       298}, { 34} }, // OPERATOR_OR            
    { {       299}, { 35} }, // OPERATOR_EQUAL         
    { {       304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, { 39} }, // OPERATOR_LESS_THAN     
    { {       300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {       305}, { 41} }, // OPERATOR_PLUS          
    { {       306}, { 42} }, // OPERATOR_MINUS         
    { {       307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {       308}, { 44} }, // OPERATOR_DIVISION      
    { {       309}, { 45} }, // OPERATOR_MODULO        
    { {       310}, { 46} }, // OPERATOR_POWER         
    { {         0}, {  0} },                           
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, { 16} },                           
    { {       268}, { 82} }, // KEYWORD_DO             
    { {       297}, { 33} }, // OPERATOR_AND           
    { {       298}, { 34} }, // OPERATOR_OR            
    { {       299}, { 35} }, // OPERATOR_EQUAL         
    { {       304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, { 39} }, // OPERATOR_LESS_THAN     
    { {       300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {       305}, { 41} }, // OPERATOR_PLUS          
    { {       306}, { 42} }, // OPERATOR_MINUS         
    { {       307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {       308}, { 44} }, // OPERATOR_DIVISION      
    { {       309}, { 45} }, // OPERATOR_MODULO        
    { {       310}, { 46} }, // OPERATOR_POWER         
    { {         0}, {  0} },                           
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 16} },                           
    { {       263}, { 83} }, // KEYWORD_IN             
    { {       297}, { 33} }, // OPERATOR_AND           
    { {       298}, { 34} }, // OPERATOR_OR            
    { {       299}, { 35} }, // OPERATOR_EQUAL         
    { {       304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, { 39} }, // OPERATOR_LESS_THAN     
    { {       300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {       305}, { 41} }, // OPERATOR_PLUS          
    { {       306}, { 42} }, // OPERATOR_MINUS         
    { {       307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {       308}, { 44} }, // OPERATOR_DIVISION      
    { {       309}, { 45} }, // OPERATOR_MODULO        
    { {       310}, { 46} }, // OPERATOR_POWER         
    { {         0}, {  0} },                           
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 16} },                           
    { {       258}, { 84} }, // KEYWORD_THEN           
    { {       297}, { 33} }, // OPERATOR_AND           
    { {       298}, { 34} }, // OPERATOR_OR            
    { {       299}, { 35} }, // OPERATOR_EQUAL         
    { {       304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, { 39} }, // OPERATOR_LESS_THAN     
    { {       300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {       305}, { 41} }, // OPERATOR_PLUS          
    { {       306}, { 42} }, // OPERATOR_MINUS         
    { {       307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {       308}, { 44} }, // OPERATOR_DIVISION      
    { {       309}, { 45} }, // OPERATOR_MODULO        
    { {       310}, { 46} }, // OPERATOR_POWER         
    { {         0}, {  0} },                           
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 16} },                           
    { {       280}, { 85} }, // CPARENTHESIS           
    { {       297}, { 33} }, // OPERATOR_AND           
    { {       298}, { 34} }, // OPERATOR_OR            
    { {       299}, { 35} }, // OPERATOR_EQUAL         
    { {       304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, { 39} }, // OPERATOR_LESS_THAN     
    { {       300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {       305}, { 41} }, // OPERATOR_PLUS          
    { {       306}, { 42} }, // OPERATOR_MINUS         
    { {       307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {       308}, { 44} }, // OPERATOR_DIVISION      
    { {       309}, { 45} }, // OPERATOR_MODULO        
    { {       310}, { 46} }, // OPERATOR_POWER         
    { {         0}, {  0} },                           
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 86} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_56[] =
{
    { { REQ_DEF}, {  15} },                           
    { {     297}, {  33} }, // OPERATOR_AND           
    { {     298}, {  34} }, // OPERATOR_OR            
    { {     299}, {  35} }, // OPERATOR_EQUAL         
    { {     304}, {  36} }, // OPERATOR_NOT_EQUAL     
    { {     303}, {  37} }, // OPERATOR_LESS_EQUAL    
    { {     302}, {  38} }, // OPERATOR_GREATER_EQUAL 
    { {     301}, {  39} }, // OPERATOR_LESS_THAN     
    { {     300}, {  40} }, // OPERATOR_GREATER_THAN  
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -17} },                           
};

SR__ s_57[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_63[] =
{
    { { REQ_DEF}, {  13} },                           
    { {     299}, {  35} }, // OPERATOR_EQUAL         
    { {     304}, {  36} }, // OPERATOR_NOT_EQUAL     
    { {     303}, {  37} }, // OPERATOR_LESS_EQUAL    
    { {     302}, {  38} }, // OPERATOR_GREATER_EQUAL 
    { {     301}, {  39} }, // OPERATOR_LESS_THAN     
    { {     300}, {  40} }, // OPERATOR_GREATER_THAN  
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -18} },                           
};

SR__ s_64[] =
{
    { { REQ_DEF}, {  13} },                           
    { {     299}, {  35} }, // OPERATOR_EQUAL         
    { {     304}, {  36} }, // OPERATOR_NOT_EQUAL     
    { {     303}, {  37} }, // OPERATOR_LESS_EQUAL    
    { {     302}, {  38} }, // OPERATOR_GREATER_EQUAL 
    { {     301}, {  39} }, // OPERATOR_LESS_THAN     
    { {     300}, {  40} }, // OPERATOR_GREATER_THAN  
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -19} },                           
};

SR__ s_65[] =
{
    { { REQ_DEF}, {   7} },                           
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -20} },                           
};

SR__ s_66[] =
{
    { { REQ_DEF}, {   7} },                           
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -21} },                           
};

SR__ s_67[] =
{
    { { REQ_DEF}, {   7} },                           
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -22} },                           
};

SR__ s_68[] =
{
    { { REQ_DEF}, {   7} },                           
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -23} },                           
};

SR__ s_69[] =
{
    { { REQ_DEF}, {   7} },                           
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -24} },                           
};

SR__ s_70[] =
{
    { { REQ_DEF}, {   7} },                           
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -25} },                           
};

SR__ s_71[] =
{
    { { REQ_DEF}, {   5} },                           
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -26} },                           
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   5} },                           
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -27} },                           
};

SR__ s_73[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     310}, {  46} }, // OPERATOR_POWER
    { {       0}, { -28} },                  
};

SR__ s_74[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     310}, {  46} }, // OPERATOR_POWER
    { {       0}, { -29} },                  
};

SR__ s_75[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     310}, {  46} }, // OPERATOR_POWER
    { {       0}, { -30} },                  
};

SR__ s_76[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, { 27} },                              
    { {       321}, { 87} }, // command_list              
    { {       322}, {  4} }, // command                   
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, { 19} },                              
    { {       324}, { 88} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, { 20} },                              
    { {       330}, { 89} }, // expression_list           
    { {       324}, { 90} }, // expression                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, { 27} },                              
    { {       321}, { 91} }, // command_list              
    { {       322}, {  4} }, // command                   
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, { 27} },                              
    { {       321}, { 92} }, // command_list              
    { {       322}, {  4} }, // command                   
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       323}, { 93} }, // caseparts 
    { {       326}, { 94} }, // case_part 
    { {       328}, { 95} }, // pattern   
    { {       289}, { 96} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, { 27} },                              
    { {       321}, { 97} }, // command_list              
    { {       322}, {  4} }, // command                   
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_86[] =
{
    { { REQ_DEF}, {  15} },                           
    { {     297}, {  33} }, // OPERATOR_AND           
    { {     298}, {  34} }, // OPERATOR_OR            
    { {     299}, {  35} }, // OPERATOR_EQUAL         
    { {     304}, {  36} }, // OPERATOR_NOT_EQUAL     
    { {     303}, {  37} }, // OPERATOR_LESS_EQUAL    
    { {     302}, {  38} }, // OPERATOR_GREATER_EQUAL 
    { {     301}, {  39} }, // OPERATOR_LESS_THAN     
    { {     300}, {  40} }, // OPERATOR_GREATER_THAN  
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -16} },                           
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, { 27} },                              
    { {       269}, { 98} }, // KEYWORD_DONE              
    { {       322}, { 31} }, // command                   
    { {       324}, {  6} }, // expression                
    { {       270}, {  7} }, // OCURLY                    
    { {       265}, {  8} }, // KEYWORD_FOR               
    { {       266}, {  9} }, // KEYWORD_WHILE             
    { {       267}, { 10} }, // KEYWORD_UNTIL             
    { {       262}, { 11} }, // KEYWORD_CASE              
    { {       257}, { 12} }, // KEYWORD_IF                
    { {       279}, { 13} }, // OPARENTHESIS              
    { {       289}, { 14} }, // IDENTIFIER                
    { {       290}, { 15} }, // NEGATE                    
    { {       306}, { 16} }, // OPERATOR_MINUS            
    { {       288}, { 17} }, // INTEGER                   
    { {       287}, { 18} }, // DOUBLE                    
    { {       285}, { 19} }, // SINGLEQUOTE               
    { {       286}, { 20} }, // DOUBLEQUOTE               
    { {       291}, { 21} }, // HEXADECIMAL               
    { {       325}, { 22} }, // input_output              
    { {       292}, { 23} }, // CONST_TRUE                
    { {       293}, { 24} }, // CONST_FALSE               
    { {       294}, { 25} }, // CONST_PI                  
    { {       283}, { 26} }, // OUTPUT_CREATION           
    { {       281}, { 27} }, // INPUT_REDIRECTION         
    { {       282}, { 28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, { 29} }, // OUTPUT_APPEND             
    { {         0}, {  0} },                              
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, { 16} },                           
    { {       275}, { 99} }, // COMMAND_SEPARATOR      
    { {       297}, { 33} }, // OPERATOR_AND           
    { {       298}, { 34} }, // OPERATOR_OR            
    { {       299}, { 35} }, // OPERATOR_EQUAL         
    { {       304}, { 36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, { 37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, { 38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, { 39} }, // OPERATOR_LESS_THAN     
    { {       300}, { 40} }, // OPERATOR_GREATER_THAN  
    { {       305}, { 41} }, // OPERATOR_PLUS          
    { {       306}, { 42} }, // OPERATOR_MINUS         
    { {       307}, { 43} }, // OPERATOR_MULTIPLICATION
    { {       308}, { 44} }, // OPERATOR_DIVISION      
    { {       309}, { 45} }, // OPERATOR_MODULO        
    { {       310}, { 46} }, // OPERATOR_POWER         
    { {         0}, {  0} },                           
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {   3} },                     
    { {       268}, { 100} }, // KEYWORD_DO       
    { {       276}, { 101} }, // ELEMENT_SEPARATOR
    { {         0}, {   0} },                     
};

SR__ s_90[] =
{
    { { REQ_DEF}, {  15} },                           
    { {     297}, {  33} }, // OPERATOR_AND           
    { {     298}, {  34} }, // OPERATOR_OR            
    { {     299}, {  35} }, // OPERATOR_EQUAL         
    { {     304}, {  36} }, // OPERATOR_NOT_EQUAL     
    { {     303}, {  37} }, // OPERATOR_LESS_EQUAL    
    { {     302}, {  38} }, // OPERATOR_GREATER_EQUAL 
    { {     301}, {  39} }, // OPERATOR_LESS_THAN     
    { {     300}, {  40} }, // OPERATOR_GREATER_THAN  
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -56} },                           
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       269}, { 102} }, // KEYWORD_DONE              
    { {       322}, {  31} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       269}, { 103} }, // KEYWORD_DONE              
    { {       322}, {  31} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {   2} },                
    { {       264}, { 104} }, // KEYWORD_ESAC
    { {         0}, {   0} },                
};

SR__ s_94[] =
{
    { { REQ_DEF}, {   5} },              
    { {     327}, { 105} }, // caseparts2
    { {     326}, { 106} }, // case_part 
    { {     328}, {  95} }, // pattern   
    { {     289}, {  96} }, // IDENTIFIER
    { {       0}, { -49} },              
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {   3} },                
    { {       280}, { 107} }, // CPARENTHESIS
    { {       272}, { 108} }, // PIPE_SYMBOL 
    { {         0}, {   0} },                
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_97[] =
{
    { { REQ_DEF}, {  28} },                              
    { {     329}, { 109} }, // else_part                 
    { {     322}, {  31} }, // command                   
    { {     259}, { 110} }, // KEYWORD_ELSE              
    { {     324}, {   6} }, // expression                
    { {     270}, {   7} }, // OCURLY                    
    { {     265}, {   8} }, // KEYWORD_FOR               
    { {     266}, {   9} }, // KEYWORD_WHILE             
    { {     267}, {  10} }, // KEYWORD_UNTIL             
    { {     262}, {  11} }, // KEYWORD_CASE              
    { {     257}, {  12} }, // KEYWORD_IF                
    { {     279}, {  13} }, // OPARENTHESIS              
    { {     289}, {  14} }, // IDENTIFIER                
    { {     290}, {  15} }, // NEGATE                    
    { {     306}, {  16} }, // OPERATOR_MINUS            
    { {     288}, {  17} }, // INTEGER                   
    { {     287}, {  18} }, // DOUBLE                    
    { {     285}, {  19} }, // SINGLEQUOTE               
    { {     286}, {  20} }, // DOUBLEQUOTE               
    { {     291}, {  21} }, // HEXADECIMAL               
    { {     325}, {  22} }, // input_output              
    { {     292}, {  23} }, // CONST_TRUE                
    { {     293}, {  24} }, // CONST_FALSE               
    { {     294}, {  25} }, // CONST_PI                  
    { {     283}, {  26} }, // OUTPUT_CREATION           
    { {     281}, {  27} }, // INPUT_REDIRECTION         
    { {     282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {     284}, {  29} }, // OUTPUT_APPEND             
    { {       0}, { -52} },                              
};

SR__ s_98[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  19} },                              
    { {       324}, { 111} }, // expression                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       321}, { 112} }, // command_list              
    { {       322}, {   4} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {  19} },                              
    { {       324}, { 113} }, // expression                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_106[] =
{
    { { REQ_DEF}, {   5} },              
    { {     327}, { 114} }, // caseparts2
    { {     326}, { 106} }, // case_part 
    { {     328}, {  95} }, // pattern   
    { {     289}, {  96} }, // IDENTIFIER
    { {       0}, { -49} },              
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       321}, { 115} }, // command_list              
    { {       322}, {   4} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       289}, { 116} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       261}, { 117} }, // KEYWORD_FI
    { {         0}, {   0} },              
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       321}, { 118} }, // command_list              
    { {       322}, {   4} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_111[] =
{
    { { REQ_TOKEN}, {  16} },                           
    { {       268}, { 119} }, // KEYWORD_DO             
    { {       297}, {  33} }, // OPERATOR_AND           
    { {       298}, {  34} }, // OPERATOR_OR            
    { {       299}, {  35} }, // OPERATOR_EQUAL         
    { {       304}, {  36} }, // OPERATOR_NOT_EQUAL     
    { {       303}, {  37} }, // OPERATOR_LESS_EQUAL    
    { {       302}, {  38} }, // OPERATOR_GREATER_EQUAL 
    { {       301}, {  39} }, // OPERATOR_LESS_THAN     
    { {       300}, {  40} }, // OPERATOR_GREATER_THAN  
    { {       305}, {  41} }, // OPERATOR_PLUS          
    { {       306}, {  42} }, // OPERATOR_MINUS         
    { {       307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {       308}, {  44} }, // OPERATOR_DIVISION      
    { {       309}, {  45} }, // OPERATOR_MODULO        
    { {       310}, {  46} }, // OPERATOR_POWER         
    { {         0}, {   0} },                           
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       269}, { 120} }, // KEYWORD_DONE              
    { {       322}, {  31} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_113[] =
{
    { { REQ_DEF}, {  15} },                           
    { {     297}, {  33} }, // OPERATOR_AND           
    { {     298}, {  34} }, // OPERATOR_OR            
    { {     299}, {  35} }, // OPERATOR_EQUAL         
    { {     304}, {  36} }, // OPERATOR_NOT_EQUAL     
    { {     303}, {  37} }, // OPERATOR_LESS_EQUAL    
    { {     302}, {  38} }, // OPERATOR_GREATER_EQUAL 
    { {     301}, {  39} }, // OPERATOR_LESS_THAN     
    { {     300}, {  40} }, // OPERATOR_GREATER_THAN  
    { {     305}, {  41} }, // OPERATOR_PLUS          
    { {     306}, {  42} }, // OPERATOR_MINUS         
    { {     307}, {  43} }, // OPERATOR_MULTIPLICATION
    { {     308}, {  44} }, // OPERATOR_DIVISION      
    { {     309}, {  45} }, // OPERATOR_MODULO        
    { {     310}, {  46} }, // OPERATOR_POWER         
    { {       0}, { -55} },                           
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       277}, { 121} }, // CASE_DELIMITER            
    { {       322}, {  31} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_118[] =
{
    { { REQ_DEF}, {  26} },                              
    { {     322}, {  31} }, // command                   
    { {     324}, {   6} }, // expression                
    { {     270}, {   7} }, // OCURLY                    
    { {     265}, {   8} }, // KEYWORD_FOR               
    { {     266}, {   9} }, // KEYWORD_WHILE             
    { {     267}, {  10} }, // KEYWORD_UNTIL             
    { {     262}, {  11} }, // KEYWORD_CASE              
    { {     257}, {  12} }, // KEYWORD_IF                
    { {     279}, {  13} }, // OPARENTHESIS              
    { {     289}, {  14} }, // IDENTIFIER                
    { {     290}, {  15} }, // NEGATE                    
    { {     306}, {  16} }, // OPERATOR_MINUS            
    { {     288}, {  17} }, // INTEGER                   
    { {     287}, {  18} }, // DOUBLE                    
    { {     285}, {  19} }, // SINGLEQUOTE               
    { {     286}, {  20} }, // DOUBLEQUOTE               
    { {     291}, {  21} }, // HEXADECIMAL               
    { {     325}, {  22} }, // input_output              
    { {     292}, {  23} }, // CONST_TRUE                
    { {     293}, {  24} }, // CONST_FALSE               
    { {     294}, {  25} }, // CONST_PI                  
    { {     283}, {  26} }, // OUTPUT_CREATION           
    { {     281}, {  27} }, // INPUT_REDIRECTION         
    { {     282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {     284}, {  29} }, // OUTPUT_APPEND             
    { {       0}, { -51} },                              
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       321}, { 122} }, // command_list              
    { {       322}, {   4} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_120[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {  27} },                              
    { {       269}, { 123} }, // KEYWORD_DONE              
    { {       322}, {  31} }, // command                   
    { {       324}, {   6} }, // expression                
    { {       270}, {   7} }, // OCURLY                    
    { {       265}, {   8} }, // KEYWORD_FOR               
    { {       266}, {   9} }, // KEYWORD_WHILE             
    { {       267}, {  10} }, // KEYWORD_UNTIL             
    { {       262}, {  11} }, // KEYWORD_CASE              
    { {       257}, {  12} }, // KEYWORD_IF                
    { {       279}, {  13} }, // OPARENTHESIS              
    { {       289}, {  14} }, // IDENTIFIER                
    { {       290}, {  15} }, // NEGATE                    
    { {       306}, {  16} }, // OPERATOR_MINUS            
    { {       288}, {  17} }, // INTEGER                   
    { {       287}, {  18} }, // DOUBLE                    
    { {       285}, {  19} }, // SINGLEQUOTE               
    { {       286}, {  20} }, // DOUBLEQUOTE               
    { {       291}, {  21} }, // HEXADECIMAL               
    { {       325}, {  22} }, // input_output              
    { {       292}, {  23} }, // CONST_TRUE                
    { {       293}, {  24} }, // CONST_FALSE               
    { {       294}, {  25} }, // CONST_PI                  
    { {       283}, {  26} }, // OUTPUT_CREATION           
    { {       281}, {  27} }, // INPUT_REDIRECTION         
    { {       282}, {  28} }, // INPUT_FROM_A_HERE_DOCUMENT
    { {       284}, {  29} }, // OUTPUT_APPEND             
    { {         0}, {   0} },                              
};

SR__ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved__::UNDETERMINED__),
    // $insert baseclasscode
    d_requiredTokens__(0)
{
}

// base/clearin
void ParserBase::clearin__()
{
    d_nErrors__ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    // $insert LTYPEclear
    d_locationStack.clear();
    d_token = Reserved__::UNDETERMINED__;
    d_next = TokenPair{ Reserved__::UNDETERMINED__, STYPE__{} };
    d_recovery = false;
    d_acceptedTokens__ = d_requiredTokens__;
    d_val__ = STYPE__{};

    push__(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

// base/lex
void ParserBase::lex__(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved__::EOF__;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup__() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR__ const *sr = s_state[d_state];
    SR__ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

    // $insert LTYPEpop
    d_lsp = &d_locationStack[d_stackIdx];
}

// base/poptoken
void ParserBase::popToken__()
{
    d_token = d_next.first;
    d_val__ = std::move(d_next.second);

    d_next.first = Reserved__::UNDETERMINED__;
}

// base/push
void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize__() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack.resize(newSize);
        // $insert LTYPEresize
        d_locationStack.resize(newSize);
    }

    ++d_stackIdx;
    // $insert LTYPEpush
    *(d_lsp = &d_locationStack[d_stackIdx]) = d_loc__;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val__) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken__(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val__) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken__()
{
    if (d_token != Reserved__::UNDETERMINED__)
        pushToken__(d_token);
}

// base/reduce
void ParserBase::reduce__(int rule)
{
    PI__ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop__(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift__(int action)
{
    push__(action);
    popToken__();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens__ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery__()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken__(Reserved__::errTok__);      // specify errTok__ as next token
    push__(lookup__());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top__() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery__()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle__ for details.

    startRecovery__();
}

// derived/executeaction
void Parser::executeAction__(int production)
try
{
    if (token__() != Reserved__::UNDETERMINED__)
        pushToken__(token__());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 82 "grammar"
        {
         d_val__.cld = new command_list_desc(vs__(-1).cld);
         d_val__.cld->evaluate();
         journal(journal::info, "parser") << "start -> command_list end" << journal::end;
         }
        break;

        case 2:
#line 89 "grammar"
        {
         journal(journal::info, "parser") << "start -> end" << journal::end;
         }
        break;

        case 3:
#line 96 "grammar"
        {
         std::cout << "Exit call" << std::endl;
         journal(journal::info, "parser") << "Exit call" << journal::end;
         }
        break;

        case 4:
#line 104 "grammar"
        { 
         d_val__.cld = new command_list_desc();
         d_val__.cld->add(vs__(-2).cld);
         d_val__.cld->add(vs__(-1).cd);
         delete vs__(-2).cld;
         journal(journal::info, "parser") << "command_list command COMMAND_SEPARATOR" << journal::end;
         }
        break;

        case 5:
#line 113 "grammar"
        {
         
         d_val__.cld = new command_list_desc();
         d_val__.cld->add(vs__(-1).cd);
         journal(journal::info, "parser") << "command_list -> command COMMAND_SEPARATOR" << journal::end;
         }
        break;

        case 6:
#line 123 "grammar"
        {
         
         
         
         
         
         d_val__.cd = new command_expr(vs__(0).exd);
         journal(journal::info, "parser") << "command -> expression" << journal::end;
         }
        break;

        case 7:
#line 134 "grammar"
        {
         journal(journal::info, "parser") << "command -> OCURLY command_list CCURLY" << journal::end;
         }
        break;

        case 8:
#line 139 "grammar"
        {
         
        
         journal(journal::info, "parser") << "command -> KEYWORD_FOR expression KEYWORD_DO command_list KEYWORD_DONE" << journal::end;
         }
        break;

        case 9:
#line 153 "grammar"
        {
         d_val__.cd = new for_in_desc(d_loc__.first_line, vs__(-5).str, vs__(-3).cel, vs__(-1).cld);
         journal(journal::info, "parser") << "KEYWORD_FOR IDENTIFIER KEYWORD_IN expression_list KEYWORD_DO command_list KEYWORD_DONE" << journal::end;
         }
        break;

        case 10:
#line 159 "grammar"
        {
         d_val__.cd = new for_3_desc(d_loc__.first_line, vs__(-7).exd, vs__(-5).exd, vs__(-3).exd, vs__(-1).cld);
         journal(journal::info, "parser") << "command -> KEYWORD_FOR expression COMMAND_SEPARATOR expression COMMAND_SEPARATOR expression KEYWORD_DO command_list KEYWORD_DONE" << journal::end;
         }
        break;

        case 11:
#line 165 "grammar"
        {
         d_val__.cd = new while_desc(d_loc__.first_line, vs__(-3).exd, vs__(-1).cld);
         journal(journal::info, "parser") << "command -> KEYWORD_WHILE expression KEYWORD_DO command_list KEYWORD_DONE" << journal::end;
         }
        break;

        case 12:
#line 171 "grammar"
        {
         d_val__.cd = new until_desc(d_loc__.first_line, vs__(-3).exd, vs__(-1).cld);
         journal(journal::info, "parser") << "command -> KEYWORD_UNTIL expression KEYWORD_DO command_list KEYWORD_DONE" << journal::end;
         }
        break;

        case 13:
#line 177 "grammar"
        {
         journal(journal::info, "parser") << "command -> KEYWORD_CASE expression KEYWORD_IN caseparts KEYWORD_ESAC" << journal::end;
         }
        break;

        case 14:
#line 182 "grammar"
        {
         d_val__.cd = new if_desc(d_loc__.first_line, vs__(-4).exd, vs__(-2).cld, vs__(-1).cld);
         journal(journal::info, "parser") << "command -> KEYWORD_IF expression KEYWORD_THEN command_list else_part KEYWORD_FI" << journal::end;
         }
        break;

        case 15:
#line 191 "grammar"
        {
         d_val__.exd = new expr_par(d_loc__.first_line, vs__(-1).exd);
         journal(journal::info, "parser") << "expression -> OPARENTHESIS expression CPARENTHESIS" << journal::end;
         }
        break;

        case 16:
#line 197 "grammar"
        {
         d_val__.exd = new expr_asg(d_loc__.first_line, vs__(-2).str, vs__(0).exd);
         journal(journal::info, "parser") << "expression -> IDENTIFIER OPERATOR_LET_BE expression" << journal::end;
         }
        break;

        case 17:
#line 203 "grammar"
        {
         d_val__.exd = new expr_neg(d_loc__.first_line, vs__(0).exd);
         journal(journal::info, "parser") << "expression -> NEGATE expression" << journal::end;
         }
        break;

        case 18:
#line 209 "grammar"
        {
         d_val__.exd = new expr_and(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_AND expression" << journal::end;
         }
        break;

        case 19:
#line 215 "grammar"
        {
         d_val__.exd = new expr_or(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_OR expression" << journal::end;
         }
        break;

        case 20:
#line 221 "grammar"
        {
         d_val__.exd = new expr_eq(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_EQUAL expression" << journal::end;
         }
        break;

        case 21:
#line 227 "grammar"
        {
         d_val__.exd = new expr_neq(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_NOT_EQUAL expression" << journal::end;
         }
        break;

        case 22:
#line 233 "grammar"
        {
         d_val__.exd = new expr_leq(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_LESS_EQUAL expression" << journal::end;
         }
        break;

        case 23:
#line 239 "grammar"
        {
         d_val__.exd = new expr_geq(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_GREATER_EQUAL expression" << journal::end;
         }
        break;

        case 24:
#line 245 "grammar"
        {
         d_val__.exd = new expr_lt(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_LESS_THAN expression" << journal::end;
         }
        break;

        case 25:
#line 251 "grammar"
        {
         d_val__.exd = new expr_gt(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_GREATER_THAN expression" << journal::end;
         }
        break;

        case 26:
#line 257 "grammar"
        {
         d_val__.exd = new expr_add(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_PLUS expression" << journal::end;
         }
        break;

        case 27:
#line 263 "grammar"
        {
         d_val__.exd = new expr_dif(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_MINUS expression" << journal::end;
         }
        break;

        case 28:
#line 269 "grammar"
        {
         d_val__.exd = new expr_mul(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_MULTIPLICATION expression" << journal::end;
         }
        break;

        case 29:
#line 275 "grammar"
        {
         d_val__.exd = new expr_div(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_DIVISION expression" << journal::end;
         }
        break;

        case 30:
#line 281 "grammar"
        {
         d_val__.exd = new expr_mod(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_MODULO expression" << journal::end;
         }
        break;

        case 31:
#line 287 "grammar"
        {
         d_val__.exd = new expr_pow(d_loc__.first_line,vs__(-2).exd,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> expression OPERATOR_POWER expression" << journal::end;
         }
        break;

        case 32:
#line 293 "grammar"
        {
         d_val__.exd = new expr_um(d_loc__.first_line,vs__(0).exd);
         journal(journal::info, "parser") << "expression -> OPERATOR_MINUS expression %prec UNARY_MINUS" << journal::end;
         }
        break;

        case 33:
#line 299 "grammar"
        {
         d_val__.exd = new expr_const(d_loc__.first_line, *vs__(0).integ, u_integer);
         journal(journal::info, "parser") << "expression -> INTEGER" << journal::end;
         }
        break;

        case 34:
#line 305 "grammar"
        {
         
         journal(journal::info, "parser") << "expression -> DOUBLE" << journal::end;
         }
        break;

        case 35:
#line 311 "grammar"
        {
         
         journal(journal::info, "parser") << "expression -> SINGLEQUOTE" << journal::end;
         }
        break;

        case 36:
#line 317 "grammar"
        {
         
         journal(journal::info, "parser") << "expression -> DOUBLEQUOTE" << journal::end;
         }
        break;

        case 37:
#line 323 "grammar"
        {
         journal(journal::info, "parser") << "expression -> HEXADECIMAL" << journal::end;
         }
        break;

        case 38:
#line 328 "grammar"
        {
         journal(journal::info, "parser") << "expression -> input_output" << journal::end;
         }
        break;

        case 39:
#line 333 "grammar"
        {
         d_val__.exd = new expr_var(d_loc__.first_line, *vs__(0).str);
         journal(journal::info, "parser") << "expression -> IDENTIFIER" << journal::end;
         }
        break;

        case 40:
#line 339 "grammar"
        {
         d_val__.exd = new expr_const(d_loc__.first_line, 1, u_integer);
         journal(journal::info, "parser") << "expression -> CONST_TRUE" << journal::end;
         }
        break;

        case 41:
#line 345 "grammar"
        {
         d_val__.exd = new expr_const(d_loc__.first_line, 0, u_integer);
         journal(journal::info, "parser") << "expression -> CONST_FALSE" << journal::end;
         }
        break;

        case 42:
#line 351 "grammar"
        {
         constexpr double Pi = acos(-1);
         d_val__.exd = new expr_const(d_loc__.first_line, Pi, u_double);
         journal(journal::info, "parser") << "expression -> CONST_Pi" << journal::end;
         }
        break;

        case 43:
#line 363 "grammar"
        {
         journal(journal::info, "parser") << "input_output -> OUTPUT_CREATION IDENTIFIER" << journal::end;
         }
        break;

        case 44:
#line 368 "grammar"
        {
         journal(journal::info, "parser") << "input_output -> INPUT_REDIRECTION IDENTIFIER" << journal::end;
         }
        break;

        case 45:
#line 373 "grammar"
        {
         journal(journal::info, "parser") << "input_output -> INPUT_FROM_A_HERE_DOCUMENT IDENTIFIER" << journal::end;
         }
        break;

        case 46:
#line 378 "grammar"
        {
         journal(journal::info, "parser") << "input_output -> OUTPUT_APPEND IDENTIFIER" << journal::end;
         }
        break;

        case 47:
#line 389 "grammar"
        {
         journal(journal::info, "parser") << "caseparts -> case_part caseparts2" << journal::end;
         }
        break;

        case 48:
#line 396 "grammar"
        {
         journal(journal::info, "parser") << "caseparts2 -> case_part caseparts2" << journal::end;
         }
        break;

        case 49:
#line 401 "grammar"
        {
         journal(journal::info, "parser") << "caseparts2 -> empty" << journal::end;
         }
        break;

        case 50:
#line 408 "grammar"
        {
         journal(journal::info, "parser") << "case_part -> pattern CPARENTHESIS command_list CASE_DELIMITER" << journal::end;
         }
        break;

        case 51:
#line 415 "grammar"
        {
         
         
         
         d_val__.cld = new command_list_desc();
         d_val__.cld->add(vs__(0).cld);
         delete vs__(0).cld;
         journal(journal::info, "parser") << "else_part -> KEYWORD_ELSE command_list" << journal::end;
         }
        break;

        case 52:
#line 426 "grammar"
        {
         
         journal(journal::info, "parser") << "else_part -> empty" << journal::end;
         }
        break;

        case 53:
#line 434 "grammar"
        {
         journal(journal::info, "parser") << "pattern -> IDENTIFIER" << journal::end;
         }
        break;

        case 54:
#line 439 "grammar"
        {
         journal(journal::info, "parser") << "pattern -> pattern PIPE_SYMBOL IDENTIFIER" << journal::end;
         }
        break;

        case 55:
#line 446 "grammar"
        {
         d_val__.cel =new c_expression_list();
         d_val__.cel->add(vs__(-2).cel);
         d_val__.cel->add(vs__(0).exd); 
         journal(journal::info, "parser") << "expression_list -> expression_list ELEMENT_SEPARATOR expression" << journal::end;
         }
        break;

        case 56:
#line 454 "grammar"
        {
         d_val__.cel = new c_expression_list();
         d_val__.cel->add(vs__(0).exd);
         journal(journal::info, "parser") << "expression_list -> expression" << journal::end;
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle__()
try
{
    if (s_state[state__()]->d_type & REQ_TOKEN)
        nextToken__();              // obtain next token


    int action = lookup__();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift__(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery__())
            redoToken__();
        else
            executeAction__(-action);
                                            // next token is the rule's LHS
        reduce__(-action); 
        return;
    }

    if (recovery__())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery__)
{
    if (not recovery__())
        errorRecovery__();
    else
    {
        if (token__() == Reserved__::EOF__)
            ABORT();
        popToken__();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken__()
{ 
    // If d_token is Reserved__::UNDETERMINED__ then if savedToken__() is
    // Reserved__::UNDETERMINED__ another token is obtained from lex(). Then
    // savedToken__() is assigned to d_token.

                                    // no need for a token: got one already
    if (token__() != Reserved__::UNDETERMINED__) 
    {
        return;                             
    }

    if (savedToken__() != Reserved__::UNDETERMINED__)
    {
        popToken__();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;       // accept another token (see
                                    // errorRecover())
        lex__(lex());
        print__();
    }
    print();
}

// derived/print
void Parser::print__()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin__.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin__();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle__();
    }
}
catch (Return__ retValue)
{
    return retValue or d_nErrors__;
}


// derived/tail


