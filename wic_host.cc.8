#include <iostream>
#include <string>
#include <thread>
#include <mutex>
#include <list>
#include <condition_variable>
#include <cstdint>
#include <earpc/udp.h>
#include <earpc/earpc.h>
#include <net/algorithm.h>
#include <wicp/local_property.h>
#include <wicp/remote_property.h>
#include <wicp/forward_property.h>
#include <property_config_base.h>
#include <device_role.h>
#include <process/sql_executor.h>
#include <devman/devman.h>

#include <status.h>
#include <event.h>

#include <audio.h>
#include <audio_effect.h>
#include <audio_speech.h>
#include <timer.h>

#include <property_room.h>
#include <property_external.h>
#include <peripheral/addressable_led_strip.h>
#include <peripheral/gpio_input.h>
#include <peripheral/gpio_output.h>
#include <peripheral/pin_pad.h>
#include <peripheral/pwm_output.h>
#include <peripheral/rfid.h>
#include <peripheral/text_display.h>
#include <peripheral/voltage_level.h>


struct dm_config
{
	typedef wicc_earpc cfg_earpc;

	static const uint32_t cfg_expiry_timeout = 3200;
};
typedef devman::devman<dm_config> dm;

/// Site DDF
namespace ddf
{

	/// Room pirate
	namespace pirate
	{

			/// cashier_laser_controller
			namespace cashier_laser_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - pirate - cashier_laser_controller";
					static const uint32_t cfg_class_id = 0x100030;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// laser ///
				struct laser_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::cashier_laser_controller::laser";
					static const uint32_t cfg_class_id = 0x100030;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<laser_config> laser;

				/// lcd ///
				struct lcd_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::cashier_laser_controller::lcd";
					static const uint32_t cfg_class_id = 0x100030;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::text_display<lcd_config> lcd;

				/// pin_pad ///
				struct pin_pad_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::cashier_laser_controller::pin_pad";
					static const uint32_t cfg_class_id = 0x100030;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 40;
				};
				typedef peripheral::pin_pad<pin_pad_config> pin_pad;

				/// cash_box ///
				struct cash_box_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::cashier_laser_controller::cash_box";
					static const uint32_t cfg_class_id = 0x100030;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<cash_box_config> cash_box;

				/// switch_1 ///
				struct switch_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::cashier_laser_controller::switch_1";
					static const uint32_t cfg_class_id = 0x100030;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<switch_1_config> switch_1;

				/// led_strip ///
				struct led_strip_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::cashier_laser_controller::led_strip";
					static const uint32_t cfg_class_id = 0x100030;
					static const uint32_t cfg_member_id = 0x60;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<led_strip_config> led_strip;

			}

			/// entrance_hanger_controller
			namespace entrance_hanger_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - pirate - entrance_hanger_controller";
					static const uint32_t cfg_class_id = 0x100060;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer ///
				struct debouncer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::entrance_hanger_controller::debouncer";
					static const uint32_t cfg_class_id = 0x100060;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_config> debouncer;

				/// led ///
				struct led_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::entrance_hanger_controller::led";
					static const uint32_t cfg_class_id = 0x100060;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_config> led;

				/// magnetic_sensor ///
				struct magnetic_sensor_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::entrance_hanger_controller::magnetic_sensor";
					static const uint32_t cfg_class_id = 0x100060;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_config> magnetic_sensor;

				/// debouncer_2 ///
				struct debouncer_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::entrance_hanger_controller::debouncer_2";
					static const uint32_t cfg_class_id = 0x100060;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_2_config> debouncer_2;

			}

			/// ghostbox_picture_laser_boat_wheel_controller
			namespace ghostbox_picture_laser_boat_wheel_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - pirate - ghostbox_picture_laser_boat_wheel_controller";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// magnetic_lock_1 ///
				struct magnetic_lock_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_1_config> magnetic_lock_1;

				/// magnetic_lock_2 ///
				struct magnetic_lock_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_2_config> magnetic_lock_2;

				/// magnetic_lock_3 ///
				struct magnetic_lock_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_3_config> magnetic_lock_3;

				/// debouncer ///
				struct debouncer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_config> debouncer;

				/// photosensor ///
				struct photosensor_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_config> photosensor;

				/// knock_sensor ///
				struct knock_sensor_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x60;
					static const uint32_t cfg_cooldown_time = 100;
				};
				typedef peripheral::gpio_input<knock_sensor_config> knock_sensor;

				/// led_strip_1 ///
				struct led_strip_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x70;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_strip_1_config> led_strip_1;

				/// led_strip_2 ///
				struct led_strip_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x80;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_strip_2_config> led_strip_2;

				/// potentiometer ///
				struct potentiometer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer";
					static const uint32_t cfg_class_id = 0x100050;
					static const uint32_t cfg_member_id = 0x90;
					static const uint32_t cfg_cooldown_time = 40;
				};
				typedef peripheral::voltage_level<potentiometer_config> potentiometer;

			}

			/// map_controller
			namespace map_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - pirate - map_controller";
					static const uint32_t cfg_class_id = 0x100010;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// magnetic_sensor_1 ///
				struct magnetic_sensor_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::map_controller::magnetic_sensor_1";
					static const uint32_t cfg_class_id = 0x100010;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::voltage_level<magnetic_sensor_1_config> magnetic_sensor_1;

				/// magnetic_sensor_2 ///
				struct magnetic_sensor_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::map_controller::magnetic_sensor_2";
					static const uint32_t cfg_class_id = 0x100010;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::voltage_level<magnetic_sensor_2_config> magnetic_sensor_2;

				/// led_strip ///
				struct led_strip_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::map_controller::led_strip";
					static const uint32_t cfg_class_id = 0x100010;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 40;
				};
				typedef peripheral::pwm_output<led_strip_config> led_strip;

			}

			/// rex_flipper_controller
			namespace rex_flipper_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - pirate - rex_flipper_controller";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// light_controller_1 ///
				struct light_controller_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::light_controller_1";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_1_config> light_controller_1;

				/// light_controller_2 ///
				struct light_controller_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::light_controller_2";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_2_config> light_controller_2;

				/// light_controller_3 ///
				struct light_controller_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::light_controller_3";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_3_config> light_controller_3;

				/// light_controller_4 ///
				struct light_controller_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::light_controller_4";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_4_config> light_controller_4;

				/// light_controller_5 ///
				struct light_controller_5_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::light_controller_5";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_5_config> light_controller_5;

				/// light_controller_6 ///
				struct light_controller_6_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::light_controller_6";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x60;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_6_config> light_controller_6;

				/// light_controller_7 ///
				struct light_controller_7_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::light_controller_7";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x70;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_7_config> light_controller_7;

				/// photosensor_1 ///
				struct photosensor_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::photosensor_1";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x80;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_1_config> photosensor_1;

				/// photosensor_2 ///
				struct photosensor_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::photosensor_2";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x90;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_2_config> photosensor_2;

				/// photosensor_3 ///
				struct photosensor_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::photosensor_3";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0xa0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_3_config> photosensor_3;

				/// photosensor_4 ///
				struct photosensor_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::photosensor_4";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0xb0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_4_config> photosensor_4;

				/// photosensor_5 ///
				struct photosensor_5_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::photosensor_5";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0xc0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_5_config> photosensor_5;

				/// photosensor_6 ///
				struct photosensor_6_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::photosensor_6";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0xd0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_6_config> photosensor_6;

				/// photosensor_7 ///
				struct photosensor_7_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::photosensor_7";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0xe0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<photosensor_7_config> photosensor_7;

				/// rfid_reader ///
				struct rfid_reader_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::rfid_reader";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0xf0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::rfid<rfid_reader_config> rfid_reader;

				/// magnetic_lock ///
				struct magnetic_lock_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::magnetic_lock";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x100;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_config> magnetic_lock;
				struct led_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::rex_flipper_controller::led";
					static const uint32_t cfg_class_id = 0x100040;
					static const uint32_t cfg_member_id = 0x110;
					static const uint32_t cfg_cooldown_time = 50;
					static const uint32_t cfg_led_count = 3;
				};
				typedef peripheral::addressable_led_strip<led_config> led;

			}

			/// stone_chest_controller
			namespace stone_chest_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - pirate - stone_chest_controller";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// magnetic_sensor_1 ///
				struct magnetic_sensor_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::magnetic_sensor_1";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_1_config> magnetic_sensor_1;

				/// magnetic_sensor_2 ///
				struct magnetic_sensor_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::magnetic_sensor_2";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_2_config> magnetic_sensor_2;

				/// magnetic_sensor_3 ///
				struct magnetic_sensor_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::magnetic_sensor_3";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_3_config> magnetic_sensor_3;

				/// magnetic_sensor_4 ///
				struct magnetic_sensor_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::magnetic_sensor_4";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_4_config> magnetic_sensor_4;

				/// magnetic_sensor_5 ///
				struct magnetic_sensor_5_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::magnetic_sensor_5";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_5_config> magnetic_sensor_5;

				/// magnetic_lock_1 ///
				struct magnetic_lock_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::magnetic_lock_1";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x60;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_1_config> magnetic_lock_1;

				/// magnetic_lock_2 ///
				struct magnetic_lock_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::magnetic_lock_2";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x70;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_2_config> magnetic_lock_2;

				/// led_strip ///
				struct led_strip_config : public property_config_base
				{
					constexpr static const char *name = "ddf::pirate::stone_chest_controller::led_strip";
					static const uint32_t cfg_class_id = 0x100020;
					static const uint32_t cfg_member_id = 0x80;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_strip_config> led_strip;

			}


			/// ComDev Reset ///
			struct comdev_reset_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::comdev_reset";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x1d0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<comdev_reset_config> comdev_reset;

			/// Freezed1 ///
			struct freezed1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::freezed1";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0xa0;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed1_config> freezed1;

			/// Freezed5 ///
			struct freezed5_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::freezed5";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0xb0;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed5_config> freezed5;

			/// GM Help Status ///
			struct gm_help_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::gm_help_status";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x180;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gm_help_status_config> gm_help_status;

			/// GameState ///
			struct gamestate_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::gamestate";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x90;
				static const uint32_t cfg_cooldown_time      = 1000;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gamestate_config> gamestate;

			/// Incoming Call ///
			struct incoming_call_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::incoming_call";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x190;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_config> incoming_call;

			/// Incoming Call Status ///
			struct incoming_call_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::incoming_call_status";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x1a0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_status_config> incoming_call_status;

			/// Restart Game ///
			struct restart_game_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::restart_game";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x170;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<restart_game_config> restart_game;

			/// Text Message ///
			struct text_message_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::text_message";
				typedef std::string cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x1b0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_config> text_message;

			/// Text Message Sender ///
			struct text_message_sender_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::text_message_sender";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x1c0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_sender_config> text_message_sender;

			/// game_end ///
			struct game_end_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::game_end";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x1e0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<game_end_config> game_end;

			/// knock_count ///
			struct knock_count_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::knock_count";
				typedef uint32_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x2c0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<knock_count_config> knock_count;

			/// pin_code ///
			struct pin_code_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::pin_code";
				typedef std::string cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x270;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<pin_code_config> pin_code;

			/// timedevent_an_1 ///
			struct timedevent_an_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x3b0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_1_config> timedevent_an_1;

			/// timedevent_an_2 ///
			struct timedevent_an_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x430;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_2_config> timedevent_an_2;

			/// timedevent_ghost_voice ///
			struct timedevent_ghost_voice_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::timedevent_ghost_voice";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x220;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_ghost_voice_config> timedevent_ghost_voice;

			/// timedevent_pc_1 ///
			struct timedevent_pc_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x370;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_1_config> timedevent_pc_1;

			/// timedevent_pc_2 ///
			struct timedevent_pc_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x3f0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_2_config> timedevent_pc_2;

			/// wheel_last_pos ///
			struct wheel_last_pos_config : public property_config_base
			{
				constexpr static const char *name = "ddf::pirate::wheel_last_pos";
				typedef uint16_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x1ffff0;
				static const uint32_t cfg_member_id          = 0x310;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<wheel_last_pos_config> wheel_last_pos;


			/// room_1
			struct room_1_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 7;
			};
			typedef wic::audio<room_1_config> room_1;

			namespace room_1_content
			{
				struct chord_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::chord";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct careful_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::careful";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::event_1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Wetter_2.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x80;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::event_2";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_InGame_Joe_Track2.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x90;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::event_3";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Joe_verzerrt.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0xa0;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct failstate_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::failstate";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Failstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x60;
				};
				typedef wic::audio_speech<failstate_config> failstate;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::gmhints";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::rules";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::techdiff";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct winstate_config
				{
					constexpr static const char *name = "ddf::pirate::room_1_content::winstate";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Winstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x100080;
					static const uint32_t cfg_member_id = 0x70;
				};
				typedef wic::audio_speech<winstate_config> winstate;

			}

			/// room_2
			struct room_2_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 6;
			};
			typedef wic::audio<room_2_config> room_2;

			namespace room_2_content
			{
				struct chord_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::chord";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct careful_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::careful";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::event_1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Wetter_2.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x80;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::event_2";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_InGame_Joe_Track2.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x90;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::event_3";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Joe_verzerrt.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0xa0;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct failstate_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::failstate";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Failstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x60;
				};
				typedef wic::audio_speech<failstate_config> failstate;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::gmhints";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::rules";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::techdiff";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct winstate_config
				{
					constexpr static const char *name = "ddf::pirate::room_2_content::winstate";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Pirate/DDF_EscapeRoom_Geisterpiraten_Winstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x100070;
					static const uint32_t cfg_member_id = 0x70;
				};
				typedef wic::audio_speech<winstate_config> winstate;

			}

			/// FreezeTimer1
			struct freezetimer1_config
			{
				constexpr static const char *name = "ddf::pirate::freezetimer1";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0xd0;
				static const uint32_t cfg_interval  = 3000;
			};
			typedef typename wic::timer<freezetimer1_config> freezetimer1;

			/// FreezeTimer5
			struct freezetimer5_config
			{
				constexpr static const char *name = "ddf::pirate::freezetimer5";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0xe0;
				static const uint32_t cfg_interval  = 15000;
			};
			typedef typename wic::timer<freezetimer5_config> freezetimer5;

			/// GameTimer
			struct gametimer_config
			{
				constexpr static const char *name = "ddf::pirate::gametimer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0xc0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<gametimer_config> gametimer;

			/// knock_timer
			struct knock_timer_config
			{
				constexpr static const char *name = "ddf::pirate::knock_timer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x2d0;
				static const uint32_t cfg_interval  = 1500;
			};
			typedef typename wic::timer<knock_timer_config> knock_timer;

			/// pin_timeout_timer
			struct pin_timeout_timer_config
			{
				constexpr static const char *name = "ddf::pirate::pin_timeout_timer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x280;
				static const uint32_t cfg_interval  = 100;
			};
			typedef typename wic::timer<pin_timeout_timer_config> pin_timeout_timer;

			/// timedevent_an_1_timer
			struct timedevent_an_1_timer_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_1_timer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x3c0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_1_timer_config> timedevent_an_1_timer;

			/// timedevent_an_2_timer
			struct timedevent_an_2_timer_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_2_timer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x440;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_2_timer_config> timedevent_an_2_timer;

			/// timedevent_ghost_voice_timer
			struct timedevent_ghost_voice_timer_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_ghost_voice_timer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x230;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_ghost_voice_timer_config> timedevent_ghost_voice_timer;

			/// timedevent_pc_1_timer
			struct timedevent_pc_1_timer_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_1_timer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x380;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_1_timer_config> timedevent_pc_1_timer;

			/// timedevent_pc_2_timer
			struct timedevent_pc_2_timer_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_2_timer";
				static const uint32_t cfg_class_id  = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x400;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_2_timer_config> timedevent_pc_2_timer;



			/// Freeze 1 Start ///		
			struct freeze_1_start_config
			{
				constexpr static const char *name = "ddf::pirate::freeze_1_start";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x110;
				static bool cfg_condition()
				{
									typedef typename pirate::freezed1 fr;
				typedef typename pirate::freezetimer1 tmr;
				typedef typename pirate::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename pirate::freezed1 fr;
				typedef typename pirate::freezetimer1 tmr;
				typedef typename pirate::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_1_start_config> freeze_1_start;

			/// Freeze 1 Stop ///		
			struct freeze_1_stop_config
			{
				constexpr static const char *name = "ddf::pirate::freeze_1_stop";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x120;
				static bool cfg_condition()
				{
									typedef typename pirate::freezed1 fr;
				typedef typename pirate::freezetimer1 tmr;
				typedef typename pirate::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename pirate::freezed1 fr;
				typedef typename pirate::freezetimer1 tmr;
				typedef typename pirate::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_1_stop_config> freeze_1_stop;

			/// Freeze 1 Timeout ///		
			struct freeze_1_timeout_config
			{
				constexpr static const char *name = "ddf::pirate::freeze_1_timeout";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x130;
				static bool cfg_condition()
				{
									typedef typename pirate::freezetimer1 tmr;
				typedef typename pirate::freezed1 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename pirate::freezetimer1 tmr;
				typedef typename pirate::freezed1 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_1_timeout_config> freeze_1_timeout;

			/// Freeze 5 Start ///		
			struct freeze_5_start_config
			{
				constexpr static const char *name = "ddf::pirate::freeze_5_start";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x140;
				static bool cfg_condition()
				{
									typedef typename pirate::freezed5 fr;
				typedef typename pirate::freezetimer5 tmr;
				typedef typename pirate::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename pirate::freezed5 fr;
				typedef typename pirate::freezetimer5 tmr;
				typedef typename pirate::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_5_start_config> freeze_5_start;

			/// Freeze 5 Stop ///		
			struct freeze_5_stop_config
			{
				constexpr static const char *name = "ddf::pirate::freeze_5_stop";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x150;
				static bool cfg_condition()
				{
									typedef typename pirate::freezed5 fr;
				typedef typename pirate::freezetimer5 tmr;
				typedef typename pirate::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename pirate::freezed5 fr;
				typedef typename pirate::freezetimer5 tmr;
				typedef typename pirate::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_5_stop_config> freeze_5_stop;

			/// Freeze 5 Timeout ///		
			struct freeze_5_timeout_config
			{
				constexpr static const char *name = "ddf::pirate::freeze_5_timeout";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x160;
				static bool cfg_condition()
				{
									typedef typename pirate::freezetimer5 tmr;
				typedef typename pirate::freezed5 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename pirate::freezetimer5 tmr;
				typedef typename pirate::freezed5 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_5_timeout_config> freeze_5_timeout;

			/// Game Timer Expired ///		
			struct game_timer_expired_config
			{
				constexpr static const char *name = "ddf::pirate::game_timer_expired";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0xf0;
				static bool cfg_condition()
				{
									typedef typename pirate::gametimer tmr;
				typedef typename pirate::gamestate gs;

					return (true && ( tmr::value() >= 3600 ));
				}
				static void cfg_action()
				{
									typedef typename pirate::gametimer tmr;
				typedef typename pirate::gamestate gs;

					(void)0; { gs::value(3); }
				}
			};
			typedef wic::event<game_timer_expired_config> game_timer_expired;

			/// chest_opening ///		
			struct chest_opening_config
			{
				constexpr static const char *name = "ddf::pirate::chest_opening";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x340;
				static bool cfg_condition()
				{
									typedef typename pirate::stone_chest_controller::led_strip chest;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_5 chest_opening_sensor;
				typedef typename pirate::entrance_hanger_controller::debouncer_2 game_end_button;
				typedef typename pirate::game_end game_end;

					return (true && (  chest_opening_sensor::value()  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::stone_chest_controller::led_strip chest;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_5 chest_opening_sensor;
				typedef typename pirate::entrance_hanger_controller::debouncer_2 game_end_button;
				typedef typename pirate::game_end game_end;

					(void)0; { 
        chest::value(1);
        game_end::value(1);
     }
				}
			};
			typedef wic::event<chest_opening_config> chest_opening;

			/// game_end_button_push ///		
			struct game_end_button_push_config
			{
				constexpr static const char *name = "ddf::pirate::game_end_button_push";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x360;
				static bool cfg_condition()
				{
									typedef typename pirate::gamestate game_end;
				typedef typename pirate::entrance_hanger_controller::debouncer button;
			typedef room_1_content::winstate winstate_room_1;
			typedef room_2_content::winstate winstate_room_2;
				typedef typename pirate::gametimer timer;

					return (true && ( 
        button::value() && game_end::value() >= 1
     ));
				}
				static void cfg_action()
				{
									typedef typename pirate::gamestate game_end;
				typedef typename pirate::entrance_hanger_controller::debouncer button;
			typedef room_1_content::winstate winstate_room_1;
			typedef room_2_content::winstate winstate_room_2;
				typedef typename pirate::gametimer timer;

					(void)0; { 
        timer::stop();
        winstate_room_1::play();
        winstate_room_2::play();
     }
				}
			};
			typedef wic::event<game_end_button_push_config> game_end_button_push;

			/// game_ending ///		
			struct game_ending_config
			{
				constexpr static const char *name = "ddf::pirate::game_ending";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x350;
				static bool cfg_condition()
				{
									typedef typename pirate::game_end game_end;
				typedef typename pirate::entrance_hanger_controller::led led;

					return (true && (  game_end::value()  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::game_end game_end;
				typedef typename pirate::entrance_hanger_controller::led led;

					(void)0; {  led::value(1); }
				}
			};
			typedef wic::event<game_ending_config> game_ending;

			/// game_start ///		
			struct game_start_config
			{
				constexpr static const char *name = "ddf::pirate::game_start";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x1f0;
				static bool cfg_condition()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::game_end game_end;
				typedef typename pirate::entrance_hanger_controller::magnetic_sensor entrance_door;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::game_end game_end;
				typedef typename pirate::entrance_hanger_controller::magnetic_sensor entrance_door;

					(void)0; { 
        if(entrance_door::value())
        {
           if((gs::value() == 0) || (gs::value() == 2))
           {
              gs::value(1);
           }
           if(!gs::value())
           {
              game_end::value(0);
           }
        }
        else if(gs::value() == 1)
        {
            gs::value(2);
        }
     }
				}
			};
			typedef wic::event<game_start_config> game_start;

			/// gameevent_Game State Changed ///		
			struct gameevent_game_state_changed_config
			{
				constexpr static const char *name = "ddf::pirate::gameevent_game_state_changed";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x100;
				static bool cfg_condition()
				{
									typedef typename pirate::gametimer tmr;
				typedef typename pirate::gamestate gs;
				typedef typename pirate::freezed1 fr1;
				typedef typename pirate::freezed5 fr5;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::gametimer tmr;
				typedef typename pirate::gamestate gs;
				typedef typename pirate::freezed1 fr1;
				typedef typename pirate::freezed5 fr5;

					(void)0; { 
      switch(gs::value())
      {
      	// Not started
      	case 0:
      		tmr::stop();
      		tmr::reset();
      		break;

      	// Started
      	case 1:
      		tmr::start();
      		fr1::value(false);
      		fr5::value(false);
      		break;

      	// Paused
      	case 2:
      		tmr::stop();
      		break;

      	// Finished
      	case 3:
      		tmr::stop();
      		tmr::reset();
      		break;
      }
     }
				}
			};
			typedef wic::event<gameevent_game_state_changed_config> gameevent_game_state_changed;

			/// hanger_trigger ///		
			struct hanger_trigger_config
			{
				constexpr static const char *name = "ddf::pirate::hanger_trigger";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x210;
				static bool cfg_condition()
				{
									typedef typename pirate::entrance_hanger_controller::debouncer_2 hanger;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3 boat_door;

					return (true && (  hanger::value()  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::entrance_hanger_controller::debouncer_2 hanger;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3 boat_door;

					(void)0; {  boat_door::value(0);  }
				}
			};
			typedef wic::event<hanger_trigger_config> hanger_trigger;

			/// knock_accumulate ///		
			struct knock_accumulate_config
			{
				constexpr static const char *name = "ddf::pirate::knock_accumulate";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x2e0;
				static bool cfg_condition()
				{
									typedef typename pirate::knock_count count;
				typedef typename pirate::knock_timer timer;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor sensor;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2 door;

					return (true && (  sensor::value()  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::knock_count count;
				typedef typename pirate::knock_timer timer;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor sensor;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2 door;

					(void)0; { 
        timer::start();
        timer::reset();
        
        count::value(count::value() + 1);
        
        if(count::value() >= 3)
        {
           door::value(0);
           timer::stop();
        }
     }
				}
			};
			typedef wic::event<knock_accumulate_config> knock_accumulate;

			/// knock_timeout ///		
			struct knock_timeout_config
			{
				constexpr static const char *name = "ddf::pirate::knock_timeout";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x2f0;
				static bool cfg_condition()
				{
									typedef typename pirate::knock_timer timer;
				typedef typename pirate::knock_count count;

					return (true && (  timer::value() >= 1500  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::knock_timer timer;
				typedef typename pirate::knock_count count;

					(void)0; { 
        timer::stop();
        timer::reset();
        count::value(0);
     }
				}
			};
			typedef wic::event<knock_timeout_config> knock_timeout;

			/// knot_puzzle ///		
			struct knot_puzzle_config
			{
				constexpr static const char *name = "ddf::pirate::knot_puzzle";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x2b0;
				static bool cfg_condition()
				{
									typedef typename pirate::pin_timeout_timer timer;
				typedef typename pirate::pin_code code;
				typedef typename pirate::cashier_laser_controller::cash_box box;

					return (true && (  ((std::string)code::value()).size() >= 4  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::pin_timeout_timer timer;
				typedef typename pirate::pin_code code;
				typedef typename pirate::cashier_laser_controller::cash_box box;

					(void)0; { 
        const std::string v = code::value();
        code::value("");
        if(v == "8271")
        {
           box::value(0);
           timer::stop();
        }
        else
           box::value(1);
     }
				}
			};
			typedef wic::event<knot_puzzle_config> knot_puzzle;

			/// laser_turn_off ///		
			struct laser_turn_off_config
			{
				constexpr static const char *name = "ddf::pirate::laser_turn_off";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x260;
				static bool cfg_condition()
				{
									typedef typename pirate::cashier_laser_controller::switch_1 _switch;
				typedef typename pirate::cashier_laser_controller::laser laser;

					return (true && (  _switch::value()  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::cashier_laser_controller::switch_1 _switch;
				typedef typename pirate::cashier_laser_controller::laser laser;

					(void)0; { 
        laser::value(0);
     }
				}
			};
			typedef wic::event<laser_turn_off_config> laser_turn_off;

			/// pin_code_accumulation ///		
			struct pin_code_accumulation_config
			{
				constexpr static const char *name = "ddf::pirate::pin_code_accumulation";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x290;
				static bool cfg_condition()
				{
									typedef typename pirate::pin_timeout_timer timer;
				typedef typename pirate::pin_code code;
				typedef typename pirate::cashier_laser_controller::pin_pad pin_pad;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::pin_timeout_timer timer;
				typedef typename pirate::pin_code code;
				typedef typename pirate::cashier_laser_controller::pin_pad pin_pad;

					(void)0; { 
    	typename pin_pad::value_type v = pin_pad::value();
   	if(!v.state)
		return;

        timer::reset();
        timer::start();
        const uint8_t k = v.key;
        char c;
        if(k < 9)
        c = static_cast<char>(k+49);
        else switch(k)
        {
           case 9 : c = '*'; break;
           case 10: c = '0'; break;
           case 11: c = '#'; break;
           default: c = '?'; break;
        }
        code::value(code::value() + c);
     }
				}
			};
			typedef wic::event<pin_code_accumulation_config> pin_code_accumulation;

			/// pin_timeout ///		
			struct pin_timeout_config
			{
				constexpr static const char *name = "ddf::pirate::pin_timeout";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x2a0;
				static bool cfg_condition()
				{
									typedef typename pirate::pin_timeout_timer timer;
				typedef typename pirate::pin_code code;
				typedef typename pirate::cashier_laser_controller::cash_box box;

					return (true && (  timer::value() > 25  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::pin_timeout_timer timer;
				typedef typename pirate::pin_code code;
				typedef typename pirate::cashier_laser_controller::cash_box box;

					(void)0; { 
        timer::stop();
        timer::reset();
        box::value(0);
        code::value("");
     }
				}
			};
			typedef wic::event<pin_timeout_config> pin_timeout;

			/// rex_table ///		
			struct rex_table_config
			{
				constexpr static const char *name = "ddf::pirate::rex_table";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x200;
				static bool cfg_condition()
				{
									typedef typename pirate::rex_flipper_controller::photosensor_1 p1;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p2;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p3;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p4;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p5;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p6;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p7;
				typedef typename pirate::rex_flipper_controller::rfid_reader rfid;
				typedef typename pirate::rex_flipper_controller::led led;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::rex_flipper_controller::photosensor_1 p1;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p2;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p3;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p4;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p5;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p6;
				typedef typename pirate::rex_flipper_controller::photosensor_1 p7;
				typedef typename pirate::rex_flipper_controller::rfid_reader rfid;
				typedef typename pirate::rex_flipper_controller::led led;

					(void)0; {   }
				}
			};
			typedef wic::event<rex_table_config> rex_table;

			/// rotation_update ///		
			struct rotation_update_config
			{
				constexpr static const char *name = "ddf::pirate::rotation_update";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x320;
				static bool cfg_condition()
				{
									typedef typename pirate::wheel_last_pos last;
				typedef typename pirate::map_controller::led_strip star;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer wheel;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::wheel_last_pos last;
				typedef typename pirate::map_controller::led_strip star;
				typedef typename pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer wheel;

					(void)0; { 
    	double x;
    	if(
		(wheel_last_pos::value() > wheel::value()) &&
		((wheel_last_pos::value() - wheel::value()) < 1000)
	)
	{
		x = sqrt((double)star::value()*3);
		x += (wheel_last_pos::value() - wheel::value())/31;
		x*=x;
		x/=3;
		if(x > 65535)
			x=65535;

	}
	else if(
		(wheel_last_pos::value() < wheel::value()) &&
		((wheel::value() - wheel_last_pos::value()) < 1000)
	)
	{
		x = sqrt((double)star::value()*3);
		x += (wheel_last_pos::value() - wheel::value())/31;
		if(x < 0)
			x = 0;
		else 
		{
			x*=x;
			x/=3;
		}
	}

	else
	{

		wheel_last_pos::value(wheel::value());
		return;
	}
	wheel_last_pos::value(wheel::value());
        star::value((uint16_t)x);
     }
				}
			};
			typedef wic::event<rotation_update_config> rotation_update;

			/// ship_matching ///		
			struct ship_matching_config
			{
				constexpr static const char *name = "ddf::pirate::ship_matching";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x300;
				static bool cfg_condition()
				{
									typedef typename pirate::map_controller::magnetic_sensor_1 sensor_1;
				typedef typename pirate::map_controller::magnetic_sensor_2 sensor_2;
				typedef typename pirate::stone_chest_controller::magnetic_lock_1 lock;

					return (true && (  sensor_1::value() && sensor_2::value()  ));
				}
				static void cfg_action()
				{
									typedef typename pirate::map_controller::magnetic_sensor_1 sensor_1;
				typedef typename pirate::map_controller::magnetic_sensor_2 sensor_2;
				typedef typename pirate::stone_chest_controller::magnetic_lock_1 lock;

					(void)0; {  lock::value(0);  }
				}
			};
			typedef wic::event<ship_matching_config> ship_matching;

			/// sign_matching ///		
			struct sign_matching_config
			{
				constexpr static const char *name = "ddf::pirate::sign_matching";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x330;
				static bool cfg_condition()
				{
									typedef typename pirate::stone_chest_controller::magnetic_sensor_1 stone_1;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_2 stone_2;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_3 stone_3;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_4 stone_4;
				typedef typename pirate::stone_chest_controller::magnetic_lock_2 latticelock;

					return (true && (  

        stone_2::value() ||
        stone_3::value() ||
        stone_4::value()
     ));
				}
				static void cfg_action()
				{
									typedef typename pirate::stone_chest_controller::magnetic_sensor_1 stone_1;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_2 stone_2;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_3 stone_3;
				typedef typename pirate::stone_chest_controller::magnetic_sensor_4 stone_4;
				typedef typename pirate::stone_chest_controller::magnetic_lock_2 latticelock;

					(void)0; {  latticelock::value();  }
				}
			};
			typedef wic::event<sign_matching_config> sign_matching;

			/// timedevent_an_1_event_finished ///		
			struct timedevent_an_1_event_finished_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_1_event_finished";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x3d0;
				static bool cfg_condition()
				{
									typedef typename pirate::timedevent_an_1 at;
				typedef typename pirate::timedevent_an_1_timer tmr;
			typedef room_1_content::event_1 event_1_room_1;
			typedef room_2_content::event_1 event_1_room_2;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename pirate::timedevent_an_1 at;
				typedef typename pirate::timedevent_an_1_timer tmr;
			typedef room_1_content::event_1 event_1_room_1;
			typedef room_2_content::event_1 event_1_room_2;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            event_1_room_1::play();
            event_1_room_2::play();
         }
				}
			};
			typedef wic::event<timedevent_an_1_event_finished_config> timedevent_an_1_event_finished;

			/// timedevent_an_1_event_gamestate ///		
			struct timedevent_an_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x3e0;
				static bool cfg_condition()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_an_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_an_1_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_an_1_event_gamestate_config> timedevent_an_1_event_gamestate;

			/// timedevent_an_2_event_finished ///		
			struct timedevent_an_2_event_finished_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_2_event_finished";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x450;
				static bool cfg_condition()
				{
									typedef typename pirate::timedevent_an_2 at;
				typedef typename pirate::timedevent_an_2_timer tmr;
			typedef room_1_content::event_2 event_2_room_1;
			typedef room_2_content::event_2 event_2_room_2;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename pirate::timedevent_an_2 at;
				typedef typename pirate::timedevent_an_2_timer tmr;
			typedef room_1_content::event_2 event_2_room_1;
			typedef room_2_content::event_2 event_2_room_2;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            event_2_room_1::play();
            event_2_room_2::play();
         }
				}
			};
			typedef wic::event<timedevent_an_2_event_finished_config> timedevent_an_2_event_finished;

			/// timedevent_an_2_event_gamestate ///		
			struct timedevent_an_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_an_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x460;
				static bool cfg_condition()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_an_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_an_2_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_an_2_event_gamestate_config> timedevent_an_2_event_gamestate;

			/// timedevent_ghost_voice_event_finished ///		
			struct timedevent_ghost_voice_event_finished_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_ghost_voice_event_finished";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x240;
				static bool cfg_condition()
				{
									typedef typename pirate::timedevent_ghost_voice at;
				typedef typename pirate::timedevent_ghost_voice_timer tmr;
			typedef room_1_content::event_3 d1;
			typedef room_2_content::event_3 d2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename pirate::timedevent_ghost_voice at;
				typedef typename pirate::timedevent_ghost_voice_timer tmr;
			typedef room_1_content::event_3 d1;
			typedef room_2_content::event_3 d2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();

    	        d1::play();
                d2::play();
             }
				}
			};
			typedef wic::event<timedevent_ghost_voice_event_finished_config> timedevent_ghost_voice_event_finished;

			/// timedevent_ghost_voice_event_gamestate ///		
			struct timedevent_ghost_voice_event_gamestate_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_ghost_voice_event_gamestate";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x250;
				static bool cfg_condition()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_ghost_voice_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_ghost_voice_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                   tmr::start();
                else
                   tmr::stop();
                if(gs::value() == 0)
                   tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_ghost_voice_event_gamestate_config> timedevent_ghost_voice_event_gamestate;

			/// timedevent_pc_1_event_finished ///		
			struct timedevent_pc_1_event_finished_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_1_event_finished";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x390;
				static bool cfg_condition()
				{
									typedef typename pirate::timedevent_pc_1 at;
				typedef typename pirate::timedevent_pc_1_timer tmr;
				typedef typename pirate::incoming_call call;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename pirate::timedevent_pc_1 at;
				typedef typename pirate::timedevent_pc_1_timer tmr;
				typedef typename pirate::incoming_call call;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            call::value(4);
            
         }
				}
			};
			typedef wic::event<timedevent_pc_1_event_finished_config> timedevent_pc_1_event_finished;

			/// timedevent_pc_1_event_gamestate ///		
			struct timedevent_pc_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x3a0;
				static bool cfg_condition()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_pc_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_pc_1_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_pc_1_event_gamestate_config> timedevent_pc_1_event_gamestate;

			/// timedevent_pc_2_event_finished ///		
			struct timedevent_pc_2_event_finished_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_2_event_finished";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x410;
				static bool cfg_condition()
				{
									typedef typename pirate::timedevent_pc_2 at;
				typedef typename pirate::timedevent_pc_2_timer tmr;
				typedef typename pirate::incoming_call call;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename pirate::timedevent_pc_2 at;
				typedef typename pirate::timedevent_pc_2_timer tmr;
				typedef typename pirate::incoming_call call;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
	    call::value(5);
         }
				}
			};
			typedef wic::event<timedevent_pc_2_event_finished_config> timedevent_pc_2_event_finished;

			/// timedevent_pc_2_event_gamestate ///		
			struct timedevent_pc_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::pirate::timedevent_pc_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x1ffff0;
				static const uint32_t cfg_member_id = 0x420;
				static bool cfg_condition()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_pc_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename pirate::gamestate gs;
				typedef typename pirate::timedevent_pc_2_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_pc_2_event_gamestate_config> timedevent_pc_2_event_gamestate;
}

	/// Room magician
	namespace magician
	{

			/// cupboard_controller
			namespace cupboard_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - magician - cupboard_controller";
					static const uint32_t cfg_class_id = 0x200010;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer ///
				struct debouncer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::cupboard_controller::debouncer";
					static const uint32_t cfg_class_id = 0x200010;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_config> debouncer;

				/// magnetic_sensor ///
				struct magnetic_sensor_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::cupboard_controller::magnetic_sensor";
					static const uint32_t cfg_class_id = 0x200010;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_config> magnetic_sensor;

				/// magnetic_lock ///
				struct magnetic_lock_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::cupboard_controller::magnetic_lock";
					static const uint32_t cfg_class_id = 0x200010;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_config> magnetic_lock;

				/// led_strip ///
				struct led_strip_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::cupboard_controller::led_strip";
					static const uint32_t cfg_class_id = 0x200010;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_strip_config> led_strip;

			}

			/// design_board_controller
			namespace design_board_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - magician - design_board_controller";
					static const uint32_t cfg_class_id = 0x200020;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// linear_magnetic_sensor_1 ///
				struct linear_magnetic_sensor_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::design_board_controller::linear_magnetic_sensor_1";
					static const uint32_t cfg_class_id = 0x200020;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<linear_magnetic_sensor_1_config> linear_magnetic_sensor_1;

				/// linear_magnetic_sensor_2 ///
				struct linear_magnetic_sensor_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::design_board_controller::linear_magnetic_sensor_2";
					static const uint32_t cfg_class_id = 0x200020;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<linear_magnetic_sensor_2_config> linear_magnetic_sensor_2;

				/// linear_magnetic_sensor_3 ///
				struct linear_magnetic_sensor_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::design_board_controller::linear_magnetic_sensor_3";
					static const uint32_t cfg_class_id = 0x200020;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<linear_magnetic_sensor_3_config> linear_magnetic_sensor_3;

				/// magnetic_lock ///
				struct magnetic_lock_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::design_board_controller::magnetic_lock";
					static const uint32_t cfg_class_id = 0x200020;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_config> magnetic_lock;

			}

			/// entrance_controller
			namespace entrance_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - magician - entrance_controller";
					static const uint32_t cfg_class_id = 0x200040;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer ///
				struct debouncer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::entrance_controller::debouncer";
					static const uint32_t cfg_class_id = 0x200040;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_config> debouncer;

				/// led ///
				struct led_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::entrance_controller::led";
					static const uint32_t cfg_class_id = 0x200040;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_config> led;

				/// magnetic_sensor ///
				struct magnetic_sensor_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::entrance_controller::magnetic_sensor";
					static const uint32_t cfg_class_id = 0x200040;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_config> magnetic_sensor;

			}

			/// futuristic_safe_controller
			namespace futuristic_safe_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - magician - futuristic_safe_controller";
					static const uint32_t cfg_class_id = 0x200030;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer ///
				struct debouncer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::futuristic_safe_controller::debouncer";
					static const uint32_t cfg_class_id = 0x200030;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_config> debouncer;

				/// rfid_reader ///
				struct rfid_reader_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::futuristic_safe_controller::rfid_reader";
					static const uint32_t cfg_class_id = 0x200030;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::rfid<rfid_reader_config> rfid_reader;

				/// pin_pad ///
				struct pin_pad_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::futuristic_safe_controller::pin_pad";
					static const uint32_t cfg_class_id = 0x200030;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 40;
				};
				typedef peripheral::pin_pad<pin_pad_config> pin_pad;

				/// magnetic_lock ///
				struct magnetic_lock_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::futuristic_safe_controller::magnetic_lock";
					static const uint32_t cfg_class_id = 0x200030;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_config> magnetic_lock;
				struct addressable_led_strip_config : public property_config_base
				{
					constexpr static const char *name = "ddf::magician::futuristic_safe_controller::addressable_led_strip";
					static const uint32_t cfg_class_id = 0x200030;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 200;
					static const uint32_t cfg_led_count = 8;
				};
				typedef peripheral::addressable_led_strip<addressable_led_strip_config> addressable_led_strip;

			}


			/// ComDev Reset ///
			struct comdev_reset_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::comdev_reset";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x1b0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<comdev_reset_config> comdev_reset;

			/// Freezed1 ///
			struct freezed1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::freezed1";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x80;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed1_config> freezed1;

			/// Freezed5 ///
			struct freezed5_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::freezed5";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x90;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed5_config> freezed5;

			/// GM Help Status ///
			struct gm_help_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::gm_help_status";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x160;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gm_help_status_config> gm_help_status;

			/// GameState ///
			struct gamestate_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::gamestate";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x70;
				static const uint32_t cfg_cooldown_time      = 1000;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gamestate_config> gamestate;

			/// Incoming Call ///
			struct incoming_call_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::incoming_call";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x170;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_config> incoming_call;

			/// Incoming Call Status ///
			struct incoming_call_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::incoming_call_status";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x180;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_status_config> incoming_call_status;

			/// Restart Game ///
			struct restart_game_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::restart_game";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x150;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<restart_game_config> restart_game;

			/// Text Message ///
			struct text_message_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::text_message";
				typedef std::string cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x190;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_config> text_message;

			/// Text Message Sender ///
			struct text_message_sender_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::text_message_sender";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x1a0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_sender_config> text_message_sender;

			/// game_end ///
			struct game_end_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::game_end";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x1c0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<game_end_config> game_end;

			/// pin_code ///
			struct pin_code_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::pin_code";
				typedef uint16_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x220;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<pin_code_config> pin_code;

			/// pin_pad_code ///
			struct pin_pad_code_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::pin_pad_code";
				typedef uint16_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x270;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<pin_pad_code_config> pin_pad_code;

			/// rfid_reader_code ///
			struct rfid_reader_code_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::rfid_reader_code";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x210;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<rfid_reader_code_config> rfid_reader_code;

			/// timedevent_an_1 ///
			struct timedevent_an_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x2d0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_1_config> timedevent_an_1;

			/// timedevent_an_2 ///
			struct timedevent_an_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x390;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_2_config> timedevent_an_2;

			/// timedevent_an_3 ///
			struct timedevent_an_3_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_3";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x3d0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_3_config> timedevent_an_3;

			/// timedevent_an_4 ///
			struct timedevent_an_4_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_4";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x450;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_4_config> timedevent_an_4;

			/// timedevent_an_5 ///
			struct timedevent_an_5_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_5";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x490;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_5_config> timedevent_an_5;

			/// timedevent_an_6 ///
			struct timedevent_an_6_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_6";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x510;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_an_6_config> timedevent_an_6;

			/// timedevent_ap_1 ///
			struct timedevent_ap_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x310;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_ap_1_config> timedevent_ap_1;

			/// timedevent_ap_2 ///
			struct timedevent_ap_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x350;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_ap_2_config> timedevent_ap_2;

			/// timedevent_pc_1 ///
			struct timedevent_pc_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x410;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_1_config> timedevent_pc_1;

			/// timedevent_pc_2 ///
			struct timedevent_pc_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x2ffff0;
				static const uint32_t cfg_member_id          = 0x4d0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_2_config> timedevent_pc_2;


			/// room_1
			struct room_1_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 1;
			};
			typedef wic::audio<room_1_config> room_1;

			namespace room_1_content
			{
				struct applause_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::applause";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/EscapeRoomAtmos/DreiFFF_Escape_Applaus.wav";
				};
				typedef wic::audio_effect<applause_config> applause;
				struct chord_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::chord";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct careful_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::careful";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::gmhints";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::rules";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::techdiff";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct winstate_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::winstate";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusionen_Failstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0xd0;
				};
				typedef wic::audio_speech<winstate_config> winstate;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::event_1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_0030.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0x70;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::event_2";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_1000.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0x80;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::event_3";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_2000.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0x90;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct event_4_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::event_4";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_3000.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0xa0;
				};
				typedef wic::audio_speech<event_4_config> event_4;
				struct event_5_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::event_5";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_4000.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0xb0;
				};
				typedef wic::audio_speech<event_5_config> event_5;
				struct event_6_config
				{
					constexpr static const char *name = "ddf::magician::room_1_content::event_6";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_5500.wav";
					static const uint32_t cfg_class_id = 0x200060;
					static const uint32_t cfg_member_id = 0xc0;
				};
				typedef wic::audio_speech<event_6_config> event_6;

			}

			/// room_2
			struct room_2_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 0;
			};
			typedef wic::audio<room_2_config> room_2;

			namespace room_2_content
			{
				struct applause_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::applause";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/EscapeRoomAtmos/DreiFFF_Escape_Applaus.wav";
				};
				typedef wic::audio_effect<applause_config> applause;
				struct chord_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::chord";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct careful_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::careful";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::gmhints";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::rules";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::techdiff";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct winstate_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::winstate";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusionen_Failstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0xd0;
				};
				typedef wic::audio_speech<winstate_config> winstate;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::event_1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_0030.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0x70;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::event_2";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_1000.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0x80;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::event_3";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_2000.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0x90;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct event_4_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::event_4";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_3000.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0xa0;
				};
				typedef wic::audio_speech<event_4_config> event_4;
				struct event_5_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::event_5";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_4000.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0xb0;
				};
				typedef wic::audio_speech<event_5_config> event_5;
				struct event_6_config
				{
					constexpr static const char *name = "ddf::magician::room_2_content::event_6";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Magician/DDF_EscapeRoom_Illusion_Ansager_5500.wav";
					static const uint32_t cfg_class_id = 0x200050;
					static const uint32_t cfg_member_id = 0xc0;
				};
				typedef wic::audio_speech<event_6_config> event_6;

			}

			/// FreezeTimer1
			struct freezetimer1_config
			{
				constexpr static const char *name = "ddf::magician::freezetimer1";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0xb0;
				static const uint32_t cfg_interval  = 3000;
			};
			typedef typename wic::timer<freezetimer1_config> freezetimer1;

			/// FreezeTimer5
			struct freezetimer5_config
			{
				constexpr static const char *name = "ddf::magician::freezetimer5";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0xc0;
				static const uint32_t cfg_interval  = 15000;
			};
			typedef typename wic::timer<freezetimer5_config> freezetimer5;

			/// GameTimer
			struct gametimer_config
			{
				constexpr static const char *name = "ddf::magician::gametimer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0xa0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<gametimer_config> gametimer;

			/// pin_timeout_timer
			struct pin_timeout_timer_config
			{
				constexpr static const char *name = "ddf::magician::pin_timeout_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x260;
				static const uint32_t cfg_interval  = 100;
			};
			typedef typename wic::timer<pin_timeout_timer_config> pin_timeout_timer;

			/// timedevent_an_1_timer
			struct timedevent_an_1_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_1_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x2e0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_1_timer_config> timedevent_an_1_timer;

			/// timedevent_an_2_timer
			struct timedevent_an_2_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_2_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x3a0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_2_timer_config> timedevent_an_2_timer;

			/// timedevent_an_3_timer
			struct timedevent_an_3_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_3_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x3e0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_3_timer_config> timedevent_an_3_timer;

			/// timedevent_an_4_timer
			struct timedevent_an_4_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_4_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x460;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_4_timer_config> timedevent_an_4_timer;

			/// timedevent_an_5_timer
			struct timedevent_an_5_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_5_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x4a0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_5_timer_config> timedevent_an_5_timer;

			/// timedevent_an_6_timer
			struct timedevent_an_6_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_6_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x520;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_an_6_timer_config> timedevent_an_6_timer;

			/// timedevent_ap_1_timer
			struct timedevent_ap_1_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_1_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x320;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_ap_1_timer_config> timedevent_ap_1_timer;

			/// timedevent_ap_2_timer
			struct timedevent_ap_2_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_2_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x360;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_ap_2_timer_config> timedevent_ap_2_timer;

			/// timedevent_pc_1_timer
			struct timedevent_pc_1_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_1_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x420;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_1_timer_config> timedevent_pc_1_timer;

			/// timedevent_pc_2_timer
			struct timedevent_pc_2_timer_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_2_timer";
				static const uint32_t cfg_class_id  = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x4e0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_2_timer_config> timedevent_pc_2_timer;



			/// Freeze 1 Start ///		
			struct freeze_1_start_config
			{
				constexpr static const char *name = "ddf::magician::freeze_1_start";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0xf0;
				static bool cfg_condition()
				{
									typedef typename magician::freezed1 fr;
				typedef typename magician::freezetimer1 tmr;
				typedef typename magician::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::freezed1 fr;
				typedef typename magician::freezetimer1 tmr;
				typedef typename magician::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_1_start_config> freeze_1_start;

			/// Freeze 1 Stop ///		
			struct freeze_1_stop_config
			{
				constexpr static const char *name = "ddf::magician::freeze_1_stop";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x100;
				static bool cfg_condition()
				{
									typedef typename magician::freezed1 fr;
				typedef typename magician::freezetimer1 tmr;
				typedef typename magician::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::freezed1 fr;
				typedef typename magician::freezetimer1 tmr;
				typedef typename magician::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_1_stop_config> freeze_1_stop;

			/// Freeze 1 Timeout ///		
			struct freeze_1_timeout_config
			{
				constexpr static const char *name = "ddf::magician::freeze_1_timeout";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x110;
				static bool cfg_condition()
				{
									typedef typename magician::freezetimer1 tmr;
				typedef typename magician::freezed1 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::freezetimer1 tmr;
				typedef typename magician::freezed1 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_1_timeout_config> freeze_1_timeout;

			/// Freeze 5 Start ///		
			struct freeze_5_start_config
			{
				constexpr static const char *name = "ddf::magician::freeze_5_start";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x120;
				static bool cfg_condition()
				{
									typedef typename magician::freezed5 fr;
				typedef typename magician::freezetimer5 tmr;
				typedef typename magician::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::freezed5 fr;
				typedef typename magician::freezetimer5 tmr;
				typedef typename magician::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_5_start_config> freeze_5_start;

			/// Freeze 5 Stop ///		
			struct freeze_5_stop_config
			{
				constexpr static const char *name = "ddf::magician::freeze_5_stop";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x130;
				static bool cfg_condition()
				{
									typedef typename magician::freezed5 fr;
				typedef typename magician::freezetimer5 tmr;
				typedef typename magician::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::freezed5 fr;
				typedef typename magician::freezetimer5 tmr;
				typedef typename magician::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_5_stop_config> freeze_5_stop;

			/// Freeze 5 Timeout ///		
			struct freeze_5_timeout_config
			{
				constexpr static const char *name = "ddf::magician::freeze_5_timeout";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x140;
				static bool cfg_condition()
				{
									typedef typename magician::freezetimer5 tmr;
				typedef typename magician::freezed5 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::freezetimer5 tmr;
				typedef typename magician::freezed5 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_5_timeout_config> freeze_5_timeout;

			/// Game Timer Expired ///		
			struct game_timer_expired_config
			{
				constexpr static const char *name = "ddf::magician::game_timer_expired";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0xd0;
				static bool cfg_condition()
				{
									typedef typename magician::gametimer tmr;
				typedef typename magician::gamestate gs;

					return (true && ( tmr::value() >= 3600 ));
				}
				static void cfg_action()
				{
									typedef typename magician::gametimer tmr;
				typedef typename magician::gamestate gs;

					(void)0; { gs::value(3); }
				}
			};
			typedef wic::event<game_timer_expired_config> game_timer_expired;

			/// cupboard_controller_event_for_labyrinth_task ///		
			struct cupboard_controller_event_for_labyrinth_task_config
			{
				constexpr static const char *name = "ddf::magician::cupboard_controller_event_for_labyrinth_task";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x200;
				static bool cfg_condition()
				{
									typedef typename magician::cupboard_controller::debouncer debouncer;
				typedef typename magician::cupboard_controller::magnetic_lock magnetic_lock;
				typedef typename magician::futuristic_safe_controller::addressable_led_strip led;

					return (true && ( 
        debouncer::value()
     ));
				}
				static void cfg_action()
				{
									typedef typename magician::cupboard_controller::debouncer debouncer;
				typedef typename magician::cupboard_controller::magnetic_lock magnetic_lock;
				typedef typename magician::futuristic_safe_controller::addressable_led_strip led;

					(void)0; { 
        magnetic_lock::value(0);
        led::enabled(false);
        led::enabled(true);
        led::value_type x = led::value();
        for(int i = 0; i < led::led_count; ++i)
        {
            x.led[i].red = 255;
            x.led[i].green = 0;
            x.led[i].blue = 0;
        }
        led::value((led::value_type) x);
     }
				}
			};
			typedef wic::event<cupboard_controller_event_for_labyrinth_task_config> cupboard_controller_event_for_labyrinth_task;

			/// door_open_light_turn_on ///		
			struct door_open_light_turn_on_config
			{
				constexpr static const char *name = "ddf::magician::door_open_light_turn_on";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x1f0;
				static bool cfg_condition()
				{
									typedef typename magician::cupboard_controller::magnetic_sensor sensor;
				typedef typename magician::cupboard_controller::led_strip led;

					return (true && (  !sensor::value()  ));
				}
				static void cfg_action()
				{
									typedef typename magician::cupboard_controller::magnetic_sensor sensor;
				typedef typename magician::cupboard_controller::led_strip led;

					(void)0; {  led::value(1);  }
				}
			};
			typedef wic::event<door_open_light_turn_on_config> door_open_light_turn_on;

			/// game_end_button_push ///		
			struct game_end_button_push_config
			{
				constexpr static const char *name = "ddf::magician::game_end_button_push";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x2c0;
				static bool cfg_condition()
				{
									typedef typename magician::game_end game_end;
				typedef typename magician::gamestate gs;
				typedef typename magician::entrance_controller::debouncer button;
			typedef room_1_content::winstate winstate_room_1;
			typedef room_2_content::winstate winstate_room_2;
				typedef typename magician::gametimer timer;

					return (true && ( 
            button::value() && game_end::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename magician::game_end game_end;
				typedef typename magician::gamestate gs;
				typedef typename magician::entrance_controller::debouncer button;
			typedef room_1_content::winstate winstate_room_1;
			typedef room_2_content::winstate winstate_room_2;
				typedef typename magician::gametimer timer;

					(void)0; { 
            timer::stop();
            winstate_room_1::play();
            winstate_room_2::play();
	    gs::value(3);
         }
				}
			};
			typedef wic::event<game_end_button_push_config> game_end_button_push;

			/// game_ending ///		
			struct game_ending_config
			{
				constexpr static const char *name = "ddf::magician::game_ending";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x2b0;
				static bool cfg_condition()
				{
									typedef typename magician::game_end game_end;
				typedef typename magician::entrance_controller::led led;
				typedef typename magician::entrance_controller::debouncer button;

					return (true && (  game_end::value()  ));
				}
				static void cfg_action()
				{
									typedef typename magician::game_end game_end;
				typedef typename magician::entrance_controller::led led;
				typedef typename magician::entrance_controller::debouncer button;

					(void)0; {  led::value(1); }
				}
			};
			typedef wic::event<game_ending_config> game_ending;

			/// game_start ///		
			struct game_start_config
			{
				constexpr static const char *name = "ddf::magician::game_start";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x1d0;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::game_end game_end;
				typedef typename magician::entrance_controller::magnetic_sensor entrance_door;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::game_end game_end;
				typedef typename magician::entrance_controller::magnetic_sensor entrance_door;

					(void)0; { 
        if(entrance_door::value())
        {
            if((gs::value() == 0) || (gs::value() == 2))
            {
                gs::value(1);
            }
            if(!gs::value())
            {
                game_end::value(0);
            }
        }
        else if(gs::value() == 1)
        {
                gs::value(2);
        }
        
      }
				}
			};
			typedef wic::event<game_start_config> game_start;

			/// gameevent_Game State Changed ///		
			struct gameevent_game_state_changed_config
			{
				constexpr static const char *name = "ddf::magician::gameevent_game_state_changed";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0xe0;
				static bool cfg_condition()
				{
									typedef typename magician::gametimer tmr;
				typedef typename magician::gamestate gs;
				typedef typename magician::freezed1 fr1;
				typedef typename magician::freezed5 fr5;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gametimer tmr;
				typedef typename magician::gamestate gs;
				typedef typename magician::freezed1 fr1;
				typedef typename magician::freezed5 fr5;

					(void)0; { 
      switch(gs::value())
      {
      	// Not started
      	case 0:
      		tmr::stop();
      		tmr::reset();
      		break;

      	// Started
      	case 1:
      		tmr::start();
      		fr1::value(false);
      		fr5::value(false);
      		break;

      	// Paused
      	case 2:
      		tmr::stop();
      		break;

      	// Finished
      	case 3:
      		tmr::stop();
      		tmr::reset();
      		break;
      }
     }
				}
			};
			typedef wic::event<gameevent_game_state_changed_config> gameevent_game_state_changed;

			/// gameevent_call_accepted ///		
			struct gameevent_call_accepted_config
			{
				constexpr static const char *name = "ddf::magician::gameevent_call_accepted";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x560;
				static bool cfg_condition()
				{
									typedef typename magician::incoming_call_status cs;

					return (true && ( 2 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_accepted_config> gameevent_call_accepted;

			/// gameevent_call_declined ///		
			struct gameevent_call_declined_config
			{
				constexpr static const char *name = "ddf::magician::gameevent_call_declined";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x570;
				static bool cfg_condition()
				{
									typedef typename magician::incoming_call_status cs;

					return (true && ( 3 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_declined_config> gameevent_call_declined;

			/// gameevent_call_finished ///		
			struct gameevent_call_finished_config
			{
				constexpr static const char *name = "ddf::magician::gameevent_call_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x580;
				static bool cfg_condition()
				{
									typedef typename magician::incoming_call_status cs;

					return (true && ( 4 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_finished_config> gameevent_call_finished;

			/// gameevent_call_missed ///		
			struct gameevent_call_missed_config
			{
				constexpr static const char *name = "ddf::magician::gameevent_call_missed";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x590;
				static bool cfg_condition()
				{
									typedef typename magician::incoming_call_status cs;

					return (true && ( 5 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_missed_config> gameevent_call_missed;

			/// gameevent_call_ringing ///		
			struct gameevent_call_ringing_config
			{
				constexpr static const char *name = "ddf::magician::gameevent_call_ringing";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x550;
				static bool cfg_condition()
				{
									typedef typename magician::incoming_call_status cs;

					return (true && ( 1 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename magician::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_ringing_config> gameevent_call_ringing;

			/// keyswitch_active ///		
			struct keyswitch_active_config
			{
				constexpr static const char *name = "ddf::magician::keyswitch_active";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x240;
				static bool cfg_condition()
				{
									typedef typename magician::futuristic_safe_controller::debouncer key_switch;
				typedef typename magician::futuristic_safe_controller::addressable_led_strip led;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::futuristic_safe_controller::debouncer key_switch;
				typedef typename magician::futuristic_safe_controller::addressable_led_strip led;

					(void)0; { 
            led::value_type x = led::value();
            if(key_switch::value())
            {
                for(int i = 4; i < 8; ++i)
                {
                    x.led[i].red = 0;
                    x.led[i].green = 255;
                    x.led[i].blue = 0;
                }
            }
            
            else
            {
                for(int i = 4; i < 8; ++i)
                {
                    x.led[i].red = 255;
                    x.led[i].green = 0;
                    x.led[i].blue = 0;
                }
            }
            led::value((led::value_type) x);
            
         }
				}
			};
			typedef wic::event<keyswitch_active_config> keyswitch_active;

			/// pin_code_accumulation ///		
			struct pin_code_accumulation_config
			{
				constexpr static const char *name = "ddf::magician::pin_code_accumulation";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x280;
				static bool cfg_condition()
				{
									typedef typename magician::pin_timeout_timer timer;
				typedef typename magician::pin_code code;
				typedef typename magician::futuristic_safe_controller::pin_pad pin_pad;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::pin_timeout_timer timer;
				typedef typename magician::pin_code code;
				typedef typename magician::futuristic_safe_controller::pin_pad pin_pad;

					(void)0; { 
		keystroke_t v = pin_pad::value();
     
		if(!v.state)
		{
			return;
		}
        
        timer::reset();
        timer::start();
        const uint8_t k = v.key;
        uint8_t c;
        if(k < 9)
        {
          c = static_cast<char>(k+1);        
        }
        else if(k == 10)
        {
	      c = 0;
        }
        else
          return;
        code::value(code::value() * 10 + c);
       }
				}
			};
			typedef wic::event<pin_code_accumulation_config> pin_code_accumulation;

			/// pin_code_test_alias_safe_activation ///		
			struct pin_code_test_alias_safe_activation_config
			{
				constexpr static const char *name = "ddf::magician::pin_code_test_alias_safe_activation";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x2a0;
				static bool cfg_condition()
				{
									typedef typename magician::pin_timeout_timer timer;
				typedef typename magician::game_end game_end;
				typedef typename magician::pin_pad_code original;
				typedef typename magician::pin_code code;
				typedef typename magician::futuristic_safe_controller::magnetic_lock lock;
				typedef typename magician::futuristic_safe_controller::rfid_reader rfid;
				typedef typename magician::futuristic_safe_controller::debouncer key_switch;
				typedef typename magician::futuristic_safe_controller::pin_pad pin_pad;
				typedef typename magician::rfid_reader_code rfid_reader_code;

					return (true && ( 
        rfid::value() == rfid_reader_code::value() &&
        key_switch::value() &&
        code::value() >= 1000
       ));
				}
				static void cfg_action()
				{
									typedef typename magician::pin_timeout_timer timer;
				typedef typename magician::game_end game_end;
				typedef typename magician::pin_pad_code original;
				typedef typename magician::pin_code code;
				typedef typename magician::futuristic_safe_controller::magnetic_lock lock;
				typedef typename magician::futuristic_safe_controller::rfid_reader rfid;
				typedef typename magician::futuristic_safe_controller::debouncer key_switch;
				typedef typename magician::futuristic_safe_controller::pin_pad pin_pad;
				typedef typename magician::rfid_reader_code rfid_reader_code;

					(void)0; { 
        const uint16_t v = code::value();
        code::value(0);
        if(v == original::value())
        {
          timer::stop();

          lock::value(0);
          game_end::value(1);
        }
       }
				}
			};
			typedef wic::event<pin_code_test_alias_safe_activation_config> pin_code_test_alias_safe_activation;

			/// pin_timeout ///		
			struct pin_timeout_config
			{
				constexpr static const char *name = "ddf::magician::pin_timeout";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x290;
				static bool cfg_condition()
				{
									typedef typename magician::pin_timeout_timer timer;
				typedef typename magician::pin_code code;

					return (true && (  timer::value() > 25  ));
				}
				static void cfg_action()
				{
									typedef typename magician::pin_timeout_timer timer;
				typedef typename magician::pin_code code;

					(void)0; { 
        timer::stop();
        timer::reset();
        code::value(0);
       }
				}
			};
			typedef wic::event<pin_timeout_config> pin_timeout;

			/// planning_wall_puzzle ///		
			struct planning_wall_puzzle_config
			{
				constexpr static const char *name = "ddf::magician::planning_wall_puzzle";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x1e0;
				static bool cfg_condition()
				{
									typedef typename magician::design_board_controller::linear_magnetic_sensor_1 sensor_1;
				typedef typename magician::design_board_controller::linear_magnetic_sensor_2 sensor_2;
				typedef typename magician::design_board_controller::linear_magnetic_sensor_3 sensor_3;
				typedef typename magician::design_board_controller::magnetic_lock lock;

					return (true && (  
          sensor_1::value() &&
          sensor_2::value() &&
          sensor_3::value()
       ));
				}
				static void cfg_action()
				{
									typedef typename magician::design_board_controller::linear_magnetic_sensor_1 sensor_1;
				typedef typename magician::design_board_controller::linear_magnetic_sensor_2 sensor_2;
				typedef typename magician::design_board_controller::linear_magnetic_sensor_3 sensor_3;
				typedef typename magician::design_board_controller::magnetic_lock lock;

					(void)0; {  lock::value(0);  }
				}
			};
			typedef wic::event<planning_wall_puzzle_config> planning_wall_puzzle;

			/// rfid_tag_correct ///		
			struct rfid_tag_correct_config
			{
				constexpr static const char *name = "ddf::magician::rfid_tag_correct";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x230;
				static bool cfg_condition()
				{
									typedef typename magician::futuristic_safe_controller::rfid_reader rfid;
				typedef typename magician::rfid_reader_code rfid_reader_code;
				typedef typename magician::futuristic_safe_controller::addressable_led_strip led;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::futuristic_safe_controller::rfid_reader rfid;
				typedef typename magician::rfid_reader_code rfid_reader_code;
				typedef typename magician::futuristic_safe_controller::addressable_led_strip led;

					(void)0; { 
            led::value_type x = led::value();
            if(rfid_reader_code::value() == rfid::value())
            {
                for(int i = 0; i < 4; ++i)
                {
                    x.led[i].red = 0;
                    x.led[i].green = 255;
                    x.led[i].blue = 0;
                }
            }
            
            else
            {
                for(int i = 0; i < 4; ++i)
                {
                    x.led[i].red = 255;
                    x.led[i].green = 0;
                    x.led[i].blue = 0;
                }
            }
            led::value((led::value_type) x);
            
         }
				}
			};
			typedef wic::event<rfid_tag_correct_config> rfid_tag_correct;

			/// safecode_entry_activaion ///		
			struct safecode_entry_activaion_config
			{
				constexpr static const char *name = "ddf::magician::safecode_entry_activaion";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x250;
				static bool cfg_condition()
				{
									typedef typename magician::futuristic_safe_controller::rfid_reader rfid;
				typedef typename magician::futuristic_safe_controller::debouncer key_switch;
				typedef typename magician::futuristic_safe_controller::pin_pad pin_pad;
				typedef typename magician::pin_code code;
				typedef typename magician::rfid_reader_code rfid_reader_code;

					return (true && (  
        rfid::value() == rfid_reader_code::value() &&
        key_switch::value()
       ));
				}
				static void cfg_action()
				{
									typedef typename magician::futuristic_safe_controller::rfid_reader rfid;
				typedef typename magician::futuristic_safe_controller::debouncer key_switch;
				typedef typename magician::futuristic_safe_controller::pin_pad pin_pad;
				typedef typename magician::pin_code code;
				typedef typename magician::rfid_reader_code rfid_reader_code;

					(void)0; {  code::value(0);  }
				}
			};
			typedef wic::event<safecode_entry_activaion_config> safecode_entry_activaion;

			/// timedevent_an_1_event_finished ///		
			struct timedevent_an_1_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_1_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x2f0;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_an_1 at;
				typedef typename magician::timedevent_an_1_timer tmr;
			typedef room_1_content::event_1 event_1_room_1;
			typedef room_2_content::event_1 event_1_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_an_1 at;
				typedef typename magician::timedevent_an_1_timer tmr;
			typedef room_1_content::event_1 event_1_room_1;
			typedef room_2_content::event_1 event_1_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                event_1_room_1::play();
                event_1_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_an_1_event_finished_config> timedevent_an_1_event_finished;

			/// timedevent_an_1_event_gamestate ///		
			struct timedevent_an_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x300;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_1_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_an_1_event_gamestate_config> timedevent_an_1_event_gamestate;

			/// timedevent_an_2_event_finished ///		
			struct timedevent_an_2_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_2_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x3b0;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_an_2 at;
				typedef typename magician::timedevent_an_2_timer tmr;
			typedef room_1_content::event_2 event_2_room_1;
			typedef room_2_content::event_2 event_2_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_an_2 at;
				typedef typename magician::timedevent_an_2_timer tmr;
			typedef room_1_content::event_2 event_2_room_1;
			typedef room_2_content::event_2 event_2_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                event_2_room_1::play();
                event_2_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_an_2_event_finished_config> timedevent_an_2_event_finished;

			/// timedevent_an_2_event_gamestate ///		
			struct timedevent_an_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x3c0;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_2_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_an_2_event_gamestate_config> timedevent_an_2_event_gamestate;

			/// timedevent_an_3_event_finished ///		
			struct timedevent_an_3_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_3_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x3f0;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_an_3 at;
				typedef typename magician::timedevent_an_3_timer tmr;
			typedef room_1_content::event_3 event_3_room_1;
			typedef room_2_content::event_3 event_3_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_an_3 at;
				typedef typename magician::timedevent_an_3_timer tmr;
			typedef room_1_content::event_3 event_3_room_1;
			typedef room_2_content::event_3 event_3_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                event_3_room_1::play();
                event_3_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_an_3_event_finished_config> timedevent_an_3_event_finished;

			/// timedevent_an_3_event_gamestate ///		
			struct timedevent_an_3_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_3_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x400;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_3_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_3_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_an_3_event_gamestate_config> timedevent_an_3_event_gamestate;

			/// timedevent_an_4_event_finished ///		
			struct timedevent_an_4_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_4_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x470;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_an_4 at;
				typedef typename magician::timedevent_an_4_timer tmr;
			typedef room_1_content::event_4 event_4_room_1;
			typedef room_2_content::event_4 event_4_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_an_4 at;
				typedef typename magician::timedevent_an_4_timer tmr;
			typedef room_1_content::event_4 event_4_room_1;
			typedef room_2_content::event_4 event_4_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                event_4_room_1::play();
                event_4_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_an_4_event_finished_config> timedevent_an_4_event_finished;

			/// timedevent_an_4_event_gamestate ///		
			struct timedevent_an_4_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_4_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x480;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_4_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_4_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_an_4_event_gamestate_config> timedevent_an_4_event_gamestate;

			/// timedevent_an_5_event_finished ///		
			struct timedevent_an_5_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_5_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x4b0;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_an_5 at;
				typedef typename magician::timedevent_an_5_timer tmr;
			typedef room_1_content::event_5 event_5_room_1;
			typedef room_2_content::event_5 event_5_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_an_5 at;
				typedef typename magician::timedevent_an_5_timer tmr;
			typedef room_1_content::event_5 event_5_room_1;
			typedef room_2_content::event_5 event_5_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                event_5_room_1::play();
                event_5_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_an_5_event_finished_config> timedevent_an_5_event_finished;

			/// timedevent_an_5_event_gamestate ///		
			struct timedevent_an_5_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_5_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x4c0;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_5_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_5_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_an_5_event_gamestate_config> timedevent_an_5_event_gamestate;

			/// timedevent_an_6_event_finished ///		
			struct timedevent_an_6_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_6_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x530;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_an_6 at;
				typedef typename magician::timedevent_an_6_timer tmr;
			typedef room_1_content::event_6 event_6_room_1;
			typedef room_2_content::event_6 event_6_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_an_6 at;
				typedef typename magician::timedevent_an_6_timer tmr;
			typedef room_1_content::event_6 event_6_room_1;
			typedef room_2_content::event_6 event_6_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                event_6_room_1::play();
                event_6_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_an_6_event_finished_config> timedevent_an_6_event_finished;

			/// timedevent_an_6_event_gamestate ///		
			struct timedevent_an_6_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_an_6_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x540;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_6_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_an_6_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_an_6_event_gamestate_config> timedevent_an_6_event_gamestate;

			/// timedevent_ap_1_event_finished ///		
			struct timedevent_ap_1_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_1_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x330;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_ap_1 at;
				typedef typename magician::timedevent_ap_1_timer tmr;
			typedef room_1_content::applause applause_1_room_1;
			typedef room_2_content::applause applause_1_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_ap_1 at;
				typedef typename magician::timedevent_ap_1_timer tmr;
			typedef room_1_content::applause applause_1_room_1;
			typedef room_2_content::applause applause_1_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                applause_1_room_1::play();
                applause_1_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_ap_1_event_finished_config> timedevent_ap_1_event_finished;

			/// timedevent_ap_1_event_gamestate ///		
			struct timedevent_ap_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x340;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_ap_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_ap_1_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_ap_1_event_gamestate_config> timedevent_ap_1_event_gamestate;

			/// timedevent_ap_2_event_finished ///		
			struct timedevent_ap_2_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_2_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x370;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_ap_2 at;
				typedef typename magician::timedevent_ap_2_timer tmr;
			typedef room_1_content::applause applause_1_room_1;
			typedef room_2_content::applause applause_1_room_2;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_ap_2 at;
				typedef typename magician::timedevent_ap_2_timer tmr;
			typedef room_1_content::applause applause_1_room_1;
			typedef room_2_content::applause applause_1_room_2;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                applause_1_room_1::play();
                applause_1_room_2::play();
             }
				}
			};
			typedef wic::event<timedevent_ap_2_event_finished_config> timedevent_ap_2_event_finished;

			/// timedevent_ap_2_event_gamestate ///		
			struct timedevent_ap_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_ap_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x380;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_ap_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_ap_2_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_ap_2_event_gamestate_config> timedevent_ap_2_event_gamestate;

			/// timedevent_pc_1_event_finished ///		
			struct timedevent_pc_1_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_1_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x430;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_pc_1 at;
				typedef typename magician::timedevent_pc_1_timer tmr;
				typedef typename magician::incoming_call call;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_pc_1 at;
				typedef typename magician::timedevent_pc_1_timer tmr;
				typedef typename magician::incoming_call call;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();

		call::value(3);
                
             }
				}
			};
			typedef wic::event<timedevent_pc_1_event_finished_config> timedevent_pc_1_event_finished;

			/// timedevent_pc_1_event_gamestate ///		
			struct timedevent_pc_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x440;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_pc_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_pc_1_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_pc_1_event_gamestate_config> timedevent_pc_1_event_gamestate;

			/// timedevent_pc_2_event_finished ///		
			struct timedevent_pc_2_event_finished_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_2_event_finished";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x4f0;
				static bool cfg_condition()
				{
									typedef typename magician::timedevent_pc_2 at;
				typedef typename magician::timedevent_pc_2_timer tmr;
				typedef typename magician::incoming_call call;

					return (true && ( 
                at::value() <= tmr::value()
             ));
				}
				static void cfg_action()
				{
									typedef typename magician::timedevent_pc_2 at;
				typedef typename magician::timedevent_pc_2_timer tmr;
				typedef typename magician::incoming_call call;

					(void)0; { 
                tmr::value(at::value());
                tmr::stop();
                call::value(3);
                
             }
				}
			};
			typedef wic::event<timedevent_pc_2_event_finished_config> timedevent_pc_2_event_finished;

			/// timedevent_pc_2_event_gamestate ///		
			struct timedevent_pc_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::magician::timedevent_pc_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x2ffff0;
				static const uint32_t cfg_member_id = 0x500;
				static bool cfg_condition()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_pc_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename magician::gamestate gs;
				typedef typename magician::timedevent_pc_2_timer tmr;

					(void)0; { 
                if(gs::value() == 1)
                tmr::start();
                else
                tmr::stop();
                if(gs::value() == 0)
                tmr::value(0);
             }
				}
			};
			typedef wic::event<timedevent_pc_2_event_gamestate_config> timedevent_pc_2_event_gamestate;
}

	/// Room villa
	namespace villa
	{

			/// control_room_controller
			namespace control_room_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - villa - control_room_controller";
					static const uint32_t cfg_class_id = 0x300030;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// switch_1 ///
				struct switch_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::control_room_controller::switch_1";
					static const uint32_t cfg_class_id = 0x300030;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<switch_1_config> switch_1;

				/// rfid ///
				struct rfid_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::control_room_controller::rfid";
					static const uint32_t cfg_class_id = 0x300030;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::rfid<rfid_config> rfid;

				/// magnetic_lock ///
				struct magnetic_lock_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::control_room_controller::magnetic_lock";
					static const uint32_t cfg_class_id = 0x300030;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_config> magnetic_lock;

				/// debouncer_1 ///
				struct debouncer_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::control_room_controller::debouncer_1";
					static const uint32_t cfg_class_id = 0x300030;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_1_config> debouncer_1;

				/// video_eject ///
				struct video_eject_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::control_room_controller::video_eject";
					static const uint32_t cfg_class_id = 0x300030;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<video_eject_config> video_eject;

			}

			/// desk_controller
			namespace desk_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - villa - desk_controller";
					static const uint32_t cfg_class_id = 0x300020;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer_3 ///
				struct debouncer_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desk_controller::debouncer_3";
					static const uint32_t cfg_class_id = 0x300020;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_3_config> debouncer_3;

				/// debouncer_4 ///
				struct debouncer_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desk_controller::debouncer_4";
					static const uint32_t cfg_class_id = 0x300020;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_4_config> debouncer_4;

			}

			/// desktop_pc
			namespace desktop_pc
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - villa - desktop_pc";
					static const uint32_t cfg_class_id = 0x300050;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// Started ///
				struct started_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::started";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x10;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<started_config> started;

				/// Shutdown ///
				struct shutdown_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::shutdown";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x20;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<shutdown_config> shutdown;

				/// Logged In ///
				struct logged_in_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::logged_in";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x30;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<logged_in_config> logged_in;

				/// Recycled Restore ///
				struct recycled_restore_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::recycled_restore";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x40;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<recycled_restore_config> recycled_restore;

				/// Audioplay started ///
				struct audioplay_started_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::audioplay_started";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x50;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<audioplay_started_config> audioplay_started;

				/// Audioplay finished ///
				struct audioplay_finished_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::audioplay_finished";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x60;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<audioplay_finished_config> audioplay_finished;

				/// Audioplay paused ///
				struct audioplay_paused_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::audioplay_paused";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x70;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<audioplay_paused_config> audioplay_paused;

				/// Restart Game ///
				struct restart_game_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::restart_game";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x80;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<restart_game_config> restart_game;

				/// Audioplay startevent ///
				struct audioplay_startevent_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::audioplay_startevent";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0x90;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<audioplay_startevent_config> audioplay_startevent;

				/// Audiopause pauseevent ///
				struct audiopause_pauseevent_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::desktop_pc::audiopause_pauseevent";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300050;
					static const uint32_t cfg_member_id          = 0xa0;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<audiopause_pauseevent_config> audiopause_pauseevent;

			}

			/// entrance_controller
			namespace entrance_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - villa - entrance_controller";
					static const uint32_t cfg_class_id = 0x300040;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer ///
				struct debouncer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::entrance_controller::debouncer";
					static const uint32_t cfg_class_id = 0x300040;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_config> debouncer;

				/// led ///
				struct led_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::entrance_controller::led";
					static const uint32_t cfg_class_id = 0x300040;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_config> led;

				/// magnetic_sensor ///
				struct magnetic_sensor_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::entrance_controller::magnetic_sensor";
					static const uint32_t cfg_class_id = 0x300040;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_config> magnetic_sensor;

			}

			/// safe_controller
			namespace safe_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - villa - safe_controller";
					static const uint32_t cfg_class_id = 0x300010;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// pin_pad ///
				struct pin_pad_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::safe_controller::pin_pad";
					static const uint32_t cfg_class_id = 0x300010;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 40;
				};
				typedef peripheral::pin_pad<pin_pad_config> pin_pad;

				/// magnetic_lock ///
				struct magnetic_lock_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::safe_controller::magnetic_lock";
					static const uint32_t cfg_class_id = 0x300010;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_config> magnetic_lock;

				/// debouncer_1 ///
				struct debouncer_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::safe_controller::debouncer_1";
					static const uint32_t cfg_class_id = 0x300010;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_1_config> debouncer_1;

				/// debouncer_2 ///
				struct debouncer_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::safe_controller::debouncer_2";
					static const uint32_t cfg_class_id = 0x300010;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_2_config> debouncer_2;

			}

			/// video_device
			namespace video_device
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - villa - video_device";
					static const uint32_t cfg_class_id = 0x300060;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// Started ///
				struct started_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::started";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x10;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<started_config> started;

				/// Shutdown ///
				struct shutdown_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::shutdown";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x20;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<shutdown_config> shutdown;

				/// LiveCam started ///
				struct livecam_started_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::livecam_started";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x30;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<livecam_started_config> livecam_started;

				/// LiveCamSlides started ///
				struct livecamslides_started_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::livecamslides_started";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x40;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<livecamslides_started_config> livecamslides_started;

				/// Restart Game ///
				struct restart_game_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::restart_game";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x50;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<restart_game_config> restart_game;

				/// Start LiveCams ///
				struct start_livecams_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::start_livecams";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x60;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<start_livecams_config> start_livecams;

				/// Stop LiveCams ///
				struct stop_livecams_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::stop_livecams";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x70;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<stop_livecams_config> stop_livecams;

				/// Start Tape ///
				struct start_tape_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::start_tape";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x80;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<start_tape_config> start_tape;

				/// Stop Tape ///
				struct stop_tape_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::stop_tape";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0x90;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<stop_tape_config> stop_tape;

				/// Pause Tape ///
				struct pause_tape_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::pause_tape";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0xa0;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<pause_tape_config> pause_tape;

				/// enabled ///
				struct enabled_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::enabled";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0xb0;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<enabled_config> enabled;

				/// casette_id ///
				struct casette_id_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::casette_id";

					typedef uint64_t cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0xc0;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<casette_id_config> casette_id;

				/// play_ongoing ///
				struct play_ongoing_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::play_ongoing";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0xd0;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<play_ongoing_config> play_ongoing;

				/// livecam_ongoing ///
				struct livecam_ongoing_config : public property_config_base
				{
					constexpr static const char *name = "ddf::villa::video_device::livecam_ongoing";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x300060;
					static const uint32_t cfg_member_id          = 0xe0;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<livecam_ongoing_config> livecam_ongoing;

			}


			/// ComDev Reset ///
			struct comdev_reset_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::comdev_reset";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x1d0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<comdev_reset_config> comdev_reset;

			/// Freezed1 ///
			struct freezed1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::freezed1";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0xa0;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed1_config> freezed1;

			/// Freezed5 ///
			struct freezed5_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::freezed5";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0xb0;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed5_config> freezed5;

			/// GM Help Status ///
			struct gm_help_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::gm_help_status";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x180;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gm_help_status_config> gm_help_status;

			/// GameState ///
			struct gamestate_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::gamestate";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x90;
				static const uint32_t cfg_cooldown_time      = 1000;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gamestate_config> gamestate;

			/// Incoming Call ///
			struct incoming_call_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::incoming_call";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x190;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_config> incoming_call;

			/// Incoming Call Status ///
			struct incoming_call_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::incoming_call_status";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x1a0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_status_config> incoming_call_status;

			/// Restart Game ///
			struct restart_game_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::restart_game";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x170;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<restart_game_config> restart_game;

			/// Text Message ///
			struct text_message_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::text_message";
				typedef std::string cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x1b0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_config> text_message;

			/// Text Message Sender ///
			struct text_message_sender_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::text_message_sender";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x1c0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_sender_config> text_message_sender;

			/// game_end ///
			struct game_end_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::game_end";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x1e0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<game_end_config> game_end;

			/// pin_code ///
			struct pin_code_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::pin_code";
				typedef std::string cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x240;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<pin_code_config> pin_code;

			/// proper_video_casette_played ///
			struct proper_video_casette_played_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::proper_video_casette_played";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x2c0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<proper_video_casette_played_config> proper_video_casette_played;

			/// timedevent_funk_1 ///
			struct timedevent_funk_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x300;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_funk_1_config> timedevent_funk_1;

			/// timedevent_funk_2 ///
			struct timedevent_funk_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x3c0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_funk_2_config> timedevent_funk_2;

			/// timedevent_funk_3 ///
			struct timedevent_funk_3_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_3";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x440;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_funk_3_config> timedevent_funk_3;

			/// timedevent_pc_1 ///
			struct timedevent_pc_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x340;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_1_config> timedevent_pc_1;

			/// timedevent_pc_2 ///
			struct timedevent_pc_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x380;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_2_config> timedevent_pc_2;

			/// timedevent_pc_3 ///
			struct timedevent_pc_3_config : public property_config_base
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_3";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x3ffff0;
				static const uint32_t cfg_member_id          = 0x400;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_3_config> timedevent_pc_3;


			/// room_1
			struct room_1_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 3;
			};
			typedef wic::audio<room_1_config> room_1;

			namespace room_1_content
			{
				struct chord_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::chord";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct careful_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::careful";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::gmhints";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::rules";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::techdiff";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::event_1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Anrufbe_Funk1.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x60;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::event_2";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Anrufbe_Funk2.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x70;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::event_3";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Anrufbe_Funk3.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x80;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct event_4_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::event_4";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Winstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0x90;
				};
				typedef wic::audio_speech<event_4_config> event_4;
				struct event_5_config
				{
					constexpr static const char *name = "ddf::villa::room_1_content::event_5";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Failstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x300080;
					static const uint32_t cfg_member_id = 0xa0;
				};
				typedef wic::audio_speech<event_5_config> event_5;

			}

			/// room_2
			struct room_2_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 2;
			};
			typedef wic::audio<room_2_config> room_2;

			namespace room_2_content
			{
				struct chord_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::chord";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct careful_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::careful";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::gmhints";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::rules";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::techdiff";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::event_1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Anrufbe_Funk1.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x60;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::event_2";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Anrufbe_Funk2.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x70;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::event_3";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Anrufbe_Funk3.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x80;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct event_4_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::event_4";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Winstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0x90;
				};
				typedef wic::audio_speech<event_4_config> event_4;
				struct event_5_config
				{
					constexpr static const char *name = "ddf::villa::room_2_content::event_5";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/Villa/DDF_EscapeRoom_Totenkopf_Failstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x300070;
					static const uint32_t cfg_member_id = 0xa0;
				};
				typedef wic::audio_speech<event_5_config> event_5;

			}

			/// FreezeTimer1
			struct freezetimer1_config
			{
				constexpr static const char *name = "ddf::villa::freezetimer1";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0xd0;
				static const uint32_t cfg_interval  = 3000;
			};
			typedef typename wic::timer<freezetimer1_config> freezetimer1;

			/// FreezeTimer5
			struct freezetimer5_config
			{
				constexpr static const char *name = "ddf::villa::freezetimer5";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0xe0;
				static const uint32_t cfg_interval  = 15000;
			};
			typedef typename wic::timer<freezetimer5_config> freezetimer5;

			/// GameTimer
			struct gametimer_config
			{
				constexpr static const char *name = "ddf::villa::gametimer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0xc0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<gametimer_config> gametimer;

			/// eject_wait
			struct eject_wait_config
			{
				constexpr static const char *name = "ddf::villa::eject_wait";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x200;
				static const uint32_t cfg_interval  = 400;
			};
			typedef typename wic::timer<eject_wait_config> eject_wait;

			/// pin_timeout_timer
			struct pin_timeout_timer_config
			{
				constexpr static const char *name = "ddf::villa::pin_timeout_timer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x250;
				static const uint32_t cfg_interval  = 100;
			};
			typedef typename wic::timer<pin_timeout_timer_config> pin_timeout_timer;

			/// timedevent_funk_1_timer
			struct timedevent_funk_1_timer_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_1_timer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x310;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_funk_1_timer_config> timedevent_funk_1_timer;

			/// timedevent_funk_2_timer
			struct timedevent_funk_2_timer_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_2_timer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x3d0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_funk_2_timer_config> timedevent_funk_2_timer;

			/// timedevent_funk_3_timer
			struct timedevent_funk_3_timer_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_3_timer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x450;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_funk_3_timer_config> timedevent_funk_3_timer;

			/// timedevent_pc_1_timer
			struct timedevent_pc_1_timer_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_1_timer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x350;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_1_timer_config> timedevent_pc_1_timer;

			/// timedevent_pc_2_timer
			struct timedevent_pc_2_timer_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_2_timer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x390;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_2_timer_config> timedevent_pc_2_timer;

			/// timedevent_pc_3_timer
			struct timedevent_pc_3_timer_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_3_timer";
				static const uint32_t cfg_class_id  = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x410;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_3_timer_config> timedevent_pc_3_timer;



			/// Freeze 1 Start ///		
			struct freeze_1_start_config
			{
				constexpr static const char *name = "ddf::villa::freeze_1_start";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x110;
				static bool cfg_condition()
				{
									typedef typename villa::freezed1 fr;
				typedef typename villa::freezetimer1 tmr;
				typedef typename villa::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::freezed1 fr;
				typedef typename villa::freezetimer1 tmr;
				typedef typename villa::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_1_start_config> freeze_1_start;

			/// Freeze 1 Stop ///		
			struct freeze_1_stop_config
			{
				constexpr static const char *name = "ddf::villa::freeze_1_stop";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x120;
				static bool cfg_condition()
				{
									typedef typename villa::freezed1 fr;
				typedef typename villa::freezetimer1 tmr;
				typedef typename villa::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::freezed1 fr;
				typedef typename villa::freezetimer1 tmr;
				typedef typename villa::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_1_stop_config> freeze_1_stop;

			/// Freeze 1 Timeout ///		
			struct freeze_1_timeout_config
			{
				constexpr static const char *name = "ddf::villa::freeze_1_timeout";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x130;
				static bool cfg_condition()
				{
									typedef typename villa::freezetimer1 tmr;
				typedef typename villa::freezed1 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::freezetimer1 tmr;
				typedef typename villa::freezed1 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_1_timeout_config> freeze_1_timeout;

			/// Freeze 5 Start ///		
			struct freeze_5_start_config
			{
				constexpr static const char *name = "ddf::villa::freeze_5_start";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x140;
				static bool cfg_condition()
				{
									typedef typename villa::freezed5 fr;
				typedef typename villa::freezetimer5 tmr;
				typedef typename villa::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::freezed5 fr;
				typedef typename villa::freezetimer5 tmr;
				typedef typename villa::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_5_start_config> freeze_5_start;

			/// Freeze 5 Stop ///		
			struct freeze_5_stop_config
			{
				constexpr static const char *name = "ddf::villa::freeze_5_stop";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x150;
				static bool cfg_condition()
				{
									typedef typename villa::freezed5 fr;
				typedef typename villa::freezetimer5 tmr;
				typedef typename villa::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::freezed5 fr;
				typedef typename villa::freezetimer5 tmr;
				typedef typename villa::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_5_stop_config> freeze_5_stop;

			/// Freeze 5 Timeout ///		
			struct freeze_5_timeout_config
			{
				constexpr static const char *name = "ddf::villa::freeze_5_timeout";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x160;
				static bool cfg_condition()
				{
									typedef typename villa::freezetimer5 tmr;
				typedef typename villa::freezed5 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::freezetimer5 tmr;
				typedef typename villa::freezed5 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_5_timeout_config> freeze_5_timeout;

			/// Game Timer Expired ///		
			struct game_timer_expired_config
			{
				constexpr static const char *name = "ddf::villa::game_timer_expired";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0xf0;
				static bool cfg_condition()
				{
									typedef typename villa::gametimer tmr;
				typedef typename villa::gamestate gs;

					return (true && ( tmr::value() >= 3600 ));
				}
				static void cfg_action()
				{
									typedef typename villa::gametimer tmr;
				typedef typename villa::gamestate gs;

					(void)0; { gs::value(3); }
				}
			};
			typedef wic::event<game_timer_expired_config> game_timer_expired;

			/// answering_machine ///		
			struct answering_machine_config
			{
				constexpr static const char *name = "ddf::villa::answering_machine";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x2b0;
				static bool cfg_condition()
				{
									typedef typename villa::desktop_pc::audioplay_started audio_start;
				typedef typename villa::desktop_pc::audioplay_paused audio_pause;
				typedef typename villa::desk_controller::debouncer_4 voice_recorder;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::desktop_pc::audioplay_started audio_start;
				typedef typename villa::desktop_pc::audioplay_paused audio_pause;
				typedef typename villa::desk_controller::debouncer_4 voice_recorder;

					(void)0; { 
        if(!audio_start::value())
	     	audio_start::value(voice_recorder::value());
	audio_pause::value(!voice_recorder::value());
      }
				}
			};
			typedef wic::event<answering_machine_config> answering_machine;

			/// casette_ejection_event ///		
			struct casette_ejection_event_config
			{
				constexpr static const char *name = "ddf::villa::casette_ejection_event";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x220;
				static bool cfg_condition()
				{
									typedef typename villa::control_room_controller::video_eject eject;
				typedef typename villa::eject_wait eject_wait;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::control_room_controller::video_eject eject;
				typedef typename villa::eject_wait eject_wait;

					(void)0; { 
      eject_wait::stop();
      eject::value(0);
     }
				}
			};
			typedef wic::event<casette_ejection_event_config> casette_ejection_event;

			/// game_end_button_activation ///		
			struct game_end_button_activation_config
			{
				constexpr static const char *name = "ddf::villa::game_end_button_activation";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x2e0;
				static bool cfg_condition()
				{
									typedef typename villa::entrance_controller::debouncer game_end_button;
				typedef typename villa::entrance_controller::led led;
				typedef typename villa::game_end game_end;

					return (true && (  game_end::value()  ));
				}
				static void cfg_action()
				{
									typedef typename villa::entrance_controller::debouncer game_end_button;
				typedef typename villa::entrance_controller::led led;
				typedef typename villa::game_end game_end;

					(void)0; { 
        led::value(1);
     }
				}
			};
			typedef wic::event<game_end_button_activation_config> game_end_button_activation;

			/// game_end_button_push ///		
			struct game_end_button_push_config
			{
				constexpr static const char *name = "ddf::villa::game_end_button_push";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x2f0;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::entrance_controller::debouncer button;
			typedef room_1_content::event_4 winstate_room_1;
			typedef room_2_content::event_4 winstate_room_2;
				typedef typename villa::gametimer timer;
				typedef typename villa::game_end game_end;

					return (true && ( 
        button::value() && game_end::value() 
     ));
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::entrance_controller::debouncer button;
			typedef room_1_content::event_4 winstate_room_1;
			typedef room_2_content::event_4 winstate_room_2;
				typedef typename villa::gametimer timer;
				typedef typename villa::game_end game_end;

					(void)0; { 
        timer::stop();
        winstate_room_1::play();
        winstate_room_2::play();
     }
				}
			};
			typedef wic::event<game_end_button_push_config> game_end_button_push;

			/// game_end_triggered ///		
			struct game_end_triggered_config
			{
				constexpr static const char *name = "ddf::villa::game_end_triggered";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x2d0;
				static bool cfg_condition()
				{
									typedef typename villa::video_device::play_ongoing video_play_ongoing;
				typedef typename villa::proper_video_casette_played proper_video_casette_played;
				typedef typename villa::video_device::casette_id casette_id;
				typedef typename villa::gamestate game_end;

					return (true && ( 
        !video_play_ongoing::value() &&
        casette_id::value() == 1 &&
        proper_video_casette_played::value() == true
     ));
				}
				static void cfg_action()
				{
									typedef typename villa::video_device::play_ongoing video_play_ongoing;
				typedef typename villa::proper_video_casette_played proper_video_casette_played;
				typedef typename villa::video_device::casette_id casette_id;
				typedef typename villa::gamestate game_end;

					(void)0; {  game_end::value(3);  }
				}
			};
			typedef wic::event<game_end_triggered_config> game_end_triggered;

			/// game_start ///		
			struct game_start_config
			{
				constexpr static const char *name = "ddf::villa::game_start";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x1f0;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::game_end game_end;
				typedef typename villa::entrance_controller::magnetic_sensor entrance_door;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::game_end game_end;
				typedef typename villa::entrance_controller::magnetic_sensor entrance_door;

					(void)0; { 
      if(entrance_door::value())
          {
            if((gs::value() == 0) || (gs::value() == 2))
            {
                gs::value(1);
            }
            if(!gs::value())
            {
                game_end::value(0);
            }
            }
          else if(gs::value() == 1)
          {
          gs::value(2);
          }
          
       }
				}
			};
			typedef wic::event<game_start_config> game_start;

			/// gameevent_Game State Changed ///		
			struct gameevent_game_state_changed_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_game_state_changed";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x100;
				static bool cfg_condition()
				{
									typedef typename villa::gametimer tmr;
				typedef typename villa::gamestate gs;
				typedef typename villa::freezed1 fr1;
				typedef typename villa::freezed5 fr5;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gametimer tmr;
				typedef typename villa::gamestate gs;
				typedef typename villa::freezed1 fr1;
				typedef typename villa::freezed5 fr5;

					(void)0; { 
      switch(gs::value())
      {
      	// Not started
      	case 0:
      		tmr::stop();
      		tmr::reset();
      		break;

      	// Started
      	case 1:
      		tmr::start();
      		fr1::value(false);
      		fr5::value(false);
      		break;

      	// Paused
      	case 2:
      		tmr::stop();
      		break;

      	// Finished
      	case 3:
      		tmr::stop();
      		tmr::reset();
      		break;
      }
     }
				}
			};
			typedef wic::event<gameevent_game_state_changed_config> gameevent_game_state_changed;

			/// gameevent_call_accepted ///		
			struct gameevent_call_accepted_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_call_accepted";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x490;
				static bool cfg_condition()
				{
									typedef typename villa::incoming_call_status cs;

					return (true && ( 2 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_accepted_config> gameevent_call_accepted;

			/// gameevent_call_declined ///		
			struct gameevent_call_declined_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_call_declined";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x4a0;
				static bool cfg_condition()
				{
									typedef typename villa::incoming_call_status cs;

					return (true && ( 3 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_declined_config> gameevent_call_declined;

			/// gameevent_call_finished ///		
			struct gameevent_call_finished_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_call_finished";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x4b0;
				static bool cfg_condition()
				{
									typedef typename villa::incoming_call_status cs;

					return (true && ( 4 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_finished_config> gameevent_call_finished;

			/// gameevent_call_missed ///		
			struct gameevent_call_missed_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_call_missed";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x4c0;
				static bool cfg_condition()
				{
									typedef typename villa::incoming_call_status cs;

					return (true && ( 5 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_missed_config> gameevent_call_missed;

			/// gameevent_call_ringing ///		
			struct gameevent_call_ringing_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_call_ringing";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x480;
				static bool cfg_condition()
				{
									typedef typename villa::incoming_call_status cs;

					return (true && ( 1 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_ringing_config> gameevent_call_ringing;

			/// gameevent_casette_eject_trigger ///		
			struct gameevent_casette_eject_trigger_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_casette_eject_trigger";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x210;
				static bool cfg_condition()
				{
									typedef typename villa::control_room_controller::debouncer_1 button;
				typedef typename villa::control_room_controller::video_eject eject;
				typedef typename villa::eject_wait eject_wait;

					return (true && ( 
            button::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename villa::control_room_controller::debouncer_1 button;
				typedef typename villa::control_room_controller::video_eject eject;
				typedef typename villa::eject_wait eject_wait;

					(void)0; { 
            eject::value(1);
            eject_wait::start();
         }
				}
			};
			typedef wic::event<gameevent_casette_eject_trigger_config> gameevent_casette_eject_trigger;

			/// gameevent_finding_the_keys ///		
			struct gameevent_finding_the_keys_config
			{
				constexpr static const char *name = "ddf::villa::gameevent_finding_the_keys";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x230;
				static bool cfg_condition()
				{
									typedef typename villa::safe_controller::debouncer_1 switch_1;
				typedef typename villa::safe_controller::debouncer_2 switch_2;
				typedef typename villa::desk_controller::debouncer_3 switch_3;
				typedef typename villa::control_room_controller::magnetic_lock secret_door;

					return (true && (  
      switch_1::value() &&
      switch_2::value() &&
      switch_3::value()
     ));
				}
				static void cfg_action()
				{
									typedef typename villa::safe_controller::debouncer_1 switch_1;
				typedef typename villa::safe_controller::debouncer_2 switch_2;
				typedef typename villa::desk_controller::debouncer_3 switch_3;
				typedef typename villa::control_room_controller::magnetic_lock secret_door;

					(void)0; {  secret_door::value(0);  }
				}
			};
			typedef wic::event<gameevent_finding_the_keys_config> gameevent_finding_the_keys;

			/// pin_code_accumulation ///		
			struct pin_code_accumulation_config
			{
				constexpr static const char *name = "ddf::villa::pin_code_accumulation";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x260;
				static bool cfg_condition()
				{
									typedef typename villa::pin_timeout_timer timer;
				typedef typename villa::pin_code code;
				typedef typename villa::safe_controller::pin_pad pin_pad;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::pin_timeout_timer timer;
				typedef typename villa::pin_code code;
				typedef typename villa::safe_controller::pin_pad pin_pad;

					(void)0; { 
    	pin_pad::value_type v = pin_pad::value();
	if(!v.state)
		return;
        timer::reset();
        timer::start();
        const uint8_t k = v.key;
        char c;
        if(k < 9)
        c = static_cast<char>(k+49);
        else switch(k)
        {
        case 9 : c = '*'; break;
        case 10: c = '0'; break;
        case 11: c = '#'; break;
        default: c = '?'; break;
        }
        code::value(code::value() + c);
     }
				}
			};
			typedef wic::event<pin_code_accumulation_config> pin_code_accumulation;

			/// pin_timeout ///		
			struct pin_timeout_config
			{
				constexpr static const char *name = "ddf::villa::pin_timeout";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x270;
				static bool cfg_condition()
				{
									typedef typename villa::pin_timeout_timer timer;
				typedef typename villa::pin_code code;

					return (true && (  timer::value() > 25  ));
				}
				static void cfg_action()
				{
									typedef typename villa::pin_timeout_timer timer;
				typedef typename villa::pin_code code;

					(void)0; { 
        timer::stop();
        timer::reset();
        code::value("");
     }
				}
			};
			typedef wic::event<pin_timeout_config> pin_timeout;

			/// the_safe_code ///		
			struct the_safe_code_config
			{
				constexpr static const char *name = "ddf::villa::the_safe_code";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x280;
				static bool cfg_condition()
				{
									typedef typename villa::pin_timeout_timer timer;
				typedef typename villa::pin_code code;
				typedef typename villa::safe_controller::magnetic_lock safe;

					return (true && (  code::value().size() >= 4  ));
				}
				static void cfg_action()
				{
									typedef typename villa::pin_timeout_timer timer;
				typedef typename villa::pin_code code;
				typedef typename villa::safe_controller::magnetic_lock safe;

					(void)0; { 
        const std::string v = code::value();
        code::value("");
        if(v == "4389")
        {
        safe::value(0);
        timer::stop();
        }
        else
        safe::value(1);
     }
				}
			};
			typedef wic::event<the_safe_code_config> the_safe_code;

			/// the_surveillance_Konsole ///		
			struct the_surveillance_konsole_config
			{
				constexpr static const char *name = "ddf::villa::the_surveillance_konsole";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x290;
				static bool cfg_condition()
				{
									typedef typename villa::control_room_controller::switch_1 my_switch;
				typedef typename villa::video_device::enabled enabled;
				typedef typename villa::video_device::start_livecams start_livecams;
				typedef typename villa::video_device::stop_livecams stop_livecams;
				typedef typename villa::video_device::stop_tape stop_tape;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::control_room_controller::switch_1 my_switch;
				typedef typename villa::video_device::enabled enabled;
				typedef typename villa::video_device::start_livecams start_livecams;
				typedef typename villa::video_device::stop_livecams stop_livecams;
				typedef typename villa::video_device::stop_tape stop_tape;

					(void)0; { 
     const bool v = my_switch::value();
     if(v)
     {
     	start_livecams::value(1);
	
     	std::cout << "VILLA: livecams started" << std::endl; 
     }
     else
     {
	 stop_livecams::value(1);
	 stop_tape::value(1);
     	 std::cout << "VILLA: livecams & tape stopped" << std::endl; 
     }
     enabled::value(v);
  }
				}
			};
			typedef wic::event<the_surveillance_konsole_config> the_surveillance_konsole;

			/// timedevent_funk_1_event_finished ///		
			struct timedevent_funk_1_event_finished_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_1_event_finished";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x320;
				static bool cfg_condition()
				{
									typedef typename villa::timedevent_funk_1 at;
				typedef typename villa::timedevent_funk_1_timer tmr;
			typedef room_1_content::event_1 event_1_room_1;
			typedef room_2_content::event_1 event_1_room_2;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename villa::timedevent_funk_1 at;
				typedef typename villa::timedevent_funk_1_timer tmr;
			typedef room_1_content::event_1 event_1_room_1;
			typedef room_2_content::event_1 event_1_room_2;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            event_1_room_1::play();
            event_1_room_2::play();
         }
				}
			};
			typedef wic::event<timedevent_funk_1_event_finished_config> timedevent_funk_1_event_finished;

			/// timedevent_funk_1_event_gamestate ///		
			struct timedevent_funk_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x330;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_funk_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_funk_1_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
                tmr::start();
            else
                tmr::stop();
            if(gs::value() == 0)
                tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_funk_1_event_gamestate_config> timedevent_funk_1_event_gamestate;

			/// timedevent_funk_2_event_finished ///		
			struct timedevent_funk_2_event_finished_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_2_event_finished";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x3e0;
				static bool cfg_condition()
				{
									typedef typename villa::timedevent_funk_2 at;
				typedef typename villa::timedevent_funk_2_timer tmr;
			typedef room_1_content::event_2 event_2_room_1;
			typedef room_2_content::event_2 event_2_room_2;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename villa::timedevent_funk_2 at;
				typedef typename villa::timedevent_funk_2_timer tmr;
			typedef room_1_content::event_2 event_2_room_1;
			typedef room_2_content::event_2 event_2_room_2;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            event_2_room_1::play();
            event_2_room_2::play();
         }
				}
			};
			typedef wic::event<timedevent_funk_2_event_finished_config> timedevent_funk_2_event_finished;

			/// timedevent_funk_2_event_gamestate ///		
			struct timedevent_funk_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x3f0;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_funk_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_funk_2_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
                tmr::start();
            else
                tmr::stop();
            if(gs::value() == 0)
                tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_funk_2_event_gamestate_config> timedevent_funk_2_event_gamestate;

			/// timedevent_funk_3_event_finished ///		
			struct timedevent_funk_3_event_finished_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_3_event_finished";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x460;
				static bool cfg_condition()
				{
									typedef typename villa::timedevent_funk_3 at;
				typedef typename villa::timedevent_funk_3_timer tmr;
			typedef room_1_content::event_3 event_3_room_1;
			typedef room_2_content::event_3 event_3_room_2;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename villa::timedevent_funk_3 at;
				typedef typename villa::timedevent_funk_3_timer tmr;
			typedef room_1_content::event_3 event_3_room_1;
			typedef room_2_content::event_3 event_3_room_2;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            event_3_room_1::play();
            event_3_room_2::play();
         }
				}
			};
			typedef wic::event<timedevent_funk_3_event_finished_config> timedevent_funk_3_event_finished;

			/// timedevent_funk_3_event_gamestate ///		
			struct timedevent_funk_3_event_gamestate_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_funk_3_event_gamestate";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x470;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_funk_3_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_funk_3_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_funk_3_event_gamestate_config> timedevent_funk_3_event_gamestate;

			/// timedevent_pc_1_event_finished ///		
			struct timedevent_pc_1_event_finished_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_1_event_finished";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x360;
				static bool cfg_condition()
				{
									typedef typename villa::timedevent_pc_1 at;
				typedef typename villa::timedevent_pc_1_timer tmr;
				typedef typename villa::incoming_call call;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename villa::timedevent_pc_1 at;
				typedef typename villa::timedevent_pc_1_timer tmr;
				typedef typename villa::incoming_call call;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            call::value(6);
            
         }
				}
			};
			typedef wic::event<timedevent_pc_1_event_finished_config> timedevent_pc_1_event_finished;

			/// timedevent_pc_1_event_gamestate ///		
			struct timedevent_pc_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x370;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_pc_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_pc_1_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
                tmr::start();
            else
                tmr::stop();
            if(gs::value() == 0)
                tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_pc_1_event_gamestate_config> timedevent_pc_1_event_gamestate;

			/// timedevent_pc_2_event_finished ///		
			struct timedevent_pc_2_event_finished_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_2_event_finished";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x3a0;
				static bool cfg_condition()
				{
									typedef typename villa::timedevent_pc_2 at;
				typedef typename villa::timedevent_pc_2_timer tmr;
				typedef typename villa::incoming_call call;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename villa::timedevent_pc_2 at;
				typedef typename villa::timedevent_pc_2_timer tmr;
				typedef typename villa::incoming_call call;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
	    call::value(6);            
         }
				}
			};
			typedef wic::event<timedevent_pc_2_event_finished_config> timedevent_pc_2_event_finished;

			/// timedevent_pc_2_event_gamestate ///		
			struct timedevent_pc_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x3b0;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_pc_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_pc_2_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
                tmr::start();
            else
                tmr::stop();
            if(gs::value() == 0)
                tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_pc_2_event_gamestate_config> timedevent_pc_2_event_gamestate;

			/// timedevent_pc_3_event_finished ///		
			struct timedevent_pc_3_event_finished_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_3_event_finished";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x420;
				static bool cfg_condition()
				{
									typedef typename villa::timedevent_pc_3 at;
				typedef typename villa::timedevent_pc_3_timer tmr;
				typedef typename villa::incoming_call call;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename villa::timedevent_pc_3 at;
				typedef typename villa::timedevent_pc_3_timer tmr;
				typedef typename villa::incoming_call call;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            call::value(7);
         }
				}
			};
			typedef wic::event<timedevent_pc_3_event_finished_config> timedevent_pc_3_event_finished;

			/// timedevent_pc_3_event_gamestate ///		
			struct timedevent_pc_3_event_gamestate_config
			{
				constexpr static const char *name = "ddf::villa::timedevent_pc_3_event_gamestate";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x430;
				static bool cfg_condition()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_pc_3_timer tmr;
				typedef typename villa::incoming_call call;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename villa::gamestate gs;
				typedef typename villa::timedevent_pc_3_timer tmr;
				typedef typename villa::incoming_call call;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
	    call::value(8);
         }
				}
			};
			typedef wic::event<timedevent_pc_3_event_gamestate_config> timedevent_pc_3_event_gamestate;

			/// video_playing ///		
			struct video_playing_config
			{
				constexpr static const char *name = "ddf::villa::video_playing";
				static const uint32_t cfg_class_id = 0x3ffff0;
				static const uint32_t cfg_member_id = 0x2a0;
				static bool cfg_condition()
				{
									typedef typename villa::control_room_controller::rfid rfid;
				typedef typename villa::video_device::enabled enabled;
				typedef typename villa::video_device::casette_id casette_id;
				typedef typename villa::video_device::start_tape start_tape;
				typedef typename villa::video_device::stop_tape stop_tape;

					return (true && ( enabled::value() ));
				}
				static void cfg_action()
				{
									typedef typename villa::control_room_controller::rfid rfid;
				typedef typename villa::video_device::enabled enabled;
				typedef typename villa::video_device::casette_id casette_id;
				typedef typename villa::video_device::start_tape start_tape;
				typedef typename villa::video_device::stop_tape stop_tape;

					(void)0; { 
    switch(rfid::value())
    {
           
           case 0xc044e67:
	   	casette_id::value(0);
     	 	std::cout << "VILLA: playing cassette 1" << std::endl; 
		break;

           
           case 0xc044e9d:
	   	casette_id::value(1);
     	 	std::cout << "VILLA: playing cassette 2" << std::endl; 
		break;

           
           case 0xc044d5d:
	   	casette_id::value(2);
     	 	std::cout << "VILLA: playing cassette 3" << std::endl; 
		break;

           
           case 0xc044e85:
           default:
          	 stop_tape::value(1);
     	 	 std::cout << "VILLA: cassette removed" << std::endl; 
		 return;
    }
    start_tape::value(1); 
   }
				}
			};
			typedef wic::event<video_playing_config> video_playing;
}

	/// Room junkyard
	namespace junkyard
	{

			/// email_client
			namespace email_client
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - junkyard - email_client";
					static const uint32_t cfg_class_id = 0x400040;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// Started ///
				struct started_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::email_client::started";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x400040;
					static const uint32_t cfg_member_id          = 0x10;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<started_config> started;

				/// Shutdown ///
				struct shutdown_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::email_client::shutdown";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x400040;
					static const uint32_t cfg_member_id          = 0x20;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<shutdown_config> shutdown;

				/// Restart Game ///
				struct restart_game_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::email_client::restart_game";

					typedef bool cfg_value_type;

					static const uint32_t cfg_class_id           = 0x400040;
					static const uint32_t cfg_member_id          = 0x30;
					static const uint32_t cfg_cooldown_time      = 0;
				};
				typedef property_external<restart_game_config> restart_game;

			}

			/// entrance_controller
			namespace entrance_controller
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - junkyard - entrance_controller";
					static const uint32_t cfg_class_id = 0x400030;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer ///
				struct debouncer_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::entrance_controller::debouncer";
					static const uint32_t cfg_class_id = 0x400030;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_config> debouncer;

				/// led ///
				struct led_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::entrance_controller::led";
					static const uint32_t cfg_class_id = 0x400030;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<led_config> led;

				/// magnetic_sensor ///
				struct magnetic_sensor_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::entrance_controller::magnetic_sensor";
					static const uint32_t cfg_class_id = 0x400030;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<magnetic_sensor_config> magnetic_sensor;

			}

			/// secret_box_controller_1
			namespace secret_box_controller_1
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - junkyard - secret_box_controller_1";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// button_grid ///
				struct button_grid_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::button_grid";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::pin_pad<button_grid_config> button_grid;

				/// debouncer_1 ///
				struct debouncer_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::debouncer_1";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_1_config> debouncer_1;

				/// debouncer_2 ///
				struct debouncer_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::debouncer_2";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_2_config> debouncer_2;

				/// debouncer_3 ///
				struct debouncer_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::debouncer_3";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_3_config> debouncer_3;

				/// debouncer_4 ///
				struct debouncer_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::debouncer_4";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_4_config> debouncer_4;

				/// debouncer_5 ///
				struct debouncer_5_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::debouncer_5";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x60;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_5_config> debouncer_5;

				/// debouncer_6 ///
				struct debouncer_6_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::debouncer_6";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x70;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_6_config> debouncer_6;

				/// debouncer_7 ///
				struct debouncer_7_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::debouncer_7";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x80;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_7_config> debouncer_7;

				/// magnetic_lock_1 ///
				struct magnetic_lock_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::magnetic_lock_1";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0x90;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_1_config> magnetic_lock_1;

				/// magnetic_lock_2 ///
				struct magnetic_lock_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::magnetic_lock_2";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0xa0;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_2_config> magnetic_lock_2;

				/// magnetic_lock_3 ///
				struct magnetic_lock_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::magnetic_lock_3";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0xb0;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_3_config> magnetic_lock_3;

				/// magnetic_lock_4 ///
				struct magnetic_lock_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::magnetic_lock_4";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0xc0;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_4_config> magnetic_lock_4;
				struct addressable_led_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_1::addressable_led";
					static const uint32_t cfg_class_id = 0x400010;
					static const uint32_t cfg_member_id = 0xd0;
					static const uint32_t cfg_cooldown_time = 50;
					static const uint32_t cfg_led_count = 50;
				};
				typedef peripheral::addressable_led_strip<addressable_led_config> addressable_led;

			}

			/// secret_box_controller_2
			namespace secret_box_controller_2
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - junkyard - secret_box_controller_2";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint16_t cfg_multiplicity = 1;
				};
				typedef wic::device_role<device_role_config> device_role;

				/// debouncer_1 ///
				struct debouncer_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_1";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x10;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_1_config> debouncer_1;

				/// debouncer_2 ///
				struct debouncer_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_2";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x20;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_2_config> debouncer_2;

				/// debouncer_3 ///
				struct debouncer_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_3";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x30;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_3_config> debouncer_3;

				/// debouncer_4 ///
				struct debouncer_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_4";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x40;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_4_config> debouncer_4;

				/// debouncer_5 ///
				struct debouncer_5_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_5";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x50;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_5_config> debouncer_5;

				/// debouncer_6 ///
				struct debouncer_6_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_6";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x60;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_6_config> debouncer_6;

				/// debouncer_7 ///
				struct debouncer_7_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_7";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x70;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_7_config> debouncer_7;

				/// debouncer_8 ///
				struct debouncer_8_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_8";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x80;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_8_config> debouncer_8;

				/// debouncer_9 ///
				struct debouncer_9_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_9";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x90;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_9_config> debouncer_9;

				/// debouncer_10 ///
				struct debouncer_10_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_10";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0xa0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_10_config> debouncer_10;

				/// light_controller ///
				struct light_controller_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::light_controller";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0xb0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_output<light_controller_config> light_controller;

				/// debouncer_12 ///
				struct debouncer_12_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::debouncer_12";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0xc0;
					static const uint32_t cfg_cooldown_time = 50;
				};
				typedef peripheral::gpio_input<debouncer_12_config> debouncer_12;

				/// magnetic_lock_1 ///
				struct magnetic_lock_1_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::magnetic_lock_1";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0xd0;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_1_config> magnetic_lock_1;

				/// magnetic_lock_2 ///
				struct magnetic_lock_2_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::magnetic_lock_2";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0xe0;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_2_config> magnetic_lock_2;

				/// magnetic_lock_3 ///
				struct magnetic_lock_3_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::magnetic_lock_3";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0xf0;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_3_config> magnetic_lock_3;

				/// magnetic_lock_4 ///
				struct magnetic_lock_4_config : public property_config_base
				{
					constexpr static const char *name = "ddf::junkyard::secret_box_controller_2::magnetic_lock_4";
					static const uint32_t cfg_class_id = 0x400020;
					static const uint32_t cfg_member_id = 0x100;
					static const uint32_t cfg_cooldown_time = 200;
				};
				typedef peripheral::gpio_output<magnetic_lock_4_config> magnetic_lock_4;

			}


			/// ComDev Reset ///
			struct comdev_reset_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::comdev_reset";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x1b0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<comdev_reset_config> comdev_reset;

			/// Freezed1 ///
			struct freezed1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::freezed1";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x80;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed1_config> freezed1;

			/// Freezed5 ///
			struct freezed5_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::freezed5";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x90;
				static const uint32_t cfg_cooldown_time      = 10;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<freezed5_config> freezed5;

			/// GM Help Status ///
			struct gm_help_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::gm_help_status";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x160;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gm_help_status_config> gm_help_status;

			/// GameState ///
			struct gamestate_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::gamestate";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x70;
				static const uint32_t cfg_cooldown_time      = 1000;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<gamestate_config> gamestate;

			/// Incoming Call ///
			struct incoming_call_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::incoming_call";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x170;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_config> incoming_call;

			/// Incoming Call Status ///
			struct incoming_call_status_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::incoming_call_status";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x180;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<incoming_call_status_config> incoming_call_status;

			/// Restart Game ///
			struct restart_game_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::restart_game";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x150;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<restart_game_config> restart_game;

			/// Text Message ///
			struct text_message_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::text_message";
				typedef std::string cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x190;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_config> text_message;

			/// Text Message Sender ///
			struct text_message_sender_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::text_message_sender";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x1a0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<text_message_sender_config> text_message_sender;

			/// correct_notes ///
			struct correct_notes_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::correct_notes";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x220;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<correct_notes_config> correct_notes;

			/// game_end ///
			struct game_end_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::game_end";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x1e0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<game_end_config> game_end;

			/// last_led_index ///
			struct last_led_index_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::last_led_index";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x1d0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<last_led_index_config> last_led_index;

			/// led_timer_start ///
			struct led_timer_start_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::led_timer_start";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x1c0;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<led_timer_start_config> led_timer_start;

			/// lock_pick_1_pressed ///
			struct lock_pick_1_pressed_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::lock_pick_1_pressed";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x240;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<lock_pick_1_pressed_config> lock_pick_1_pressed;

			/// lock_pick_2_pressed ///
			struct lock_pick_2_pressed_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::lock_pick_2_pressed";
				typedef bool cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x250;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<lock_pick_2_pressed_config> lock_pick_2_pressed;

			/// timedevent_pc_1 ///
			struct timedevent_pc_1_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_1";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x340;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_1_config> timedevent_pc_1;

			/// timedevent_pc_2 ///
			struct timedevent_pc_2_config : public property_config_base
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_2";
				typedef uint64_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x4ffff0;
				static const uint32_t cfg_member_id          = 0x380;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<timedevent_pc_2_config> timedevent_pc_2;


			/// room_1
			struct room_1_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 5;
			};
			typedef wic::audio<room_1_config> room_1;

			namespace room_1_content
			{
				struct chord_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::chord";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct piano_a1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_a1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/a1.wav";
				};
				typedef wic::audio_effect<piano_a1_config> piano_a1;
				struct piano_b1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_b1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/b1.wav";
				};
				typedef wic::audio_effect<piano_b1_config> piano_b1;
				struct piano_c1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_c1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/c1.wav";
				};
				typedef wic::audio_effect<piano_c1_config> piano_c1;
				struct piano_c2_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_c2";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/c2.wav";
				};
				typedef wic::audio_effect<piano_c2_config> piano_c2;
				struct piano_d1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_d1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/d1.wav";
				};
				typedef wic::audio_effect<piano_d1_config> piano_d1;
				struct piano_d2_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_d2";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/d2.wav";
				};
				typedef wic::audio_effect<piano_d2_config> piano_d2;
				struct piano_e1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_e1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/e1.wav";
				};
				typedef wic::audio_effect<piano_e1_config> piano_e1;
				struct piano_f1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_f1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/f1.wav";
				};
				typedef wic::audio_effect<piano_f1_config> piano_f1;
				struct piano_g1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::piano_g1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/g1.wav";
				};
				typedef wic::audio_effect<piano_g1_config> piano_g1;
				struct careful_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::careful";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::gmhints";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::rules";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::techdiff";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::event_1";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Event_1.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0xf0;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::event_2";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Event_2.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0x100;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::event_3";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Intro_Musik.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0x110;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct event_4_config
				{
					constexpr static const char *name = "ddf::junkyard::room_1_content::event_4";
					typedef room_1 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Winstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x400060;
					static const uint32_t cfg_member_id = 0x120;
				};
				typedef wic::audio_speech<event_4_config> event_4;

			}

			/// room_2
			struct room_2_config
			{
                		static const uint8_t cfg_device = 2;
				static const uint8_t cfg_channel = 4;
			};
			typedef wic::audio<room_2_config> room_2;

			namespace room_2_content
			{
				struct chord_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::chord";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/chord.wav";
				};
				typedef wic::audio_effect<chord_config> chord;
				struct piano_a1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_a1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/a1.wav";
				};
				typedef wic::audio_effect<piano_a1_config> piano_a1;
				struct piano_b1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_b1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/b1.wav";
				};
				typedef wic::audio_effect<piano_b1_config> piano_b1;
				struct piano_c1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_c1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/c1.wav";
				};
				typedef wic::audio_effect<piano_c1_config> piano_c1;
				struct piano_c2_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_c2";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/c2.wav";
				};
				typedef wic::audio_effect<piano_c2_config> piano_c2;
				struct piano_d1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_d1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/d1.wav";
				};
				typedef wic::audio_effect<piano_d1_config> piano_d1;
				struct piano_d2_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_d2";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/d2.wav";
				};
				typedef wic::audio_effect<piano_d2_config> piano_d2;
				struct piano_e1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_e1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/e1.wav";
				};
				typedef wic::audio_effect<piano_e1_config> piano_e1;
				struct piano_f1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_f1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/f1.wav";
				};
				typedef wic::audio_effect<piano_f1_config> piano_f1;
				struct piano_g1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::piano_g1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/piano/g1.wav";
				};
				typedef wic::audio_effect<piano_g1_config> piano_g1;
				struct careful_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::careful";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/careful.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0x20;
				};
				typedef wic::audio_speech<careful_config> careful;
				struct gmhints_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::gmhints";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/gminc.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0x50;
				};
				typedef wic::audio_speech<gmhints_config> gmhints;
				struct rules_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::rules";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/rules.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0x30;
				};
				typedef wic::audio_speech<rules_config> rules;
				struct techdiff_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::techdiff";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "/usr/share/ddf/audio/soundalert/techdiff.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0x40;
				};
				typedef wic::audio_speech<techdiff_config> techdiff;
				struct event_1_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::event_1";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Event_1.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0xf0;
				};
				typedef wic::audio_speech<event_1_config> event_1;
				struct event_2_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::event_2";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Event_2.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0x100;
				};
				typedef wic::audio_speech<event_2_config> event_2;
				struct event_3_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::event_3";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Intro_Musik.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0x110;
				};
				typedef wic::audio_speech<event_3_config> event_3;
				struct event_4_config
				{
					constexpr static const char *name = "ddf::junkyard::room_2_content::event_4";
					typedef room_2 cfg_audio;
					constexpr static const char *cfg_source = "DDF_EscapeRoom_Schrottplatz_Winstate_Musik.wav";
					static const uint32_t cfg_class_id = 0x400050;
					static const uint32_t cfg_member_id = 0x120;
				};
				typedef wic::audio_speech<event_4_config> event_4;

			}

			/// FreezeTimer1
			struct freezetimer1_config
			{
				constexpr static const char *name = "ddf::junkyard::freezetimer1";
				static const uint32_t cfg_class_id  = 0x4ffff0;
				static const uint32_t cfg_member_id = 0xb0;
				static const uint32_t cfg_interval  = 3000;
			};
			typedef typename wic::timer<freezetimer1_config> freezetimer1;

			/// FreezeTimer5
			struct freezetimer5_config
			{
				constexpr static const char *name = "ddf::junkyard::freezetimer5";
				static const uint32_t cfg_class_id  = 0x4ffff0;
				static const uint32_t cfg_member_id = 0xc0;
				static const uint32_t cfg_interval  = 15000;
			};
			typedef typename wic::timer<freezetimer5_config> freezetimer5;

			/// GameTimer
			struct gametimer_config
			{
				constexpr static const char *name = "ddf::junkyard::gametimer";
				static const uint32_t cfg_class_id  = 0x4ffff0;
				static const uint32_t cfg_member_id = 0xa0;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<gametimer_config> gametimer;

			/// timedevent_pc_1_timer
			struct timedevent_pc_1_timer_config
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_1_timer";
				static const uint32_t cfg_class_id  = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x350;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_1_timer_config> timedevent_pc_1_timer;

			/// timedevent_pc_2_timer
			struct timedevent_pc_2_timer_config
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_2_timer";
				static const uint32_t cfg_class_id  = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x390;
				static const uint32_t cfg_interval  = 1000;
			};
			typedef typename wic::timer<timedevent_pc_2_timer_config> timedevent_pc_2_timer;



			/// Freeze 1 Start ///		
			struct freeze_1_start_config
			{
				constexpr static const char *name = "ddf::junkyard::freeze_1_start";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0xf0;
				static bool cfg_condition()
				{
									typedef typename junkyard::freezed1 fr;
				typedef typename junkyard::freezetimer1 tmr;
				typedef typename junkyard::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::freezed1 fr;
				typedef typename junkyard::freezetimer1 tmr;
				typedef typename junkyard::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_1_start_config> freeze_1_start;

			/// Freeze 1 Stop ///		
			struct freeze_1_stop_config
			{
				constexpr static const char *name = "ddf::junkyard::freeze_1_stop";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x100;
				static bool cfg_condition()
				{
									typedef typename junkyard::freezed1 fr;
				typedef typename junkyard::freezetimer1 tmr;
				typedef typename junkyard::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::freezed1 fr;
				typedef typename junkyard::freezetimer1 tmr;
				typedef typename junkyard::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_1_stop_config> freeze_1_stop;

			/// Freeze 1 Timeout ///		
			struct freeze_1_timeout_config
			{
				constexpr static const char *name = "ddf::junkyard::freeze_1_timeout";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x110;
				static bool cfg_condition()
				{
									typedef typename junkyard::freezetimer1 tmr;
				typedef typename junkyard::freezed1 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::freezetimer1 tmr;
				typedef typename junkyard::freezed1 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_1_timeout_config> freeze_1_timeout;

			/// Freeze 5 Start ///		
			struct freeze_5_start_config
			{
				constexpr static const char *name = "ddf::junkyard::freeze_5_start";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x120;
				static bool cfg_condition()
				{
									typedef typename junkyard::freezed5 fr;
				typedef typename junkyard::freezetimer5 tmr;
				typedef typename junkyard::gamestate gs;

					return (true && ( fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::freezed5 fr;
				typedef typename junkyard::freezetimer5 tmr;
				typedef typename junkyard::gamestate gs;

					(void)0; { 
        gs::value(2);
	tmr::start();
       }
				}
			};
			typedef wic::event<freeze_5_start_config> freeze_5_start;

			/// Freeze 5 Stop ///		
			struct freeze_5_stop_config
			{
				constexpr static const char *name = "ddf::junkyard::freeze_5_stop";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x130;
				static bool cfg_condition()
				{
									typedef typename junkyard::freezed5 fr;
				typedef typename junkyard::freezetimer5 tmr;
				typedef typename junkyard::gamestate gs;

					return (true && ( !fr::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::freezed5 fr;
				typedef typename junkyard::freezetimer5 tmr;
				typedef typename junkyard::gamestate gs;

					(void)0; { 
	tmr::stop();
	tmr::reset();
	gs::value(1);
       }
				}
			};
			typedef wic::event<freeze_5_stop_config> freeze_5_stop;

			/// Freeze 5 Timeout ///		
			struct freeze_5_timeout_config
			{
				constexpr static const char *name = "ddf::junkyard::freeze_5_timeout";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x140;
				static bool cfg_condition()
				{
									typedef typename junkyard::freezetimer5 tmr;
				typedef typename junkyard::freezed5 fr;

					return (true && ( tmr::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::freezetimer5 tmr;
				typedef typename junkyard::freezed5 fr;

					(void)0; { fr::value(false); }
				}
			};
			typedef wic::event<freeze_5_timeout_config> freeze_5_timeout;

			/// Game Timer Expired ///		
			struct game_timer_expired_config
			{
				constexpr static const char *name = "ddf::junkyard::game_timer_expired";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0xd0;
				static bool cfg_condition()
				{
									typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::gamestate gs;

					return (true && ( tmr::value() >= 3600 ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::gamestate gs;

					(void)0; { gs::value(3); }
				}
			};
			typedef wic::event<game_timer_expired_config> game_timer_expired;

			/// Led strip update ///		
			struct led_strip_update_config
			{
				constexpr static const char *name = "ddf::junkyard::led_strip_update";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x210;
				static bool cfg_condition()
				{
									typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::led_timer_start lts;
				typedef typename junkyard::secret_box_controller_1::addressable_led led;

					return (true && ( lts::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::led_timer_start lts;
				typedef typename junkyard::secret_box_controller_1::addressable_led led;

					(void)0; { 
      typename led::value_type v = led::value();
      int greens = (int)((double)(3600-tmr::value())/(3600-lts::value())*50);
      if(greens > 50)
          greens = 50;

      for(int i=0; i < 50-greens; ++i)
      {
      	v.led[i].red = 0;
      	v.led[i].green = 0;
	v.led[i].blue = 0;
      }
      for(int i=50-greens; i < 50; ++i)
      {
      	v.led[i].red = 0;
      	v.led[i].green = 64;
	v.led[i].blue = 0;
      }
      led::value((led::value_type)v);
     }
				}
			};
			typedef wic::event<led_strip_update_config> led_strip_update;

			/// anamorphic_module ///		
			struct anamorphic_module_config
			{
				constexpr static const char *name = "ddf::junkyard::anamorphic_module";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x2b0;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_2::debouncer_1 switch_1;
				typedef typename junkyard::secret_box_controller_2::debouncer_2 switch_2;
				typedef typename junkyard::secret_box_controller_2::debouncer_3 switch_3;
				typedef typename junkyard::secret_box_controller_2::debouncer_4 switch_4;
				typedef typename junkyard::secret_box_controller_2::debouncer_5 switch_5;
				typedef typename junkyard::secret_box_controller_2::debouncer_6 switch_6;
				typedef typename junkyard::secret_box_controller_2::debouncer_7 switch_7;
				typedef typename junkyard::secret_box_controller_2::debouncer_8 switch_8;
				typedef typename junkyard::secret_box_controller_2::debouncer_9 switch_9;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_4 lock;

					return (true && (  switch_1::value() && switch_5::value() && switch_7::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_2::debouncer_1 switch_1;
				typedef typename junkyard::secret_box_controller_2::debouncer_2 switch_2;
				typedef typename junkyard::secret_box_controller_2::debouncer_3 switch_3;
				typedef typename junkyard::secret_box_controller_2::debouncer_4 switch_4;
				typedef typename junkyard::secret_box_controller_2::debouncer_5 switch_5;
				typedef typename junkyard::secret_box_controller_2::debouncer_6 switch_6;
				typedef typename junkyard::secret_box_controller_2::debouncer_7 switch_7;
				typedef typename junkyard::secret_box_controller_2::debouncer_8 switch_8;
				typedef typename junkyard::secret_box_controller_2::debouncer_9 switch_9;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_4 lock;

					(void)0; {  lock::value(0);  }
				}
			};
			typedef wic::event<anamorphic_module_config> anamorphic_module;

			/// game_end_button_activation ///		
			struct game_end_button_activation_config
			{
				constexpr static const char *name = "ddf::junkyard::game_end_button_activation";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x2d0;
				static bool cfg_condition()
				{
									typedef typename junkyard::entrance_controller::debouncer game_end_button;
				typedef typename junkyard::entrance_controller::led led;
				typedef typename junkyard::game_end game_end;

					return (true && (  game_end::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::entrance_controller::debouncer game_end_button;
				typedef typename junkyard::entrance_controller::led led;
				typedef typename junkyard::game_end game_end;

					(void)0; { 
        led::value(1);
     }
				}
			};
			typedef wic::event<game_end_button_activation_config> game_end_button_activation;

			/// game_end_button_push ///		
			struct game_end_button_push_config
			{
				constexpr static const char *name = "ddf::junkyard::game_end_button_push";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x2e0;
				static bool cfg_condition()
				{
									typedef typename junkyard::gamestate gs;
				typedef typename junkyard::game_end game_end;
				typedef typename junkyard::entrance_controller::debouncer button;
			typedef room_1_content::event_4 winstate_room_1;
			typedef room_2_content::event_4 winstate_room_2;
				typedef typename junkyard::gametimer timer;

					return (true && ( 
        button::value() && game_end::value() >= 1
     ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::gamestate gs;
				typedef typename junkyard::game_end game_end;
				typedef typename junkyard::entrance_controller::debouncer button;
			typedef room_1_content::event_4 winstate_room_1;
			typedef room_2_content::event_4 winstate_room_2;
				typedef typename junkyard::gametimer timer;

					(void)0; { 
        timer::stop();
        winstate_room_1::play();
        winstate_room_2::play();
     }
				}
			};
			typedef wic::event<game_end_button_push_config> game_end_button_push;

			/// game_start ///		
			struct game_start_config
			{
				constexpr static const char *name = "ddf::junkyard::game_start";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x1f0;
				static bool cfg_condition()
				{
									typedef typename junkyard::game_end game_end;
				typedef typename junkyard::entrance_controller::magnetic_sensor entrance_door;

					return (true && (  entrance_door::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::game_end game_end;
				typedef typename junkyard::entrance_controller::magnetic_sensor entrance_door;

					(void)0; { 
        game_end::value(1);
     }
				}
			};
			typedef wic::event<game_start_config> game_start;

			/// gameevent_Game State Changed ///		
			struct gameevent_game_state_changed_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_game_state_changed";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0xe0;
				static bool cfg_condition()
				{
									typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::gamestate gs;
				typedef typename junkyard::freezed1 fr1;
				typedef typename junkyard::freezed5 fr5;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::gamestate gs;
				typedef typename junkyard::freezed1 fr1;
				typedef typename junkyard::freezed5 fr5;

					(void)0; { 
      switch(gs::value())
      {
      	// Not started
      	case 0:
      		tmr::stop();
      		tmr::reset();
      		break;

      	// Started
      	case 1:
      		tmr::start();
      		fr1::value(false);
      		fr5::value(false);
      		break;

      	// Paused
      	case 2:
      		tmr::stop();
      		break;

      	// Finished
      	case 3:
      		tmr::stop();
      		tmr::reset();
      		break;
      }
     }
				}
			};
			typedef wic::event<gameevent_game_state_changed_config> gameevent_game_state_changed;

			/// gameevent_ampmeter_turn_on ///		
			struct gameevent_ampmeter_turn_on_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_ampmeter_turn_on";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x2a0;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_2::debouncer_10 button;
				typedef typename junkyard::secret_box_controller_2::light_controller indicator;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_3 lock;

					return (true && (  button::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_2::debouncer_10 button;
				typedef typename junkyard::secret_box_controller_2::light_controller indicator;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_3 lock;

					(void)0; {  indicator::value(1); lock::value(0);  }
				}
			};
			typedef wic::event<gameevent_ampmeter_turn_on_config> gameevent_ampmeter_turn_on;

			/// gameevent_call_accepted ///		
			struct gameevent_call_accepted_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_call_accepted";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x300;
				static bool cfg_condition()
				{
									typedef typename junkyard::incoming_call_status cs;

					return (true && ( 2 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_accepted_config> gameevent_call_accepted;

			/// gameevent_call_declined ///		
			struct gameevent_call_declined_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_call_declined";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x310;
				static bool cfg_condition()
				{
									typedef typename junkyard::incoming_call_status cs;

					return (true && ( 3 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_declined_config> gameevent_call_declined;

			/// gameevent_call_finished ///		
			struct gameevent_call_finished_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_call_finished";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x320;
				static bool cfg_condition()
				{
									typedef typename junkyard::incoming_call_status cs;

					return (true && ( 4 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_finished_config> gameevent_call_finished;

			/// gameevent_call_missed ///		
			struct gameevent_call_missed_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_call_missed";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x330;
				static bool cfg_condition()
				{
									typedef typename junkyard::incoming_call_status cs;

					return (true && ( 5 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_missed_config> gameevent_call_missed;

			/// gameevent_call_ringing ///		
			struct gameevent_call_ringing_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_call_ringing";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x2f0;
				static bool cfg_condition()
				{
									typedef typename junkyard::incoming_call_status cs;

					return (true && ( 1 == cs::value() ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::incoming_call_status cs;

					(void)0;
				}
			};
			typedef wic::event<gameevent_call_ringing_config> gameevent_call_ringing;

			/// gameevent_labirynth_1 ///		
			struct gameevent_labirynth_1_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_labirynth_1";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x270;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_5 button;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_4 lock;

					return (true && (  button::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_5 button;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_4 lock;

					(void)0; {  lock::value(0);  }
				}
			};
			typedef wic::event<gameevent_labirynth_1_config> gameevent_labirynth_1;

			/// gameevent_labirynth_2 ///		
			struct gameevent_labirynth_2_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_labirynth_2";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x280;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_6 button;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_1 lock;

					return (true && (  button::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_6 button;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_1 lock;

					(void)0; {  lock::value(0);  }
				}
			};
			typedef wic::event<gameevent_labirynth_2_config> gameevent_labirynth_2;

			/// gameevent_labirynth_3 ///		
			struct gameevent_labirynth_3_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_labirynth_3";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x290;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_7 button;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_2 lock;

					return (true && (  button::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_7 button;
				typedef typename junkyard::secret_box_controller_2::magnetic_lock_2 lock;

					(void)0; {  lock::value(0);  }
				}
			};
			typedef wic::event<gameevent_labirynth_3_config> gameevent_labirynth_3;

			/// gameevent_mona_lisa_rescue ///		
			struct gameevent_mona_lisa_rescue_config
			{
				constexpr static const char *name = "ddf::junkyard::gameevent_mona_lisa_rescue";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x2c0;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_2::debouncer_12 picture_switch;
				typedef typename junkyard::gamestate gs;

					return (true && (  picture_switch::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_2::debouncer_12 picture_switch;
				typedef typename junkyard::gamestate gs;

					(void)0; {  gs::value(3);  }
				}
			};
			typedef wic::event<gameevent_mona_lisa_rescue_config> gameevent_mona_lisa_rescue;

			/// lockpick_module ///		
			struct lockpick_module_config
			{
				constexpr static const char *name = "ddf::junkyard::lockpick_module";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x260;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_2 lock_pick_1;
				typedef typename junkyard::secret_box_controller_1::debouncer_3 lock_pick_2;
				typedef typename junkyard::secret_box_controller_1::debouncer_4 lock_pick_3;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_3 lock;
				typedef typename junkyard::lock_pick_1_pressed lock_pick_1_pressed;
				typedef typename junkyard::lock_pick_2_pressed lock_pick_2_pressed;

					return (true && ( 
        lock_pick_1::value() ||
        lock_pick_2::value() ||
        lock_pick_3::value()
     ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_2 lock_pick_1;
				typedef typename junkyard::secret_box_controller_1::debouncer_3 lock_pick_2;
				typedef typename junkyard::secret_box_controller_1::debouncer_4 lock_pick_3;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_3 lock;
				typedef typename junkyard::lock_pick_1_pressed lock_pick_1_pressed;
				typedef typename junkyard::lock_pick_2_pressed lock_pick_2_pressed;

					(void)0; { 
        if(lock_pick_1::value())
            lock_pick_1_pressed::value(true);
        else if(lock_pick_2::value())
            lock_pick_2_pressed::value(lock_pick_1_pressed::value());
        else if(lock_pick_3::value())
        {
            if(lock_pick_1_pressed::value() && lock_pick_2_pressed::value())
                lock::value(0);
	 }
     }
				}
			};
			typedef wic::event<lockpick_module_config> lockpick_module;

			/// piano_key_pressed ///		
			struct piano_key_pressed_config
			{
				constexpr static const char *name = "ddf::junkyard::piano_key_pressed";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x230;
				static bool cfg_condition()
				{
									typedef typename junkyard::correct_notes correct_notes;
				typedef typename junkyard::secret_box_controller_1::button_grid kbd;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_2 lock;
			typedef room_1_content::piano_c1 c1;
			typedef room_1_content::piano_d1 d1;
			typedef room_1_content::piano_e1 e1;
			typedef room_1_content::piano_f1 f1;
			typedef room_1_content::piano_g1 g1;
			typedef room_1_content::piano_a1 a1;
			typedef room_1_content::piano_b1 b1;
			typedef room_1_content::piano_c2 c2;
			typedef room_1_content::piano_d2 d2;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename junkyard::correct_notes correct_notes;
				typedef typename junkyard::secret_box_controller_1::button_grid kbd;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_2 lock;
			typedef room_1_content::piano_c1 c1;
			typedef room_1_content::piano_d1 d1;
			typedef room_1_content::piano_e1 e1;
			typedef room_1_content::piano_f1 f1;
			typedef room_1_content::piano_g1 g1;
			typedef room_1_content::piano_a1 a1;
			typedef room_1_content::piano_b1 b1;
			typedef room_1_content::piano_c2 c2;
			typedef room_1_content::piano_d2 d2;

					(void)0; { 
        
        keystroke_t v = kbd::value();
        if(!v.state)
   	     return;

        switch(v.key)
        {
            case 8:
                c1::play();
                if( (correct_notes::value() == 1)||
                    (correct_notes::value() == 3)||
                    (correct_notes::value() == 5)
		)
                {
                    correct_notes::value(correct_notes::value()+1);
                }
                else
                {
                    correct_notes::value(0);
                }
                break;
            case 7:
                d1::play();
                break;
            case 6:
                e1::play();
                break;
            case 5:
                f1::play();
                if( (correct_notes::value() == 0)||
                    (correct_notes::value() == 2)||
                    (correct_notes::value() == 4)||
                    (correct_notes::value() == 6)
		)
                {
                    correct_notes::value(correct_notes::value()+1);
                }
                else
                {
                    correct_notes::value(0);
                }
                break;
            case 4:
                g1::play();
                break;
            case 3:
                a1::play();
                if(correct_notes::value() == 7)
                {
                    correct_notes::value(correct_notes::value()+1);
                }
                else
                {
                    correct_notes::value(0);
                }
                break;

            case 2:
                b1::play();
                break;

            case 1:
                c2::play();
                if(correct_notes::value() == 8)
                {
                    correct_notes::value(correct_notes::value()+1);
                }
                else
                {
                    correct_notes::value(0);
                }
                break;

            case 0:
                d2::play();
                break;
        }
        if(correct_notes::value() == 9)
        {
            lock::value(0);
        }
     }
				}
			};
			typedef wic::event<piano_key_pressed_config> piano_key_pressed;

			/// timedevent_pc_1_event_finished ///		
			struct timedevent_pc_1_event_finished_config
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_1_event_finished";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x360;
				static bool cfg_condition()
				{
									typedef typename junkyard::timedevent_pc_1 at;
				typedef typename junkyard::timedevent_pc_1_timer tmr;
				typedef typename junkyard::incoming_call call;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::timedevent_pc_1 at;
				typedef typename junkyard::timedevent_pc_1_timer tmr;
				typedef typename junkyard::incoming_call call;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            call::value(0);
            
         }
				}
			};
			typedef wic::event<timedevent_pc_1_event_finished_config> timedevent_pc_1_event_finished;

			/// timedevent_pc_1_event_gamestate ///		
			struct timedevent_pc_1_event_gamestate_config
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_1_event_gamestate";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x370;
				static bool cfg_condition()
				{
									typedef typename junkyard::gamestate gs;
				typedef typename junkyard::timedevent_pc_1_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename junkyard::gamestate gs;
				typedef typename junkyard::timedevent_pc_1_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_pc_1_event_gamestate_config> timedevent_pc_1_event_gamestate;

			/// timedevent_pc_2_event_finished ///		
			struct timedevent_pc_2_event_finished_config
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_2_event_finished";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x3a0;
				static bool cfg_condition()
				{
									typedef typename junkyard::timedevent_pc_2 at;
				typedef typename junkyard::timedevent_pc_2_timer tmr;
				typedef typename junkyard::incoming_call call;

					return (true && ( 
            at::value() <= tmr::value()
         ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::timedevent_pc_2 at;
				typedef typename junkyard::timedevent_pc_2_timer tmr;
				typedef typename junkyard::incoming_call call;

					(void)0; { 
            tmr::value(at::value());
            tmr::stop();
            call::value(1);
            
         }
				}
			};
			typedef wic::event<timedevent_pc_2_event_finished_config> timedevent_pc_2_event_finished;

			/// timedevent_pc_2_event_gamestate ///		
			struct timedevent_pc_2_event_gamestate_config
			{
				constexpr static const char *name = "ddf::junkyard::timedevent_pc_2_event_gamestate";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x3b0;
				static bool cfg_condition()
				{
									typedef typename junkyard::gamestate gs;
				typedef typename junkyard::timedevent_pc_2_timer tmr;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename junkyard::gamestate gs;
				typedef typename junkyard::timedevent_pc_2_timer tmr;

					(void)0; { 
            if(gs::value() == 1)
            tmr::start();
            else
            tmr::stop();
            if(gs::value() == 0)
            tmr::value(0);
         }
				}
			};
			typedef wic::event<timedevent_pc_2_event_gamestate_config> timedevent_pc_2_event_gamestate;

			/// top_opening ///		
			struct top_opening_config
			{
				constexpr static const char *name = "ddf::junkyard::top_opening";
				static const uint32_t cfg_class_id = 0x4ffff0;
				static const uint32_t cfg_member_id = 0x200;
				static bool cfg_condition()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_4 on_switch;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_1 top_lock;
				typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::led_timer_start lts;

					return (true && (  on_switch::value()  ));
				}
				static void cfg_action()
				{
									typedef typename junkyard::secret_box_controller_1::debouncer_4 on_switch;
				typedef typename junkyard::secret_box_controller_1::magnetic_lock_1 top_lock;
				typedef typename junkyard::gametimer tmr;
				typedef typename junkyard::led_timer_start lts;

					(void)0; { 
    	top_lock::value(0);
	lts::value(tmr::value());

     }
				}
			};
			typedef wic::event<top_opening_config> top_opening;
}

	/// Room service
	namespace service
	{

			/// ComDev
			namespace comdev
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - service - ComDev";
					static const uint32_t cfg_class_id = 0x500080;
					static const uint16_t cfg_multiplicity = 4;
				};
				typedef wic::device_role<device_role_config> device_role;

			}

			/// GMClient
			namespace gmclient
			{
				struct device_role_config : public property_config_base
				{
					constexpr static const char *cfg_name = "DDF - service - GMClient";
					static const uint32_t cfg_class_id = 0x500070;
					static const uint16_t cfg_multiplicity = 4;
				};
				typedef wic::device_role<device_role_config> device_role;

			}


			/// ServerCpuStatus ///
			struct servercpustatus_config : public property_config_base
			{
				constexpr static const char *name = "ddf::service::servercpustatus";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x5ffff0;
				static const uint32_t cfg_member_id          = 0x10;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<servercpustatus_config> servercpustatus;

			/// ServerMemoryStatus ///
			struct servermemorystatus_config : public property_config_base
			{
				constexpr static const char *name = "ddf::service::servermemorystatus";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x5ffff0;
				static const uint32_t cfg_member_id          = 0x20;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<servermemorystatus_config> servermemorystatus;

			/// ServerNetworkStatus ///
			struct servernetworkstatus_config : public property_config_base
			{
				constexpr static const char *name = "ddf::service::servernetworkstatus";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x5ffff0;
				static const uint32_t cfg_member_id          = 0x40;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<servernetworkstatus_config> servernetworkstatus;

			/// ServerStorageStatus ///
			struct serverstoragestatus_config : public property_config_base
			{
				constexpr static const char *name = "ddf::service::serverstoragestatus";
				typedef uint8_t cfg_value_type;
				static const uint32_t cfg_class_id           = 0x5ffff0;
				static const uint32_t cfg_member_id          = 0x30;
				static const uint32_t cfg_cooldown_time      = 0;
				static const bool     cfg_commit_change_only = true;
			};
			typedef property_room<serverstoragestatus_config> serverstoragestatus;


			/// StatusTimer
			struct statustimer_config
			{
				constexpr static const char *name = "ddf::service::statustimer";
				static const uint32_t cfg_class_id  = 0x5ffff0;
				static const uint32_t cfg_member_id = 0x50;
				static const uint32_t cfg_interval  = 3000;
			};
			typedef typename wic::timer<statustimer_config> statustimer;



			/// StatusTimerTick ///		
			struct statustimertick_config
			{
				constexpr static const char *name = "ddf::service::statustimertick";
				static const uint32_t cfg_class_id = 0x5ffff0;
				static const uint32_t cfg_member_id = 0x60;
				static bool cfg_condition()
				{
									typedef typename service::statustimer tmr;
				typedef typename service::servercpustatus cpu;
				typedef typename service::servermemorystatus mem;
				typedef typename service::serverstoragestatus dsk;
				typedef typename service::servernetworkstatus net;

					return (true);
				}
				static void cfg_action()
				{
									typedef typename service::statustimer tmr;
				typedef typename service::servercpustatus cpu;
				typedef typename service::servermemorystatus mem;
				typedef typename service::serverstoragestatus dsk;
				typedef typename service::servernetworkstatus net;

					(void)0; { 
      cpu::value((uint8_t)(status::cpu::usage()*255));
      mem::value((uint8_t)((double)status::memory::used()/status::memory::total()*255));
      dsk::value((uint8_t)((double)status::storage::used()/status::storage::total()*255));
      net::value(0);
     }
				}
			};
			typedef wic::event<statustimertick_config> statustimertick;
}

}

static void init()
{
	ddf::pirate::cashier_laser_controller::device_role::init();
	ddf::pirate::cashier_laser_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::cashier_laser_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::cashier_laser_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::cashier_laser_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::cashier_laser_controller::laser::init(ddf::pirate::cashier_laser_controller::device_role::instance());
	ddf::pirate::cashier_laser_controller::laser::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::cashier_laser_controller::laser::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::cashier_laser_controller::laser::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::cashier_laser_controller::laser::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::cashier_laser_controller::lcd::init(ddf::pirate::cashier_laser_controller::device_role::instance());
	ddf::pirate::cashier_laser_controller::lcd::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::cashier_laser_controller::lcd::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::cashier_laser_controller::lcd::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::cashier_laser_controller::lcd::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::cashier_laser_controller::pin_pad::init(ddf::pirate::cashier_laser_controller::device_role::instance());
	ddf::pirate::cashier_laser_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::cashier_laser_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::cashier_laser_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::cashier_laser_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::cashier_laser_controller::cash_box::init(ddf::pirate::cashier_laser_controller::device_role::instance());
	ddf::pirate::cashier_laser_controller::cash_box::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::cashier_laser_controller::cash_box::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::cashier_laser_controller::cash_box::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::cashier_laser_controller::cash_box::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::cashier_laser_controller::switch_1::init(ddf::pirate::cashier_laser_controller::device_role::instance());
	ddf::pirate::cashier_laser_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::cashier_laser_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::cashier_laser_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::cashier_laser_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::cashier_laser_controller::led_strip::init(ddf::pirate::cashier_laser_controller::device_role::instance());
	ddf::pirate::cashier_laser_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::cashier_laser_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::cashier_laser_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::cashier_laser_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::pirate::cashier_laser_controller::device_role>();
	ddf::pirate::entrance_hanger_controller::device_role::init();
	ddf::pirate::entrance_hanger_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::entrance_hanger_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::entrance_hanger_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::entrance_hanger_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::entrance_hanger_controller::debouncer::init(ddf::pirate::entrance_hanger_controller::device_role::instance());
	ddf::pirate::entrance_hanger_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::entrance_hanger_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::entrance_hanger_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::entrance_hanger_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::entrance_hanger_controller::led::init(ddf::pirate::entrance_hanger_controller::device_role::instance());
	ddf::pirate::entrance_hanger_controller::led::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::entrance_hanger_controller::led::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::entrance_hanger_controller::led::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::entrance_hanger_controller::led::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::entrance_hanger_controller::magnetic_sensor::init(ddf::pirate::entrance_hanger_controller::device_role::instance());
	ddf::pirate::entrance_hanger_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::entrance_hanger_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::entrance_hanger_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::entrance_hanger_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::entrance_hanger_controller::debouncer_2::init(ddf::pirate::entrance_hanger_controller::device_role::instance());
	ddf::pirate::entrance_hanger_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::entrance_hanger_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::entrance_hanger_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::entrance_hanger_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::pirate::entrance_hanger_controller::device_role>();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::init();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer::init(ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role::instance());
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::device_role>();
	ddf::pirate::map_controller::device_role::init();
	ddf::pirate::map_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::map_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::map_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::map_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::map_controller::magnetic_sensor_1::init(ddf::pirate::map_controller::device_role::instance());
	ddf::pirate::map_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::map_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::map_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::map_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::map_controller::magnetic_sensor_2::init(ddf::pirate::map_controller::device_role::instance());
	ddf::pirate::map_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::map_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::map_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::map_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::map_controller::led_strip::init(ddf::pirate::map_controller::device_role::instance());
	ddf::pirate::map_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::map_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::map_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::map_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::pirate::map_controller::device_role>();
	ddf::pirate::rex_flipper_controller::device_role::init();
	ddf::pirate::rex_flipper_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::light_controller_1::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::light_controller_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::light_controller_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::light_controller_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::light_controller_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::light_controller_2::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::light_controller_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::light_controller_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::light_controller_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::light_controller_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::light_controller_3::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::light_controller_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::light_controller_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::light_controller_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::light_controller_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::light_controller_4::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::light_controller_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::light_controller_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::light_controller_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::light_controller_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::light_controller_5::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::light_controller_5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::light_controller_5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::light_controller_5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::light_controller_5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::light_controller_6::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::light_controller_6::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::light_controller_6::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::light_controller_6::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::light_controller_6::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::light_controller_7::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::light_controller_7::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::light_controller_7::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::light_controller_7::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::light_controller_7::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::photosensor_1::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::photosensor_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::photosensor_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::photosensor_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::photosensor_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::photosensor_2::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::photosensor_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::photosensor_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::photosensor_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::photosensor_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::photosensor_3::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::photosensor_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::photosensor_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::photosensor_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::photosensor_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::photosensor_4::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::photosensor_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::photosensor_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::photosensor_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::photosensor_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::photosensor_5::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::photosensor_5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::photosensor_5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::photosensor_5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::photosensor_5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::photosensor_6::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::photosensor_6::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::photosensor_6::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::photosensor_6::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::photosensor_6::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::photosensor_7::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::photosensor_7::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::photosensor_7::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::photosensor_7::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::photosensor_7::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::rfid_reader::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::magnetic_lock::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::rex_flipper_controller::led::init(ddf::pirate::rex_flipper_controller::device_role::instance());
	ddf::pirate::rex_flipper_controller::led::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_flipper_controller::led::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_flipper_controller::led::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_flipper_controller::led::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::pirate::rex_flipper_controller::device_role>();
	ddf::pirate::stone_chest_controller::device_role::init();
	ddf::pirate::stone_chest_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::magnetic_sensor_1::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::magnetic_sensor_2::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::magnetic_sensor_3::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::magnetic_sensor_4::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::magnetic_sensor_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::magnetic_sensor_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::magnetic_sensor_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::magnetic_sensor_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::magnetic_sensor_5::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::magnetic_sensor_5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::magnetic_sensor_5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::magnetic_sensor_5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::magnetic_sensor_5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::magnetic_lock_1::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::magnetic_lock_2::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::stone_chest_controller::led_strip::init(ddf::pirate::stone_chest_controller::device_role::instance());
	ddf::pirate::stone_chest_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::stone_chest_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::stone_chest_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::stone_chest_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::pirate::stone_chest_controller::device_role>();

	ddf::pirate::freeze_1_start::init();
	ddf::pirate::freezed1::on_change += ddf::pirate::freeze_1_start::monitor;

	ddf::pirate::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::freeze_1_stop::init();
	ddf::pirate::freezed1::on_change += ddf::pirate::freeze_1_stop::monitor;

	ddf::pirate::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::freeze_1_timeout::init();
	ddf::pirate::freezetimer1::on_value_change += ddf::pirate::freeze_1_timeout::monitor;

	ddf::pirate::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::freeze_5_start::init();
	ddf::pirate::freezed5::on_change += ddf::pirate::freeze_5_start::monitor;

	ddf::pirate::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::freeze_5_stop::init();
	ddf::pirate::freezed5::on_change += ddf::pirate::freeze_5_stop::monitor;

	ddf::pirate::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::freeze_5_timeout::init();
	ddf::pirate::freezetimer5::on_value_change += ddf::pirate::freeze_5_timeout::monitor;

	ddf::pirate::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::game_timer_expired::init();
	ddf::pirate::gametimer::on_value_change += ddf::pirate::game_timer_expired::monitor;

	ddf::pirate::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::chest_opening::init();
	ddf::pirate::stone_chest_controller::magnetic_sensor_5::value::on_change += ddf::pirate::chest_opening::monitor;

	ddf::pirate::chest_opening::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::chest_opening::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::chest_opening::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::chest_opening::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::game_end_button_push::init();
	ddf::pirate::gamestate::on_change += ddf::pirate::game_end_button_push::monitor;
	ddf::pirate::entrance_hanger_controller::debouncer::value::on_change += ddf::pirate::game_end_button_push::monitor;

	ddf::pirate::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::game_ending::init();
	ddf::pirate::game_end::on_change += ddf::pirate::game_ending::monitor;

	ddf::pirate::game_ending::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::game_ending::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::game_ending::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::game_ending::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::game_start::init();
	ddf::pirate::entrance_hanger_controller::magnetic_sensor::value::on_change += ddf::pirate::game_start::monitor;

	ddf::pirate::game_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::game_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::game_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::game_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::gameevent_game_state_changed::init();
	ddf::pirate::gamestate::on_change += ddf::pirate::gameevent_game_state_changed::monitor;

	ddf::pirate::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::hanger_trigger::init();
	ddf::pirate::entrance_hanger_controller::debouncer_2::value::on_change += ddf::pirate::hanger_trigger::monitor;

	ddf::pirate::hanger_trigger::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::hanger_trigger::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::hanger_trigger::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::hanger_trigger::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::knock_accumulate::init();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::value::on_change += ddf::pirate::knock_accumulate::monitor;

	ddf::pirate::knock_accumulate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::knock_accumulate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::knock_accumulate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::knock_accumulate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::knock_timeout::init();

	ddf::pirate::knock_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::knock_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::knock_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::knock_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::knot_puzzle::init();
	ddf::pirate::pin_code::on_change += ddf::pirate::knot_puzzle::monitor;

	ddf::pirate::knot_puzzle::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::knot_puzzle::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::knot_puzzle::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::knot_puzzle::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::laser_turn_off::init();
	ddf::pirate::cashier_laser_controller::switch_1::value::on_change += ddf::pirate::laser_turn_off::monitor;

	ddf::pirate::laser_turn_off::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::laser_turn_off::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::laser_turn_off::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::laser_turn_off::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::pin_code_accumulation::init();
	ddf::pirate::cashier_laser_controller::pin_pad::value::on_change += ddf::pirate::pin_code_accumulation::monitor;

	ddf::pirate::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::pin_timeout::init();
	ddf::pirate::pin_code::on_change += ddf::pirate::pin_timeout::monitor;

	ddf::pirate::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::rex_table::init();

	ddf::pirate::rex_table::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rex_table::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rex_table::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rex_table::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::rotation_update::init();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer::value::on_change += ddf::pirate::rotation_update::monitor;

	ddf::pirate::rotation_update::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::rotation_update::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::rotation_update::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::rotation_update::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::ship_matching::init();
	ddf::pirate::map_controller::magnetic_sensor_1::value::on_change += ddf::pirate::ship_matching::monitor;
	ddf::pirate::map_controller::magnetic_sensor_2::value::on_change += ddf::pirate::ship_matching::monitor;

	ddf::pirate::ship_matching::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::ship_matching::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::ship_matching::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::ship_matching::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::sign_matching::init();
	ddf::pirate::stone_chest_controller::magnetic_sensor_1::value::on_change += ddf::pirate::sign_matching::monitor;
	ddf::pirate::stone_chest_controller::magnetic_sensor_2::value::on_change += ddf::pirate::sign_matching::monitor;
	ddf::pirate::stone_chest_controller::magnetic_sensor_3::value::on_change += ddf::pirate::sign_matching::monitor;
	ddf::pirate::stone_chest_controller::magnetic_sensor_4::value::on_change += ddf::pirate::sign_matching::monitor;

	ddf::pirate::sign_matching::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::sign_matching::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::sign_matching::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::sign_matching::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_an_1_event_finished::init();
	ddf::pirate::timedevent_an_1_timer::on_value_change += ddf::pirate::timedevent_an_1_event_finished::monitor;

	ddf::pirate::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_an_1_event_gamestate::init();
	ddf::pirate::gamestate::on_change += ddf::pirate::timedevent_an_1_event_gamestate::monitor;

	ddf::pirate::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_an_2_event_finished::init();
	ddf::pirate::timedevent_an_2_timer::on_value_change += ddf::pirate::timedevent_an_2_event_finished::monitor;

	ddf::pirate::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_an_2_event_gamestate::init();
	ddf::pirate::gamestate::on_change += ddf::pirate::timedevent_an_2_event_gamestate::monitor;

	ddf::pirate::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_ghost_voice_event_finished::init();
	ddf::pirate::timedevent_ghost_voice_timer::on_value_change += ddf::pirate::timedevent_ghost_voice_event_finished::monitor;

	ddf::pirate::timedevent_ghost_voice_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_ghost_voice_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_ghost_voice_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_ghost_voice_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_ghost_voice_event_gamestate::init();
	ddf::pirate::gamestate::on_change += ddf::pirate::timedevent_ghost_voice_event_gamestate::monitor;

	ddf::pirate::timedevent_ghost_voice_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_ghost_voice_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_ghost_voice_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_ghost_voice_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_pc_1_event_finished::init();
	ddf::pirate::timedevent_pc_1_timer::on_value_change += ddf::pirate::timedevent_pc_1_event_finished::monitor;

	ddf::pirate::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_pc_1_event_gamestate::init();
	ddf::pirate::gamestate::on_change += ddf::pirate::timedevent_pc_1_event_gamestate::monitor;

	ddf::pirate::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_pc_2_event_finished::init();
	ddf::pirate::timedevent_pc_2_timer::on_value_change += ddf::pirate::timedevent_pc_2_event_finished::monitor;

	ddf::pirate::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_pc_2_event_gamestate::init();
	ddf::pirate::gamestate::on_change += ddf::pirate::timedevent_pc_2_event_gamestate::monitor;

	ddf::pirate::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::comdev_reset::init(bool(false));
	ddf::pirate::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::freezed1::init(bool());
	ddf::pirate::freezed1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freezed1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freezed1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freezed1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::freezed5::init(bool());
	ddf::pirate::freezed5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freezed5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freezed5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freezed5::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::gm_help_status::init(bool());
	ddf::pirate::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::pirate::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::pirate::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::pirate::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::pirate::gamestate::init(uint8_t());
	ddf::pirate::gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::incoming_call::init(uint8_t(0xff));
	ddf::pirate::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::incoming_call::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::pirate::incoming_call::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::pirate::incoming_call::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::pirate::incoming_call::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::pirate::incoming_call_status::init(uint8_t());
	ddf::pirate::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::pirate::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::pirate::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::pirate::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::pirate::restart_game::init(bool());
	ddf::pirate::restart_game::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::restart_game::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::restart_game::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::restart_game::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::restart_game::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::pirate::restart_game::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::pirate::restart_game::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::pirate::restart_game::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::pirate::text_message::init(std::string());
	ddf::pirate::text_message::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::text_message::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::text_message::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::text_message::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::text_message::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::pirate::text_message::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::pirate::text_message::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::pirate::text_message::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::pirate::text_message_sender::init(uint8_t(0xff));
	ddf::pirate::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::pirate::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::pirate::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::pirate::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::pirate::game_end::init(uint8_t());
	ddf::pirate::game_end::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::game_end::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::game_end::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::game_end::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::knock_count::init(uint32_t(0));
	ddf::pirate::knock_count::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::knock_count::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::knock_count::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::knock_count::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::pin_code::init(std::string());
	ddf::pirate::pin_code::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::pin_code::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::pin_code::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::pin_code::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_an_1::init(uint64_t(1800));
	ddf::pirate::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_an_2::init(uint64_t(3300));
	ddf::pirate::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_ghost_voice::init(uint64_t(17));
	ddf::pirate::timedevent_ghost_voice::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_ghost_voice::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_ghost_voice::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_ghost_voice::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_pc_1::init(uint64_t(1200));
	ddf::pirate::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::timedevent_pc_2::init(uint64_t(2400));
	ddf::pirate::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::pirate::wheel_last_pos::init(uint16_t(0));
	ddf::pirate::wheel_last_pos::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::wheel_last_pos::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::wheel_last_pos::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::wheel_last_pos::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::room_1::init();
	ddf::pirate::room_1_content::chord::init();
	ddf::pirate::room_1_content::careful::init();

	ddf::pirate::room_1_content::event_1::init();

	ddf::pirate::room_1_content::event_2::init();

	ddf::pirate::room_1_content::event_3::init();

	ddf::pirate::room_1_content::failstate::init();

	ddf::pirate::room_1_content::gmhints::init();

	ddf::pirate::room_1_content::rules::init();

	ddf::pirate::room_1_content::techdiff::init();

	ddf::pirate::room_1_content::winstate::init();


	ddf::pirate::room_2::init();
	ddf::pirate::room_2_content::chord::init();
	ddf::pirate::room_2_content::careful::init();

	ddf::pirate::room_2_content::event_1::init();

	ddf::pirate::room_2_content::event_2::init();

	ddf::pirate::room_2_content::event_3::init();

	ddf::pirate::room_2_content::failstate::init();

	ddf::pirate::room_2_content::gmhints::init();

	ddf::pirate::room_2_content::rules::init();

	ddf::pirate::room_2_content::techdiff::init();

	ddf::pirate::room_2_content::winstate::init();



	ddf::pirate::freezetimer1::init();
	ddf::pirate::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::freezetimer5::init();
	ddf::pirate::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::gametimer::init();
	ddf::pirate::gametimer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::gametimer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::gametimer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::gametimer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::knock_timer::init();
	ddf::pirate::knock_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::knock_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::knock_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::knock_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::pin_timeout_timer::init();
	ddf::pirate::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::timedevent_an_1_timer::init();
	ddf::pirate::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::timedevent_an_2_timer::init();
	ddf::pirate::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::timedevent_ghost_voice_timer::init();
	ddf::pirate::timedevent_ghost_voice_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_ghost_voice_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_ghost_voice_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_ghost_voice_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::timedevent_pc_1_timer::init();
	ddf::pirate::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::pirate::timedevent_pc_2_timer::init();
	ddf::pirate::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::pirate::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::pirate::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::pirate::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));


	ddf::magician::cupboard_controller::device_role::init();
	ddf::magician::cupboard_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::cupboard_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::cupboard_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::cupboard_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::cupboard_controller::debouncer::init(ddf::magician::cupboard_controller::device_role::instance());
	ddf::magician::cupboard_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::cupboard_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::cupboard_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::cupboard_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::cupboard_controller::magnetic_sensor::init(ddf::magician::cupboard_controller::device_role::instance());
	ddf::magician::cupboard_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::cupboard_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::cupboard_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::cupboard_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::cupboard_controller::magnetic_lock::init(ddf::magician::cupboard_controller::device_role::instance());
	ddf::magician::cupboard_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::cupboard_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::cupboard_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::cupboard_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::cupboard_controller::led_strip::init(ddf::magician::cupboard_controller::device_role::instance());
	ddf::magician::cupboard_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::cupboard_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::cupboard_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::cupboard_controller::led_strip::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::magician::cupboard_controller::device_role>();
	ddf::magician::design_board_controller::device_role::init();
	ddf::magician::design_board_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::design_board_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::design_board_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::design_board_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::design_board_controller::linear_magnetic_sensor_1::init(ddf::magician::design_board_controller::device_role::instance());
	ddf::magician::design_board_controller::linear_magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::design_board_controller::linear_magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::design_board_controller::linear_magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::design_board_controller::linear_magnetic_sensor_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::design_board_controller::linear_magnetic_sensor_2::init(ddf::magician::design_board_controller::device_role::instance());
	ddf::magician::design_board_controller::linear_magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::design_board_controller::linear_magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::design_board_controller::linear_magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::design_board_controller::linear_magnetic_sensor_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::design_board_controller::linear_magnetic_sensor_3::init(ddf::magician::design_board_controller::device_role::instance());
	ddf::magician::design_board_controller::linear_magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::design_board_controller::linear_magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::design_board_controller::linear_magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::design_board_controller::linear_magnetic_sensor_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::design_board_controller::magnetic_lock::init(ddf::magician::design_board_controller::device_role::instance());
	ddf::magician::design_board_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::design_board_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::design_board_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::design_board_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::magician::design_board_controller::device_role>();
	ddf::magician::entrance_controller::device_role::init();
	ddf::magician::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::entrance_controller::debouncer::init(ddf::magician::entrance_controller::device_role::instance());
	ddf::magician::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::entrance_controller::led::init(ddf::magician::entrance_controller::device_role::instance());
	ddf::magician::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::entrance_controller::magnetic_sensor::init(ddf::magician::entrance_controller::device_role::instance());
	ddf::magician::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::magician::entrance_controller::device_role>();
	ddf::magician::futuristic_safe_controller::device_role::init();
	ddf::magician::futuristic_safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::futuristic_safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::futuristic_safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::futuristic_safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::futuristic_safe_controller::debouncer::init(ddf::magician::futuristic_safe_controller::device_role::instance());
	ddf::magician::futuristic_safe_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::futuristic_safe_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::futuristic_safe_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::futuristic_safe_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::futuristic_safe_controller::rfid_reader::init(ddf::magician::futuristic_safe_controller::device_role::instance());
	ddf::magician::futuristic_safe_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::futuristic_safe_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::futuristic_safe_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::futuristic_safe_controller::rfid_reader::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::futuristic_safe_controller::pin_pad::init(ddf::magician::futuristic_safe_controller::device_role::instance());
	ddf::magician::futuristic_safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::futuristic_safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::futuristic_safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::futuristic_safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::futuristic_safe_controller::magnetic_lock::init(ddf::magician::futuristic_safe_controller::device_role::instance());
	ddf::magician::futuristic_safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::futuristic_safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::futuristic_safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::futuristic_safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::futuristic_safe_controller::addressable_led_strip::init(ddf::magician::futuristic_safe_controller::device_role::instance());
	ddf::magician::futuristic_safe_controller::addressable_led_strip::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::futuristic_safe_controller::addressable_led_strip::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::futuristic_safe_controller::addressable_led_strip::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::futuristic_safe_controller::addressable_led_strip::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::magician::futuristic_safe_controller::device_role>();

	ddf::magician::freeze_1_start::init();
	ddf::magician::freezed1::on_change += ddf::magician::freeze_1_start::monitor;

	ddf::magician::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::freeze_1_stop::init();
	ddf::magician::freezed1::on_change += ddf::magician::freeze_1_stop::monitor;

	ddf::magician::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::freeze_1_timeout::init();
	ddf::magician::freezetimer1::on_value_change += ddf::magician::freeze_1_timeout::monitor;

	ddf::magician::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::freeze_5_start::init();
	ddf::magician::freezed5::on_change += ddf::magician::freeze_5_start::monitor;

	ddf::magician::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::freeze_5_stop::init();
	ddf::magician::freezed5::on_change += ddf::magician::freeze_5_stop::monitor;

	ddf::magician::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::freeze_5_timeout::init();
	ddf::magician::freezetimer5::on_value_change += ddf::magician::freeze_5_timeout::monitor;

	ddf::magician::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::game_timer_expired::init();
	ddf::magician::gametimer::on_value_change += ddf::magician::game_timer_expired::monitor;

	ddf::magician::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::cupboard_controller_event_for_labyrinth_task::init();
	ddf::magician::cupboard_controller::debouncer::value::on_change += ddf::magician::cupboard_controller_event_for_labyrinth_task::monitor;

	ddf::magician::cupboard_controller_event_for_labyrinth_task::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::cupboard_controller_event_for_labyrinth_task::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::cupboard_controller_event_for_labyrinth_task::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::cupboard_controller_event_for_labyrinth_task::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::door_open_light_turn_on::init();
	ddf::magician::cupboard_controller::magnetic_sensor::value::on_change += ddf::magician::door_open_light_turn_on::monitor;

	ddf::magician::door_open_light_turn_on::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::door_open_light_turn_on::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::door_open_light_turn_on::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::door_open_light_turn_on::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::game_end_button_push::init();
	ddf::magician::game_end::on_change += ddf::magician::game_end_button_push::monitor;
	ddf::magician::gamestate::on_change += ddf::magician::game_end_button_push::monitor;
	ddf::magician::entrance_controller::debouncer::value::on_change += ddf::magician::game_end_button_push::monitor;

	ddf::magician::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::game_ending::init();
	ddf::magician::game_end::on_change += ddf::magician::game_ending::monitor;
	ddf::magician::entrance_controller::debouncer::value::on_change += ddf::magician::game_ending::monitor;

	ddf::magician::game_ending::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::game_ending::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::game_ending::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::game_ending::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::game_start::init();
	ddf::magician::entrance_controller::magnetic_sensor::value::on_change += ddf::magician::game_start::monitor;

	ddf::magician::game_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::game_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::game_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::game_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gameevent_game_state_changed::init();
	ddf::magician::gamestate::on_change += ddf::magician::gameevent_game_state_changed::monitor;

	ddf::magician::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gameevent_call_accepted::init();
	ddf::magician::incoming_call_status::on_change += ddf::magician::gameevent_call_accepted::monitor;

	ddf::magician::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gameevent_call_declined::init();
	ddf::magician::incoming_call_status::on_change += ddf::magician::gameevent_call_declined::monitor;

	ddf::magician::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gameevent_call_finished::init();
	ddf::magician::incoming_call_status::on_change += ddf::magician::gameevent_call_finished::monitor;

	ddf::magician::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gameevent_call_missed::init();
	ddf::magician::incoming_call_status::on_change += ddf::magician::gameevent_call_missed::monitor;

	ddf::magician::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gameevent_call_ringing::init();
	ddf::magician::incoming_call_status::on_change += ddf::magician::gameevent_call_ringing::monitor;

	ddf::magician::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::keyswitch_active::init();
	ddf::magician::futuristic_safe_controller::debouncer::value::on_change += ddf::magician::keyswitch_active::monitor;

	ddf::magician::keyswitch_active::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::keyswitch_active::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::keyswitch_active::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::keyswitch_active::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::pin_code_accumulation::init();
	ddf::magician::futuristic_safe_controller::pin_pad::value::on_change += ddf::magician::pin_code_accumulation::monitor;

	ddf::magician::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::pin_code_test_alias_safe_activation::init();
	ddf::magician::pin_code::on_change += ddf::magician::pin_code_test_alias_safe_activation::monitor;
	ddf::magician::futuristic_safe_controller::rfid_reader::value::on_change += ddf::magician::pin_code_test_alias_safe_activation::monitor;
	ddf::magician::futuristic_safe_controller::debouncer::value::on_change += ddf::magician::pin_code_test_alias_safe_activation::monitor;
	ddf::magician::rfid_reader_code::on_change += ddf::magician::pin_code_test_alias_safe_activation::monitor;

	ddf::magician::pin_code_test_alias_safe_activation::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::pin_code_test_alias_safe_activation::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::pin_code_test_alias_safe_activation::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::pin_code_test_alias_safe_activation::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::pin_timeout::init();
	ddf::magician::pin_code::on_change += ddf::magician::pin_timeout::monitor;

	ddf::magician::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::planning_wall_puzzle::init();
	ddf::magician::design_board_controller::linear_magnetic_sensor_1::value::on_change += ddf::magician::planning_wall_puzzle::monitor;
	ddf::magician::design_board_controller::linear_magnetic_sensor_2::value::on_change += ddf::magician::planning_wall_puzzle::monitor;
	ddf::magician::design_board_controller::linear_magnetic_sensor_3::value::on_change += ddf::magician::planning_wall_puzzle::monitor;

	ddf::magician::planning_wall_puzzle::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::planning_wall_puzzle::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::planning_wall_puzzle::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::planning_wall_puzzle::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::rfid_tag_correct::init();
	ddf::magician::futuristic_safe_controller::rfid_reader::value::on_change += ddf::magician::rfid_tag_correct::monitor;
	ddf::magician::rfid_reader_code::on_change += ddf::magician::rfid_tag_correct::monitor;

	ddf::magician::rfid_tag_correct::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::rfid_tag_correct::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::rfid_tag_correct::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::rfid_tag_correct::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::safecode_entry_activaion::init();
	ddf::magician::futuristic_safe_controller::rfid_reader::value::on_change += ddf::magician::safecode_entry_activaion::monitor;
	ddf::magician::futuristic_safe_controller::debouncer::value::on_change += ddf::magician::safecode_entry_activaion::monitor;
	ddf::magician::rfid_reader_code::on_change += ddf::magician::safecode_entry_activaion::monitor;

	ddf::magician::safecode_entry_activaion::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::safecode_entry_activaion::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::safecode_entry_activaion::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::safecode_entry_activaion::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_1_event_finished::init();
	ddf::magician::timedevent_an_1_timer::on_value_change += ddf::magician::timedevent_an_1_event_finished::monitor;

	ddf::magician::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_1_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_an_1_event_gamestate::monitor;

	ddf::magician::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_2_event_finished::init();
	ddf::magician::timedevent_an_2_timer::on_value_change += ddf::magician::timedevent_an_2_event_finished::monitor;

	ddf::magician::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_2_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_an_2_event_gamestate::monitor;

	ddf::magician::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_3_event_finished::init();
	ddf::magician::timedevent_an_3_timer::on_value_change += ddf::magician::timedevent_an_3_event_finished::monitor;

	ddf::magician::timedevent_an_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_3_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_an_3_event_gamestate::monitor;

	ddf::magician::timedevent_an_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_4_event_finished::init();
	ddf::magician::timedevent_an_4_timer::on_value_change += ddf::magician::timedevent_an_4_event_finished::monitor;

	ddf::magician::timedevent_an_4_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_4_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_4_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_4_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_4_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_an_4_event_gamestate::monitor;

	ddf::magician::timedevent_an_4_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_4_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_4_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_4_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_5_event_finished::init();
	ddf::magician::timedevent_an_5_timer::on_value_change += ddf::magician::timedevent_an_5_event_finished::monitor;

	ddf::magician::timedevent_an_5_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_5_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_5_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_5_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_5_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_an_5_event_gamestate::monitor;

	ddf::magician::timedevent_an_5_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_5_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_5_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_5_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_6_event_finished::init();
	ddf::magician::timedevent_an_6_timer::on_value_change += ddf::magician::timedevent_an_6_event_finished::monitor;

	ddf::magician::timedevent_an_6_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_6_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_6_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_6_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_6_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_an_6_event_gamestate::monitor;

	ddf::magician::timedevent_an_6_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_6_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_6_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_6_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_ap_1_event_finished::init();
	ddf::magician::timedevent_ap_1_timer::on_value_change += ddf::magician::timedevent_ap_1_event_finished::monitor;

	ddf::magician::timedevent_ap_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_ap_1_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_ap_1_event_gamestate::monitor;

	ddf::magician::timedevent_ap_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_ap_2_event_finished::init();
	ddf::magician::timedevent_ap_2_timer::on_value_change += ddf::magician::timedevent_ap_2_event_finished::monitor;

	ddf::magician::timedevent_ap_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_ap_2_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_ap_2_event_gamestate::monitor;

	ddf::magician::timedevent_ap_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_pc_1_event_finished::init();
	ddf::magician::timedevent_pc_1_timer::on_value_change += ddf::magician::timedevent_pc_1_event_finished::monitor;

	ddf::magician::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_pc_1_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_pc_1_event_gamestate::monitor;

	ddf::magician::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_pc_2_event_finished::init();
	ddf::magician::timedevent_pc_2_timer::on_value_change += ddf::magician::timedevent_pc_2_event_finished::monitor;

	ddf::magician::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_pc_2_event_gamestate::init();
	ddf::magician::gamestate::on_change += ddf::magician::timedevent_pc_2_event_gamestate::monitor;

	ddf::magician::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::comdev_reset::init(bool(false));
	ddf::magician::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::freezed1::init(bool());
	ddf::magician::freezed1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freezed1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freezed1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freezed1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::freezed5::init(bool());
	ddf::magician::freezed5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freezed5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freezed5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freezed5::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gm_help_status::init(bool());
	ddf::magician::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::magician::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::magician::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::magician::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::magician::gamestate::init(uint8_t());
	ddf::magician::gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::incoming_call::init(uint8_t(0xff));
	ddf::magician::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::incoming_call::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::magician::incoming_call::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::magician::incoming_call::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::magician::incoming_call::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::magician::incoming_call_status::init(uint8_t());
	ddf::magician::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::magician::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::magician::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::magician::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::magician::restart_game::init(bool());
	ddf::magician::restart_game::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::restart_game::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::restart_game::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::restart_game::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::restart_game::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::magician::restart_game::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::magician::restart_game::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::magician::restart_game::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::magician::text_message::init(std::string());
	ddf::magician::text_message::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::text_message::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::text_message::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::text_message::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::text_message::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::magician::text_message::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::magician::text_message::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::magician::text_message::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::magician::text_message_sender::init(uint8_t(0xff));
	ddf::magician::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::magician::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::magician::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::magician::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::magician::game_end::init(uint8_t());
	ddf::magician::game_end::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::game_end::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::game_end::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::game_end::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::pin_code::init(uint16_t(0));
	ddf::magician::pin_code::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::pin_code::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::pin_code::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::pin_code::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::pin_pad_code::init(uint16_t(5217));
	ddf::magician::pin_pad_code::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::pin_pad_code::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::pin_pad_code::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::pin_pad_code::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::rfid_reader_code::init(uint64_t(0xc044edb));
	ddf::magician::rfid_reader_code::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::rfid_reader_code::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::rfid_reader_code::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::rfid_reader_code::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_1::init(uint64_t(30));
	ddf::magician::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_2::init(uint64_t(600));
	ddf::magician::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_2::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_3::init(uint64_t(1200));
	ddf::magician::timedevent_an_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_3::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_4::init(uint64_t(1800));
	ddf::magician::timedevent_an_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_4::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_5::init(uint64_t(2400));
	ddf::magician::timedevent_an_5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_5::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_an_6::init(uint64_t(3300));
	ddf::magician::timedevent_an_6::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_6::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_6::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_6::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_ap_1::init(uint64_t(42));
	ddf::magician::timedevent_ap_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_ap_2::init(uint64_t(300));
	ddf::magician::timedevent_ap_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_2::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_pc_1::init(uint64_t(1212));
	ddf::magician::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::magician::timedevent_pc_2::init(uint64_t(2412));
	ddf::magician::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::room_1::init();
	ddf::magician::room_1_content::applause::init();
	ddf::magician::room_1_content::chord::init();
	ddf::magician::room_1_content::careful::init();

	ddf::magician::room_1_content::gmhints::init();

	ddf::magician::room_1_content::rules::init();

	ddf::magician::room_1_content::techdiff::init();

	ddf::magician::room_1_content::winstate::init();

	ddf::magician::room_1_content::event_1::init();

	ddf::magician::room_1_content::event_2::init();

	ddf::magician::room_1_content::event_3::init();

	ddf::magician::room_1_content::event_4::init();

	ddf::magician::room_1_content::event_5::init();

	ddf::magician::room_1_content::event_6::init();


	ddf::magician::room_2::init();
	ddf::magician::room_2_content::applause::init();
	ddf::magician::room_2_content::chord::init();
	ddf::magician::room_2_content::careful::init();

	ddf::magician::room_2_content::gmhints::init();

	ddf::magician::room_2_content::rules::init();

	ddf::magician::room_2_content::techdiff::init();

	ddf::magician::room_2_content::winstate::init();

	ddf::magician::room_2_content::event_1::init();

	ddf::magician::room_2_content::event_2::init();

	ddf::magician::room_2_content::event_3::init();

	ddf::magician::room_2_content::event_4::init();

	ddf::magician::room_2_content::event_5::init();

	ddf::magician::room_2_content::event_6::init();



	ddf::magician::freezetimer1::init();
	ddf::magician::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::freezetimer5::init();
	ddf::magician::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::gametimer::init();
	ddf::magician::gametimer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::gametimer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::gametimer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::gametimer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::pin_timeout_timer::init();
	ddf::magician::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_an_1_timer::init();
	ddf::magician::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_an_2_timer::init();
	ddf::magician::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_an_3_timer::init();
	ddf::magician::timedevent_an_3_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_3_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_3_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_3_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_an_4_timer::init();
	ddf::magician::timedevent_an_4_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_4_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_4_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_4_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_an_5_timer::init();
	ddf::magician::timedevent_an_5_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_5_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_5_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_5_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_an_6_timer::init();
	ddf::magician::timedevent_an_6_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_an_6_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_an_6_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_an_6_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_ap_1_timer::init();
	ddf::magician::timedevent_ap_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_ap_2_timer::init();
	ddf::magician::timedevent_ap_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_ap_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_ap_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_ap_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_pc_1_timer::init();
	ddf::magician::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::magician::timedevent_pc_2_timer::init();
	ddf::magician::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::magician::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::magician::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::magician::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));


	ddf::villa::control_room_controller::device_role::init();
	ddf::villa::control_room_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::control_room_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::control_room_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::control_room_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::control_room_controller::switch_1::init(ddf::villa::control_room_controller::device_role::instance());
	ddf::villa::control_room_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::control_room_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::control_room_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::control_room_controller::switch_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::control_room_controller::rfid::init(ddf::villa::control_room_controller::device_role::instance());
	ddf::villa::control_room_controller::rfid::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::control_room_controller::rfid::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::control_room_controller::rfid::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::control_room_controller::rfid::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::control_room_controller::magnetic_lock::init(ddf::villa::control_room_controller::device_role::instance());
	ddf::villa::control_room_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::control_room_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::control_room_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::control_room_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::control_room_controller::debouncer_1::init(ddf::villa::control_room_controller::device_role::instance());
	ddf::villa::control_room_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::control_room_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::control_room_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::control_room_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::control_room_controller::video_eject::init(ddf::villa::control_room_controller::device_role::instance());
	ddf::villa::control_room_controller::video_eject::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::control_room_controller::video_eject::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::control_room_controller::video_eject::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::control_room_controller::video_eject::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::villa::control_room_controller::device_role>();
	ddf::villa::desk_controller::device_role::init();
	ddf::villa::desk_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desk_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desk_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desk_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desk_controller::debouncer_3::init(ddf::villa::desk_controller::device_role::instance());
	ddf::villa::desk_controller::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desk_controller::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desk_controller::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desk_controller::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desk_controller::debouncer_4::init(ddf::villa::desk_controller::device_role::instance());
	ddf::villa::desk_controller::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desk_controller::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desk_controller::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desk_controller::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::villa::desk_controller::device_role>();
	ddf::villa::desktop_pc::device_role::init();
	ddf::villa::desktop_pc::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::started::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::started::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::started::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::started::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::started::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::shutdown::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::shutdown::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::shutdown::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::shutdown::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::shutdown::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::logged_in::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::logged_in::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::logged_in::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::logged_in::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::logged_in::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::recycled_restore::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::recycled_restore::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::recycled_restore::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::recycled_restore::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::recycled_restore::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::audioplay_started::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::audioplay_started::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::audioplay_started::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::audioplay_started::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::audioplay_started::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::audioplay_finished::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::audioplay_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::audioplay_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::audioplay_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::audioplay_finished::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::audioplay_paused::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::audioplay_paused::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::audioplay_paused::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::audioplay_paused::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::audioplay_paused::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::restart_game::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::restart_game::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::restart_game::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::restart_game::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::restart_game::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::audioplay_startevent::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::audioplay_startevent::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::audioplay_startevent::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::audioplay_startevent::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::audioplay_startevent::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::desktop_pc::audiopause_pauseevent::init(ddf::villa::desktop_pc::device_role::instance(),bool());
	ddf::villa::desktop_pc::audiopause_pauseevent::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::desktop_pc::audiopause_pauseevent::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::desktop_pc::audiopause_pauseevent::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::desktop_pc::audiopause_pauseevent::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::villa::desktop_pc::device_role>();
	ddf::villa::entrance_controller::device_role::init();
	ddf::villa::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::entrance_controller::debouncer::init(ddf::villa::entrance_controller::device_role::instance());
	ddf::villa::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::entrance_controller::led::init(ddf::villa::entrance_controller::device_role::instance());
	ddf::villa::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::entrance_controller::magnetic_sensor::init(ddf::villa::entrance_controller::device_role::instance());
	ddf::villa::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::villa::entrance_controller::device_role>();
	ddf::villa::safe_controller::device_role::init();
	ddf::villa::safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::safe_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::safe_controller::pin_pad::init(ddf::villa::safe_controller::device_role::instance());
	ddf::villa::safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::safe_controller::pin_pad::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::safe_controller::magnetic_lock::init(ddf::villa::safe_controller::device_role::instance());
	ddf::villa::safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::safe_controller::magnetic_lock::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::safe_controller::debouncer_1::init(ddf::villa::safe_controller::device_role::instance());
	ddf::villa::safe_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::safe_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::safe_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::safe_controller::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::safe_controller::debouncer_2::init(ddf::villa::safe_controller::device_role::instance());
	ddf::villa::safe_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::safe_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::safe_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::safe_controller::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::villa::safe_controller::device_role>();
	ddf::villa::video_device::device_role::init();
	ddf::villa::video_device::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::started::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::started::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::started::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::started::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::started::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::shutdown::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::shutdown::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::shutdown::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::shutdown::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::shutdown::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::livecam_started::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::livecam_started::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::livecam_started::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::livecam_started::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::livecam_started::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::livecamslides_started::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::livecamslides_started::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::livecamslides_started::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::livecamslides_started::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::livecamslides_started::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::restart_game::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::restart_game::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::restart_game::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::restart_game::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::restart_game::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::start_livecams::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::start_livecams::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::start_livecams::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::start_livecams::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::start_livecams::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::stop_livecams::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::stop_livecams::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::stop_livecams::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::stop_livecams::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::stop_livecams::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::start_tape::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::start_tape::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::start_tape::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::start_tape::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::start_tape::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::stop_tape::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::stop_tape::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::stop_tape::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::stop_tape::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::stop_tape::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::pause_tape::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::pause_tape::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::pause_tape::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::pause_tape::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::pause_tape::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::enabled::init(ddf::villa::video_device::device_role::instance(),bool());
	ddf::villa::video_device::enabled::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::enabled::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::enabled::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::enabled::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::casette_id::init(ddf::villa::video_device::device_role::instance(),uint64_t(0));
	ddf::villa::video_device::casette_id::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::casette_id::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::casette_id::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::casette_id::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::play_ongoing::init(ddf::villa::video_device::device_role::instance(),bool(false));
	ddf::villa::video_device::play_ongoing::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::play_ongoing::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::play_ongoing::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::play_ongoing::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::video_device::livecam_ongoing::init(ddf::villa::video_device::device_role::instance(),bool(false));
	ddf::villa::video_device::livecam_ongoing::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_device::livecam_ongoing::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_device::livecam_ongoing::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_device::livecam_ongoing::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::villa::video_device::device_role>();

	ddf::villa::freeze_1_start::init();
	ddf::villa::freezed1::on_change += ddf::villa::freeze_1_start::monitor;

	ddf::villa::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::freeze_1_stop::init();
	ddf::villa::freezed1::on_change += ddf::villa::freeze_1_stop::monitor;

	ddf::villa::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::freeze_1_timeout::init();
	ddf::villa::freezetimer1::on_value_change += ddf::villa::freeze_1_timeout::monitor;

	ddf::villa::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::freeze_5_start::init();
	ddf::villa::freezed5::on_change += ddf::villa::freeze_5_start::monitor;

	ddf::villa::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::freeze_5_stop::init();
	ddf::villa::freezed5::on_change += ddf::villa::freeze_5_stop::monitor;

	ddf::villa::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::freeze_5_timeout::init();
	ddf::villa::freezetimer5::on_value_change += ddf::villa::freeze_5_timeout::monitor;

	ddf::villa::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::game_timer_expired::init();
	ddf::villa::gametimer::on_value_change += ddf::villa::game_timer_expired::monitor;

	ddf::villa::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::answering_machine::init();
	ddf::villa::desk_controller::debouncer_4::value::on_change += ddf::villa::answering_machine::monitor;

	ddf::villa::answering_machine::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::answering_machine::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::answering_machine::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::answering_machine::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::casette_ejection_event::init();
	ddf::villa::eject_wait::on_value_change += ddf::villa::casette_ejection_event::monitor;

	ddf::villa::casette_ejection_event::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::casette_ejection_event::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::casette_ejection_event::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::casette_ejection_event::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::game_end_button_activation::init();
	ddf::villa::game_end::on_change += ddf::villa::game_end_button_activation::monitor;

	ddf::villa::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::game_end_button_push::init();
	ddf::villa::gamestate::on_change += ddf::villa::game_end_button_push::monitor;
	ddf::villa::entrance_controller::debouncer::value::on_change += ddf::villa::game_end_button_push::monitor;
	ddf::villa::game_end::on_change += ddf::villa::game_end_button_push::monitor;

	ddf::villa::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::game_end_triggered::init();
	ddf::villa::video_device::play_ongoing::on_change += ddf::villa::game_end_triggered::monitor;
	ddf::villa::proper_video_casette_played::on_change += ddf::villa::game_end_triggered::monitor;
	ddf::villa::video_device::casette_id::on_change += ddf::villa::game_end_triggered::monitor;
	ddf::villa::gamestate::on_change += ddf::villa::game_end_triggered::monitor;

	ddf::villa::game_end_triggered::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::game_end_triggered::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::game_end_triggered::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::game_end_triggered::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::game_start::init();
	ddf::villa::entrance_controller::magnetic_sensor::value::on_change += ddf::villa::game_start::monitor;

	ddf::villa::game_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::game_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::game_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::game_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_game_state_changed::init();
	ddf::villa::gamestate::on_change += ddf::villa::gameevent_game_state_changed::monitor;

	ddf::villa::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_call_accepted::init();
	ddf::villa::incoming_call_status::on_change += ddf::villa::gameevent_call_accepted::monitor;

	ddf::villa::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_call_declined::init();
	ddf::villa::incoming_call_status::on_change += ddf::villa::gameevent_call_declined::monitor;

	ddf::villa::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_call_finished::init();
	ddf::villa::incoming_call_status::on_change += ddf::villa::gameevent_call_finished::monitor;

	ddf::villa::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_call_missed::init();
	ddf::villa::incoming_call_status::on_change += ddf::villa::gameevent_call_missed::monitor;

	ddf::villa::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_call_ringing::init();
	ddf::villa::incoming_call_status::on_change += ddf::villa::gameevent_call_ringing::monitor;

	ddf::villa::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_casette_eject_trigger::init();
	ddf::villa::control_room_controller::debouncer_1::value::on_change += ddf::villa::gameevent_casette_eject_trigger::monitor;

	ddf::villa::gameevent_casette_eject_trigger::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_casette_eject_trigger::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_casette_eject_trigger::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_casette_eject_trigger::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gameevent_finding_the_keys::init();
	ddf::villa::safe_controller::debouncer_1::value::on_change += ddf::villa::gameevent_finding_the_keys::monitor;
	ddf::villa::safe_controller::debouncer_2::value::on_change += ddf::villa::gameevent_finding_the_keys::monitor;
	ddf::villa::desk_controller::debouncer_3::value::on_change += ddf::villa::gameevent_finding_the_keys::monitor;

	ddf::villa::gameevent_finding_the_keys::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gameevent_finding_the_keys::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gameevent_finding_the_keys::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gameevent_finding_the_keys::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::pin_code_accumulation::init();
	ddf::villa::safe_controller::pin_pad::value::on_change += ddf::villa::pin_code_accumulation::monitor;

	ddf::villa::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::pin_code_accumulation::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::pin_timeout::init();
	ddf::villa::pin_code::on_change += ddf::villa::pin_timeout::monitor;

	ddf::villa::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::pin_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::the_safe_code::init();
	ddf::villa::pin_code::on_change += ddf::villa::the_safe_code::monitor;

	ddf::villa::the_safe_code::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::the_safe_code::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::the_safe_code::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::the_safe_code::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::the_surveillance_konsole::init();
	ddf::villa::control_room_controller::switch_1::value::on_change += ddf::villa::the_surveillance_konsole::monitor;

	ddf::villa::the_surveillance_konsole::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::the_surveillance_konsole::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::the_surveillance_konsole::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::the_surveillance_konsole::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_1_event_finished::init();
	ddf::villa::timedevent_funk_1_timer::on_value_change += ddf::villa::timedevent_funk_1_event_finished::monitor;

	ddf::villa::timedevent_funk_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_1_event_gamestate::init();
	ddf::villa::gamestate::on_change += ddf::villa::timedevent_funk_1_event_gamestate::monitor;

	ddf::villa::timedevent_funk_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_2_event_finished::init();
	ddf::villa::timedevent_funk_2_timer::on_value_change += ddf::villa::timedevent_funk_2_event_finished::monitor;

	ddf::villa::timedevent_funk_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_2_event_gamestate::init();
	ddf::villa::gamestate::on_change += ddf::villa::timedevent_funk_2_event_gamestate::monitor;

	ddf::villa::timedevent_funk_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_3_event_finished::init();
	ddf::villa::timedevent_funk_3_timer::on_value_change += ddf::villa::timedevent_funk_3_event_finished::monitor;

	ddf::villa::timedevent_funk_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_3_event_gamestate::init();
	ddf::villa::gamestate::on_change += ddf::villa::timedevent_funk_3_event_gamestate::monitor;

	ddf::villa::timedevent_funk_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_1_event_finished::init();
	ddf::villa::timedevent_pc_1_timer::on_value_change += ddf::villa::timedevent_pc_1_event_finished::monitor;

	ddf::villa::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_1_event_gamestate::init();
	ddf::villa::gamestate::on_change += ddf::villa::timedevent_pc_1_event_gamestate::monitor;

	ddf::villa::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_2_event_finished::init();
	ddf::villa::timedevent_pc_2_timer::on_value_change += ddf::villa::timedevent_pc_2_event_finished::monitor;

	ddf::villa::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_2_event_gamestate::init();
	ddf::villa::gamestate::on_change += ddf::villa::timedevent_pc_2_event_gamestate::monitor;

	ddf::villa::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_3_event_finished::init();
	ddf::villa::timedevent_pc_3_timer::on_value_change += ddf::villa::timedevent_pc_3_event_finished::monitor;

	ddf::villa::timedevent_pc_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_3_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_3_event_gamestate::init();
	ddf::villa::gamestate::on_change += ddf::villa::timedevent_pc_3_event_gamestate::monitor;

	ddf::villa::timedevent_pc_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_3_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::video_playing::init();
	ddf::villa::control_room_controller::rfid::value::on_change += ddf::villa::video_playing::monitor;
	ddf::villa::video_device::enabled::on_change += ddf::villa::video_playing::monitor;

	ddf::villa::video_playing::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::video_playing::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::video_playing::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::video_playing::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::comdev_reset::init(bool(false));
	ddf::villa::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::freezed1::init(bool());
	ddf::villa::freezed1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freezed1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freezed1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freezed1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::freezed5::init(bool());
	ddf::villa::freezed5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freezed5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freezed5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freezed5::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gm_help_status::init(bool());
	ddf::villa::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::villa::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::villa::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::villa::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::villa::gamestate::init(uint8_t());
	ddf::villa::gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::incoming_call::init(uint8_t(0xff));
	ddf::villa::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::incoming_call::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::villa::incoming_call::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::villa::incoming_call::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::villa::incoming_call::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::villa::incoming_call_status::init(uint8_t());
	ddf::villa::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::villa::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::villa::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::villa::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::villa::restart_game::init(bool());
	ddf::villa::restart_game::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::restart_game::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::restart_game::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::restart_game::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::restart_game::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::villa::restart_game::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::villa::restart_game::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::villa::restart_game::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::villa::text_message::init(std::string());
	ddf::villa::text_message::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::text_message::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::text_message::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::text_message::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::text_message::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::villa::text_message::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::villa::text_message::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::villa::text_message::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::villa::text_message_sender::init(uint8_t(0xff));
	ddf::villa::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::villa::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::villa::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::villa::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::villa::game_end::init(bool());
	ddf::villa::game_end::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::game_end::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::game_end::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::game_end::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::pin_code::init(std::string());
	ddf::villa::pin_code::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::pin_code::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::pin_code::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::pin_code::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::proper_video_casette_played::init(bool(false));
	ddf::villa::proper_video_casette_played::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::proper_video_casette_played::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::proper_video_casette_played::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::proper_video_casette_played::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_1::init(uint64_t(120));
	ddf::villa::timedevent_funk_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_2::init(uint64_t(900));
	ddf::villa::timedevent_funk_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_2::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_funk_3::init(uint64_t(3300));
	ddf::villa::timedevent_funk_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_3::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_1::init(uint64_t(600));
	ddf::villa::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_2::init(uint64_t(1200));
	ddf::villa::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::villa::timedevent_pc_3::init(uint64_t(2400));
	ddf::villa::timedevent_pc_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::room_1::init();
	ddf::villa::room_1_content::chord::init();
	ddf::villa::room_1_content::careful::init();

	ddf::villa::room_1_content::gmhints::init();

	ddf::villa::room_1_content::rules::init();

	ddf::villa::room_1_content::techdiff::init();

	ddf::villa::room_1_content::event_1::init();

	ddf::villa::room_1_content::event_2::init();

	ddf::villa::room_1_content::event_3::init();

	ddf::villa::room_1_content::event_4::init();

	ddf::villa::room_1_content::event_5::init();


	ddf::villa::room_2::init();
	ddf::villa::room_2_content::chord::init();
	ddf::villa::room_2_content::careful::init();

	ddf::villa::room_2_content::gmhints::init();

	ddf::villa::room_2_content::rules::init();

	ddf::villa::room_2_content::techdiff::init();

	ddf::villa::room_2_content::event_1::init();

	ddf::villa::room_2_content::event_2::init();

	ddf::villa::room_2_content::event_3::init();

	ddf::villa::room_2_content::event_4::init();

	ddf::villa::room_2_content::event_5::init();



	ddf::villa::freezetimer1::init();
	ddf::villa::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::freezetimer5::init();
	ddf::villa::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::gametimer::init();
	ddf::villa::gametimer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::gametimer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::gametimer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::gametimer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::eject_wait::init();
	ddf::villa::eject_wait::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::eject_wait::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::eject_wait::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::eject_wait::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::pin_timeout_timer::init();
	ddf::villa::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::pin_timeout_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::timedevent_funk_1_timer::init();
	ddf::villa::timedevent_funk_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::timedevent_funk_2_timer::init();
	ddf::villa::timedevent_funk_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::timedevent_funk_3_timer::init();
	ddf::villa::timedevent_funk_3_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_funk_3_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_funk_3_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_funk_3_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::timedevent_pc_1_timer::init();
	ddf::villa::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::timedevent_pc_2_timer::init();
	ddf::villa::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::villa::timedevent_pc_3_timer::init();
	ddf::villa::timedevent_pc_3_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::villa::timedevent_pc_3_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::villa::timedevent_pc_3_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::villa::timedevent_pc_3_timer::remote_add(ddf::service::gmclient::device_role::instance(3));


	ddf::junkyard::email_client::device_role::init();
	ddf::junkyard::email_client::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::email_client::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::email_client::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::email_client::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::email_client::started::init(ddf::junkyard::email_client::device_role::instance(),bool());
	ddf::junkyard::email_client::started::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::email_client::started::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::email_client::started::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::email_client::started::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::email_client::shutdown::init(ddf::junkyard::email_client::device_role::instance(),bool());
	ddf::junkyard::email_client::shutdown::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::email_client::shutdown::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::email_client::shutdown::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::email_client::shutdown::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::email_client::restart_game::init(ddf::junkyard::email_client::device_role::instance(),bool());
	ddf::junkyard::email_client::restart_game::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::email_client::restart_game::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::email_client::restart_game::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::email_client::restart_game::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::junkyard::email_client::device_role>();
	ddf::junkyard::entrance_controller::device_role::init();
	ddf::junkyard::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::entrance_controller::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::entrance_controller::debouncer::init(ddf::junkyard::entrance_controller::device_role::instance());
	ddf::junkyard::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::entrance_controller::debouncer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::entrance_controller::led::init(ddf::junkyard::entrance_controller::device_role::instance());
	ddf::junkyard::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::entrance_controller::led::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::entrance_controller::magnetic_sensor::init(ddf::junkyard::entrance_controller::device_role::instance());
	ddf::junkyard::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::entrance_controller::magnetic_sensor::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::junkyard::entrance_controller::device_role>();
	ddf::junkyard::secret_box_controller_1::device_role::init();
	ddf::junkyard::secret_box_controller_1::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::button_grid::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::button_grid::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::button_grid::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::button_grid::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::button_grid::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::debouncer_1::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::debouncer_2::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::debouncer_3::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::debouncer_4::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::debouncer_5::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::debouncer_6::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::debouncer_7::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::magnetic_lock_1::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::magnetic_lock_2::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::magnetic_lock_3::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::magnetic_lock_4::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_1::addressable_led::init(ddf::junkyard::secret_box_controller_1::device_role::instance());
	ddf::junkyard::secret_box_controller_1::addressable_led::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_1::addressable_led::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_1::addressable_led::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_1::addressable_led::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::junkyard::secret_box_controller_1::device_role>();
	ddf::junkyard::secret_box_controller_2::device_role::init();
	ddf::junkyard::secret_box_controller_2::device_role::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::device_role::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::device_role::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::device_role::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_1::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_2::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_3::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_4::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_5::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_6::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_6::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_7::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_7::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_8::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_8::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_8::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_8::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_8::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_9::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_9::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_9::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_9::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_9::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_10::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_10::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_10::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_10::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_10::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::light_controller::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::light_controller::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::light_controller::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::light_controller::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::light_controller::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::debouncer_12::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::debouncer_12::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::debouncer_12::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::debouncer_12::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::debouncer_12::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::magnetic_lock_1::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::magnetic_lock_2::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::magnetic_lock_3::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_3::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::secret_box_controller_2::magnetic_lock_4::init(ddf::junkyard::secret_box_controller_2::device_role::instance());
	ddf::junkyard::secret_box_controller_2::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::secret_box_controller_2::magnetic_lock_4::remote_add(ddf::service::gmclient::device_role::instance(3));

	dm::add_role<ddf::junkyard::secret_box_controller_2::device_role>();

	ddf::junkyard::freeze_1_start::init();
	ddf::junkyard::freezed1::on_change += ddf::junkyard::freeze_1_start::monitor;

	ddf::junkyard::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freeze_1_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::freeze_1_stop::init();
	ddf::junkyard::freezed1::on_change += ddf::junkyard::freeze_1_stop::monitor;

	ddf::junkyard::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freeze_1_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::freeze_1_timeout::init();
	ddf::junkyard::freezetimer1::on_value_change += ddf::junkyard::freeze_1_timeout::monitor;

	ddf::junkyard::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freeze_1_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::freeze_5_start::init();
	ddf::junkyard::freezed5::on_change += ddf::junkyard::freeze_5_start::monitor;

	ddf::junkyard::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freeze_5_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::freeze_5_stop::init();
	ddf::junkyard::freezed5::on_change += ddf::junkyard::freeze_5_stop::monitor;

	ddf::junkyard::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freeze_5_stop::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::freeze_5_timeout::init();
	ddf::junkyard::freezetimer5::on_value_change += ddf::junkyard::freeze_5_timeout::monitor;

	ddf::junkyard::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freeze_5_timeout::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::game_timer_expired::init();
	ddf::junkyard::gametimer::on_value_change += ddf::junkyard::game_timer_expired::monitor;

	ddf::junkyard::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::game_timer_expired::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::led_strip_update::init();
	ddf::junkyard::gametimer::on_value_change += ddf::junkyard::led_strip_update::monitor;

	ddf::junkyard::led_strip_update::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::led_strip_update::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::led_strip_update::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::led_strip_update::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::anamorphic_module::init();
	ddf::junkyard::secret_box_controller_2::debouncer_1::value::on_change += ddf::junkyard::anamorphic_module::monitor;
	ddf::junkyard::secret_box_controller_2::debouncer_5::value::on_change += ddf::junkyard::anamorphic_module::monitor;
	ddf::junkyard::secret_box_controller_2::debouncer_7::value::on_change += ddf::junkyard::anamorphic_module::monitor;

	ddf::junkyard::anamorphic_module::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::anamorphic_module::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::anamorphic_module::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::anamorphic_module::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::game_end_button_activation::init();
	ddf::junkyard::game_end::on_change += ddf::junkyard::game_end_button_activation::monitor;

	ddf::junkyard::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::game_end_button_activation::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::game_end_button_push::init();
	ddf::junkyard::gamestate::on_change += ddf::junkyard::game_end_button_push::monitor;
	ddf::junkyard::game_end::on_change += ddf::junkyard::game_end_button_push::monitor;
	ddf::junkyard::entrance_controller::debouncer::value::on_change += ddf::junkyard::game_end_button_push::monitor;

	ddf::junkyard::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::game_end_button_push::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::game_start::init();
	ddf::junkyard::entrance_controller::magnetic_sensor::value::on_change += ddf::junkyard::game_start::monitor;

	ddf::junkyard::game_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::game_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::game_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::game_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_game_state_changed::init();
	ddf::junkyard::gamestate::on_change += ddf::junkyard::gameevent_game_state_changed::monitor;

	ddf::junkyard::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_game_state_changed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_ampmeter_turn_on::init();

	ddf::junkyard::gameevent_ampmeter_turn_on::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_ampmeter_turn_on::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_ampmeter_turn_on::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_ampmeter_turn_on::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_call_accepted::init();
	ddf::junkyard::incoming_call_status::on_change += ddf::junkyard::gameevent_call_accepted::monitor;

	ddf::junkyard::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_call_accepted::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_call_declined::init();
	ddf::junkyard::incoming_call_status::on_change += ddf::junkyard::gameevent_call_declined::monitor;

	ddf::junkyard::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_call_declined::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_call_finished::init();
	ddf::junkyard::incoming_call_status::on_change += ddf::junkyard::gameevent_call_finished::monitor;

	ddf::junkyard::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_call_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_call_missed::init();
	ddf::junkyard::incoming_call_status::on_change += ddf::junkyard::gameevent_call_missed::monitor;

	ddf::junkyard::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_call_missed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_call_ringing::init();
	ddf::junkyard::incoming_call_status::on_change += ddf::junkyard::gameevent_call_ringing::monitor;

	ddf::junkyard::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_call_ringing::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_labirynth_1::init();
	ddf::junkyard::secret_box_controller_1::debouncer_5::value::on_change += ddf::junkyard::gameevent_labirynth_1::monitor;

	ddf::junkyard::gameevent_labirynth_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_labirynth_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_labirynth_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_labirynth_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_labirynth_2::init();
	ddf::junkyard::secret_box_controller_1::debouncer_6::value::on_change += ddf::junkyard::gameevent_labirynth_2::monitor;

	ddf::junkyard::gameevent_labirynth_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_labirynth_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_labirynth_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_labirynth_2::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_labirynth_3::init();
	ddf::junkyard::secret_box_controller_1::debouncer_7::value::on_change += ddf::junkyard::gameevent_labirynth_3::monitor;

	ddf::junkyard::gameevent_labirynth_3::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_labirynth_3::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_labirynth_3::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_labirynth_3::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gameevent_mona_lisa_rescue::init();
	ddf::junkyard::secret_box_controller_2::debouncer_12::value::on_change += ddf::junkyard::gameevent_mona_lisa_rescue::monitor;

	ddf::junkyard::gameevent_mona_lisa_rescue::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gameevent_mona_lisa_rescue::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gameevent_mona_lisa_rescue::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gameevent_mona_lisa_rescue::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::lockpick_module::init();
	ddf::junkyard::secret_box_controller_1::debouncer_2::value::on_change += ddf::junkyard::lockpick_module::monitor;
	ddf::junkyard::secret_box_controller_1::debouncer_3::value::on_change += ddf::junkyard::lockpick_module::monitor;
	ddf::junkyard::secret_box_controller_1::debouncer_4::value::on_change += ddf::junkyard::lockpick_module::monitor;

	ddf::junkyard::lockpick_module::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::lockpick_module::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::lockpick_module::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::lockpick_module::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::piano_key_pressed::init();
	ddf::junkyard::secret_box_controller_1::button_grid::value::on_change += ddf::junkyard::piano_key_pressed::monitor;

	ddf::junkyard::piano_key_pressed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::piano_key_pressed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::piano_key_pressed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::piano_key_pressed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::timedevent_pc_1_event_finished::init();
	ddf::junkyard::timedevent_pc_1_timer::on_value_change += ddf::junkyard::timedevent_pc_1_event_finished::monitor;

	ddf::junkyard::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_1_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::timedevent_pc_1_event_gamestate::init();
	ddf::junkyard::gamestate::on_change += ddf::junkyard::timedevent_pc_1_event_gamestate::monitor;

	ddf::junkyard::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_1_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::timedevent_pc_2_event_finished::init();
	ddf::junkyard::timedevent_pc_2_timer::on_value_change += ddf::junkyard::timedevent_pc_2_event_finished::monitor;

	ddf::junkyard::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_2_event_finished::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::timedevent_pc_2_event_gamestate::init();
	ddf::junkyard::gamestate::on_change += ddf::junkyard::timedevent_pc_2_event_gamestate::monitor;

	ddf::junkyard::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_2_event_gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::top_opening::init();
	ddf::junkyard::secret_box_controller_1::debouncer_4::value::on_change += ddf::junkyard::top_opening::monitor;

	ddf::junkyard::top_opening::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::top_opening::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::top_opening::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::top_opening::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::comdev_reset::init(bool(false));
	ddf::junkyard::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::comdev_reset::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::freezed1::init(bool());
	ddf::junkyard::freezed1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freezed1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freezed1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freezed1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::freezed5::init(bool());
	ddf::junkyard::freezed5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freezed5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freezed5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freezed5::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gm_help_status::init(bool());
	ddf::junkyard::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gm_help_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::junkyard::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::junkyard::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::junkyard::gm_help_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::junkyard::gamestate::init(uint8_t());
	ddf::junkyard::gamestate::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gamestate::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gamestate::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gamestate::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::incoming_call::init(uint8_t(0xff));
	ddf::junkyard::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::incoming_call::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::incoming_call::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::junkyard::incoming_call::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::junkyard::incoming_call::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::junkyard::incoming_call::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::junkyard::incoming_call_status::init(uint8_t());
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::junkyard::incoming_call_status::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::junkyard::restart_game::init(bool());
	ddf::junkyard::restart_game::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::restart_game::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::restart_game::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::restart_game::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::restart_game::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::junkyard::restart_game::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::junkyard::restart_game::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::junkyard::restart_game::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::junkyard::text_message::init(std::string());
	ddf::junkyard::text_message::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::text_message::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::text_message::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::text_message::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::text_message::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::junkyard::text_message::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::junkyard::text_message::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::junkyard::text_message::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::junkyard::text_message_sender::init(uint8_t(0xff));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(0));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(1));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(2));
	ddf::junkyard::text_message_sender::remote_add(ddf::service::comdev::device_role::instance(3));
	ddf::junkyard::correct_notes::init(uint8_t(0));
	ddf::junkyard::correct_notes::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::correct_notes::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::correct_notes::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::correct_notes::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::game_end::init(uint8_t(0));
	ddf::junkyard::game_end::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::game_end::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::game_end::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::game_end::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::last_led_index::init(uint8_t(50));
	ddf::junkyard::last_led_index::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::last_led_index::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::last_led_index::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::last_led_index::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::led_timer_start::init(uint64_t(0));
	ddf::junkyard::led_timer_start::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::led_timer_start::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::led_timer_start::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::led_timer_start::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::lock_pick_1_pressed::init(bool(false));
	ddf::junkyard::lock_pick_1_pressed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::lock_pick_1_pressed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::lock_pick_1_pressed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::lock_pick_1_pressed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::lock_pick_2_pressed::init(bool(false));
	ddf::junkyard::lock_pick_2_pressed::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::lock_pick_2_pressed::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::lock_pick_2_pressed::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::lock_pick_2_pressed::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::timedevent_pc_1::init(uint64_t(1200));
	ddf::junkyard::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_1::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::junkyard::timedevent_pc_2::init(uint64_t(2400));
	ddf::junkyard::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_2::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::room_1::init();
	ddf::junkyard::room_1_content::chord::init();
	ddf::junkyard::room_1_content::piano_a1::init();
	ddf::junkyard::room_1_content::piano_b1::init();
	ddf::junkyard::room_1_content::piano_c1::init();
	ddf::junkyard::room_1_content::piano_c2::init();
	ddf::junkyard::room_1_content::piano_d1::init();
	ddf::junkyard::room_1_content::piano_d2::init();
	ddf::junkyard::room_1_content::piano_e1::init();
	ddf::junkyard::room_1_content::piano_f1::init();
	ddf::junkyard::room_1_content::piano_g1::init();
	ddf::junkyard::room_1_content::careful::init();

	ddf::junkyard::room_1_content::gmhints::init();

	ddf::junkyard::room_1_content::rules::init();

	ddf::junkyard::room_1_content::techdiff::init();

	ddf::junkyard::room_1_content::event_1::init();

	ddf::junkyard::room_1_content::event_2::init();

	ddf::junkyard::room_1_content::event_3::init();

	ddf::junkyard::room_1_content::event_4::init();


	ddf::junkyard::room_2::init();
	ddf::junkyard::room_2_content::chord::init();
	ddf::junkyard::room_2_content::piano_a1::init();
	ddf::junkyard::room_2_content::piano_b1::init();
	ddf::junkyard::room_2_content::piano_c1::init();
	ddf::junkyard::room_2_content::piano_c2::init();
	ddf::junkyard::room_2_content::piano_d1::init();
	ddf::junkyard::room_2_content::piano_d2::init();
	ddf::junkyard::room_2_content::piano_e1::init();
	ddf::junkyard::room_2_content::piano_f1::init();
	ddf::junkyard::room_2_content::piano_g1::init();
	ddf::junkyard::room_2_content::careful::init();

	ddf::junkyard::room_2_content::gmhints::init();

	ddf::junkyard::room_2_content::rules::init();

	ddf::junkyard::room_2_content::techdiff::init();

	ddf::junkyard::room_2_content::event_1::init();

	ddf::junkyard::room_2_content::event_2::init();

	ddf::junkyard::room_2_content::event_3::init();

	ddf::junkyard::room_2_content::event_4::init();



	ddf::junkyard::freezetimer1::init();
	ddf::junkyard::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freezetimer1::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::freezetimer5::init();
	ddf::junkyard::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::freezetimer5::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::gametimer::init();
	ddf::junkyard::gametimer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::gametimer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::gametimer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::gametimer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::timedevent_pc_1_timer::init();
	ddf::junkyard::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_1_timer::remote_add(ddf::service::gmclient::device_role::instance(3));

	ddf::junkyard::timedevent_pc_2_timer::init();
	ddf::junkyard::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::junkyard::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::junkyard::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::junkyard::timedevent_pc_2_timer::remote_add(ddf::service::gmclient::device_role::instance(3));


	ddf::service::comdev::device_role::init();

	dm::add_role<ddf::service::comdev::device_role>();
	ddf::service::gmclient::device_role::init();

	dm::add_role<ddf::service::gmclient::device_role>();

	ddf::service::statustimertick::init();
	ddf::service::statustimer::on_value_change += ddf::service::statustimertick::monitor;


	ddf::service::servercpustatus::init(uint8_t());
	ddf::service::servercpustatus::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::service::servercpustatus::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::service::servercpustatus::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::service::servercpustatus::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::service::servermemorystatus::init(uint8_t());
	ddf::service::servermemorystatus::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::service::servermemorystatus::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::service::servermemorystatus::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::service::servermemorystatus::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::service::servernetworkstatus::init(uint8_t());
	ddf::service::servernetworkstatus::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::service::servernetworkstatus::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::service::servernetworkstatus::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::service::servernetworkstatus::remote_add(ddf::service::gmclient::device_role::instance(3));
	ddf::service::serverstoragestatus::init(uint8_t());
	ddf::service::serverstoragestatus::remote_add(ddf::service::gmclient::device_role::instance(0));
	ddf::service::serverstoragestatus::remote_add(ddf::service::gmclient::device_role::instance(1));
	ddf::service::serverstoragestatus::remote_add(ddf::service::gmclient::device_role::instance(2));
	ddf::service::serverstoragestatus::remote_add(ddf::service::gmclient::device_role::instance(3));


	ddf::service::statustimer::init();


}

static void uninit()
{
	ddf::pirate::freeze_1_start::uninit();
	ddf::pirate::freeze_1_stop::uninit();
	ddf::pirate::freeze_1_timeout::uninit();
	ddf::pirate::freeze_5_start::uninit();
	ddf::pirate::freeze_5_stop::uninit();
	ddf::pirate::freeze_5_timeout::uninit();
	ddf::pirate::game_timer_expired::uninit();
	ddf::pirate::chest_opening::uninit();
	ddf::pirate::game_end_button_push::uninit();
	ddf::pirate::game_ending::uninit();
	ddf::pirate::game_start::uninit();
	ddf::pirate::gameevent_game_state_changed::uninit();
	ddf::pirate::hanger_trigger::uninit();
	ddf::pirate::knock_accumulate::uninit();
	ddf::pirate::knock_timeout::uninit();
	ddf::pirate::knot_puzzle::uninit();
	ddf::pirate::laser_turn_off::uninit();
	ddf::pirate::pin_code_accumulation::uninit();
	ddf::pirate::pin_timeout::uninit();
	ddf::pirate::rex_table::uninit();
	ddf::pirate::rotation_update::uninit();
	ddf::pirate::ship_matching::uninit();
	ddf::pirate::sign_matching::uninit();
	ddf::pirate::timedevent_an_1_event_finished::uninit();
	ddf::pirate::timedevent_an_1_event_gamestate::uninit();
	ddf::pirate::timedevent_an_2_event_finished::uninit();
	ddf::pirate::timedevent_an_2_event_gamestate::uninit();
	ddf::pirate::timedevent_ghost_voice_event_finished::uninit();
	ddf::pirate::timedevent_ghost_voice_event_gamestate::uninit();
	ddf::pirate::timedevent_pc_1_event_finished::uninit();
	ddf::pirate::timedevent_pc_1_event_gamestate::uninit();
	ddf::pirate::timedevent_pc_2_event_finished::uninit();
	ddf::pirate::timedevent_pc_2_event_gamestate::uninit();

	ddf::pirate::cashier_laser_controller::laser::uninit();
	ddf::pirate::cashier_laser_controller::lcd::uninit();
	ddf::pirate::cashier_laser_controller::pin_pad::uninit();
	ddf::pirate::cashier_laser_controller::cash_box::uninit();
	ddf::pirate::cashier_laser_controller::switch_1::uninit();
	ddf::pirate::cashier_laser_controller::led_strip::uninit();
	ddf::pirate::entrance_hanger_controller::debouncer::uninit();
	ddf::pirate::entrance_hanger_controller::led::uninit();
	ddf::pirate::entrance_hanger_controller::magnetic_sensor::uninit();
	ddf::pirate::entrance_hanger_controller::debouncer_2::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2::uninit();
	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer::uninit();
	ddf::pirate::map_controller::magnetic_sensor_1::uninit();
	ddf::pirate::map_controller::magnetic_sensor_2::uninit();
	ddf::pirate::map_controller::led_strip::uninit();
	ddf::pirate::rex_flipper_controller::light_controller_1::uninit();
	ddf::pirate::rex_flipper_controller::light_controller_2::uninit();
	ddf::pirate::rex_flipper_controller::light_controller_3::uninit();
	ddf::pirate::rex_flipper_controller::light_controller_4::uninit();
	ddf::pirate::rex_flipper_controller::light_controller_5::uninit();
	ddf::pirate::rex_flipper_controller::light_controller_6::uninit();
	ddf::pirate::rex_flipper_controller::light_controller_7::uninit();
	ddf::pirate::rex_flipper_controller::photosensor_1::uninit();
	ddf::pirate::rex_flipper_controller::photosensor_2::uninit();
	ddf::pirate::rex_flipper_controller::photosensor_3::uninit();
	ddf::pirate::rex_flipper_controller::photosensor_4::uninit();
	ddf::pirate::rex_flipper_controller::photosensor_5::uninit();
	ddf::pirate::rex_flipper_controller::photosensor_6::uninit();
	ddf::pirate::rex_flipper_controller::photosensor_7::uninit();
	ddf::pirate::rex_flipper_controller::rfid_reader::uninit();
	ddf::pirate::rex_flipper_controller::magnetic_lock::uninit();
	ddf::pirate::rex_flipper_controller::led::uninit();
	ddf::pirate::stone_chest_controller::magnetic_sensor_1::uninit();
	ddf::pirate::stone_chest_controller::magnetic_sensor_2::uninit();
	ddf::pirate::stone_chest_controller::magnetic_sensor_3::uninit();
	ddf::pirate::stone_chest_controller::magnetic_sensor_4::uninit();
	ddf::pirate::stone_chest_controller::magnetic_sensor_5::uninit();
	ddf::pirate::stone_chest_controller::magnetic_lock_1::uninit();
	ddf::pirate::stone_chest_controller::magnetic_lock_2::uninit();
	ddf::pirate::stone_chest_controller::led_strip::uninit();

	ddf::pirate::comdev_reset::uninit();
	ddf::pirate::freezed1::uninit();
	ddf::pirate::freezed5::uninit();
	ddf::pirate::gm_help_status::uninit();
	ddf::pirate::gamestate::uninit();
	ddf::pirate::incoming_call::uninit();
	ddf::pirate::incoming_call_status::uninit();
	ddf::pirate::restart_game::uninit();
	ddf::pirate::text_message::uninit();
	ddf::pirate::text_message_sender::uninit();
	ddf::pirate::game_end::uninit();
	ddf::pirate::knock_count::uninit();
	ddf::pirate::pin_code::uninit();
	ddf::pirate::timedevent_an_1::uninit();
	ddf::pirate::timedevent_an_2::uninit();
	ddf::pirate::timedevent_ghost_voice::uninit();
	ddf::pirate::timedevent_pc_1::uninit();
	ddf::pirate::timedevent_pc_2::uninit();
	ddf::pirate::wheel_last_pos::uninit();

	ddf::pirate::room_1_content::chord::uninit();
	ddf::pirate::room_1_content::careful::uninit();
	ddf::pirate::room_1_content::event_1::uninit();
	ddf::pirate::room_1_content::event_2::uninit();
	ddf::pirate::room_1_content::event_3::uninit();
	ddf::pirate::room_1_content::failstate::uninit();
	ddf::pirate::room_1_content::gmhints::uninit();
	ddf::pirate::room_1_content::rules::uninit();
	ddf::pirate::room_1_content::techdiff::uninit();
	ddf::pirate::room_1_content::winstate::uninit();
	ddf::pirate::room_1::uninit();
	ddf::pirate::room_2_content::chord::uninit();
	ddf::pirate::room_2_content::careful::uninit();
	ddf::pirate::room_2_content::event_1::uninit();
	ddf::pirate::room_2_content::event_2::uninit();
	ddf::pirate::room_2_content::event_3::uninit();
	ddf::pirate::room_2_content::failstate::uninit();
	ddf::pirate::room_2_content::gmhints::uninit();
	ddf::pirate::room_2_content::rules::uninit();
	ddf::pirate::room_2_content::techdiff::uninit();
	ddf::pirate::room_2_content::winstate::uninit();
	ddf::pirate::room_2::uninit();

	ddf::pirate::freezetimer1::uninit();
	ddf::pirate::freezetimer5::uninit();
	ddf::pirate::gametimer::uninit();
	ddf::pirate::knock_timer::uninit();
	ddf::pirate::pin_timeout_timer::uninit();
	ddf::pirate::timedevent_an_1_timer::uninit();
	ddf::pirate::timedevent_an_2_timer::uninit();
	ddf::pirate::timedevent_ghost_voice_timer::uninit();
	ddf::pirate::timedevent_pc_1_timer::uninit();
	ddf::pirate::timedevent_pc_2_timer::uninit();

	ddf::magician::freeze_1_start::uninit();
	ddf::magician::freeze_1_stop::uninit();
	ddf::magician::freeze_1_timeout::uninit();
	ddf::magician::freeze_5_start::uninit();
	ddf::magician::freeze_5_stop::uninit();
	ddf::magician::freeze_5_timeout::uninit();
	ddf::magician::game_timer_expired::uninit();
	ddf::magician::cupboard_controller_event_for_labyrinth_task::uninit();
	ddf::magician::door_open_light_turn_on::uninit();
	ddf::magician::game_end_button_push::uninit();
	ddf::magician::game_ending::uninit();
	ddf::magician::game_start::uninit();
	ddf::magician::gameevent_game_state_changed::uninit();
	ddf::magician::gameevent_call_accepted::uninit();
	ddf::magician::gameevent_call_declined::uninit();
	ddf::magician::gameevent_call_finished::uninit();
	ddf::magician::gameevent_call_missed::uninit();
	ddf::magician::gameevent_call_ringing::uninit();
	ddf::magician::keyswitch_active::uninit();
	ddf::magician::pin_code_accumulation::uninit();
	ddf::magician::pin_code_test_alias_safe_activation::uninit();
	ddf::magician::pin_timeout::uninit();
	ddf::magician::planning_wall_puzzle::uninit();
	ddf::magician::rfid_tag_correct::uninit();
	ddf::magician::safecode_entry_activaion::uninit();
	ddf::magician::timedevent_an_1_event_finished::uninit();
	ddf::magician::timedevent_an_1_event_gamestate::uninit();
	ddf::magician::timedevent_an_2_event_finished::uninit();
	ddf::magician::timedevent_an_2_event_gamestate::uninit();
	ddf::magician::timedevent_an_3_event_finished::uninit();
	ddf::magician::timedevent_an_3_event_gamestate::uninit();
	ddf::magician::timedevent_an_4_event_finished::uninit();
	ddf::magician::timedevent_an_4_event_gamestate::uninit();
	ddf::magician::timedevent_an_5_event_finished::uninit();
	ddf::magician::timedevent_an_5_event_gamestate::uninit();
	ddf::magician::timedevent_an_6_event_finished::uninit();
	ddf::magician::timedevent_an_6_event_gamestate::uninit();
	ddf::magician::timedevent_ap_1_event_finished::uninit();
	ddf::magician::timedevent_ap_1_event_gamestate::uninit();
	ddf::magician::timedevent_ap_2_event_finished::uninit();
	ddf::magician::timedevent_ap_2_event_gamestate::uninit();
	ddf::magician::timedevent_pc_1_event_finished::uninit();
	ddf::magician::timedevent_pc_1_event_gamestate::uninit();
	ddf::magician::timedevent_pc_2_event_finished::uninit();
	ddf::magician::timedevent_pc_2_event_gamestate::uninit();

	ddf::magician::cupboard_controller::debouncer::uninit();
	ddf::magician::cupboard_controller::magnetic_sensor::uninit();
	ddf::magician::cupboard_controller::magnetic_lock::uninit();
	ddf::magician::cupboard_controller::led_strip::uninit();
	ddf::magician::design_board_controller::linear_magnetic_sensor_1::uninit();
	ddf::magician::design_board_controller::linear_magnetic_sensor_2::uninit();
	ddf::magician::design_board_controller::linear_magnetic_sensor_3::uninit();
	ddf::magician::design_board_controller::magnetic_lock::uninit();
	ddf::magician::entrance_controller::debouncer::uninit();
	ddf::magician::entrance_controller::led::uninit();
	ddf::magician::entrance_controller::magnetic_sensor::uninit();
	ddf::magician::futuristic_safe_controller::debouncer::uninit();
	ddf::magician::futuristic_safe_controller::rfid_reader::uninit();
	ddf::magician::futuristic_safe_controller::pin_pad::uninit();
	ddf::magician::futuristic_safe_controller::magnetic_lock::uninit();
	ddf::magician::futuristic_safe_controller::addressable_led_strip::uninit();

	ddf::magician::comdev_reset::uninit();
	ddf::magician::freezed1::uninit();
	ddf::magician::freezed5::uninit();
	ddf::magician::gm_help_status::uninit();
	ddf::magician::gamestate::uninit();
	ddf::magician::incoming_call::uninit();
	ddf::magician::incoming_call_status::uninit();
	ddf::magician::restart_game::uninit();
	ddf::magician::text_message::uninit();
	ddf::magician::text_message_sender::uninit();
	ddf::magician::game_end::uninit();
	ddf::magician::pin_code::uninit();
	ddf::magician::pin_pad_code::uninit();
	ddf::magician::rfid_reader_code::uninit();
	ddf::magician::timedevent_an_1::uninit();
	ddf::magician::timedevent_an_2::uninit();
	ddf::magician::timedevent_an_3::uninit();
	ddf::magician::timedevent_an_4::uninit();
	ddf::magician::timedevent_an_5::uninit();
	ddf::magician::timedevent_an_6::uninit();
	ddf::magician::timedevent_ap_1::uninit();
	ddf::magician::timedevent_ap_2::uninit();
	ddf::magician::timedevent_pc_1::uninit();
	ddf::magician::timedevent_pc_2::uninit();

	ddf::magician::room_1_content::applause::uninit();
	ddf::magician::room_1_content::chord::uninit();
	ddf::magician::room_1_content::careful::uninit();
	ddf::magician::room_1_content::gmhints::uninit();
	ddf::magician::room_1_content::rules::uninit();
	ddf::magician::room_1_content::techdiff::uninit();
	ddf::magician::room_1_content::winstate::uninit();
	ddf::magician::room_1_content::event_1::uninit();
	ddf::magician::room_1_content::event_2::uninit();
	ddf::magician::room_1_content::event_3::uninit();
	ddf::magician::room_1_content::event_4::uninit();
	ddf::magician::room_1_content::event_5::uninit();
	ddf::magician::room_1_content::event_6::uninit();
	ddf::magician::room_1::uninit();
	ddf::magician::room_2_content::applause::uninit();
	ddf::magician::room_2_content::chord::uninit();
	ddf::magician::room_2_content::careful::uninit();
	ddf::magician::room_2_content::gmhints::uninit();
	ddf::magician::room_2_content::rules::uninit();
	ddf::magician::room_2_content::techdiff::uninit();
	ddf::magician::room_2_content::winstate::uninit();
	ddf::magician::room_2_content::event_1::uninit();
	ddf::magician::room_2_content::event_2::uninit();
	ddf::magician::room_2_content::event_3::uninit();
	ddf::magician::room_2_content::event_4::uninit();
	ddf::magician::room_2_content::event_5::uninit();
	ddf::magician::room_2_content::event_6::uninit();
	ddf::magician::room_2::uninit();

	ddf::magician::freezetimer1::uninit();
	ddf::magician::freezetimer5::uninit();
	ddf::magician::gametimer::uninit();
	ddf::magician::pin_timeout_timer::uninit();
	ddf::magician::timedevent_an_1_timer::uninit();
	ddf::magician::timedevent_an_2_timer::uninit();
	ddf::magician::timedevent_an_3_timer::uninit();
	ddf::magician::timedevent_an_4_timer::uninit();
	ddf::magician::timedevent_an_5_timer::uninit();
	ddf::magician::timedevent_an_6_timer::uninit();
	ddf::magician::timedevent_ap_1_timer::uninit();
	ddf::magician::timedevent_ap_2_timer::uninit();
	ddf::magician::timedevent_pc_1_timer::uninit();
	ddf::magician::timedevent_pc_2_timer::uninit();

	ddf::villa::freeze_1_start::uninit();
	ddf::villa::freeze_1_stop::uninit();
	ddf::villa::freeze_1_timeout::uninit();
	ddf::villa::freeze_5_start::uninit();
	ddf::villa::freeze_5_stop::uninit();
	ddf::villa::freeze_5_timeout::uninit();
	ddf::villa::game_timer_expired::uninit();
	ddf::villa::answering_machine::uninit();
	ddf::villa::casette_ejection_event::uninit();
	ddf::villa::game_end_button_activation::uninit();
	ddf::villa::game_end_button_push::uninit();
	ddf::villa::game_end_triggered::uninit();
	ddf::villa::game_start::uninit();
	ddf::villa::gameevent_game_state_changed::uninit();
	ddf::villa::gameevent_call_accepted::uninit();
	ddf::villa::gameevent_call_declined::uninit();
	ddf::villa::gameevent_call_finished::uninit();
	ddf::villa::gameevent_call_missed::uninit();
	ddf::villa::gameevent_call_ringing::uninit();
	ddf::villa::gameevent_casette_eject_trigger::uninit();
	ddf::villa::gameevent_finding_the_keys::uninit();
	ddf::villa::pin_code_accumulation::uninit();
	ddf::villa::pin_timeout::uninit();
	ddf::villa::the_safe_code::uninit();
	ddf::villa::the_surveillance_konsole::uninit();
	ddf::villa::timedevent_funk_1_event_finished::uninit();
	ddf::villa::timedevent_funk_1_event_gamestate::uninit();
	ddf::villa::timedevent_funk_2_event_finished::uninit();
	ddf::villa::timedevent_funk_2_event_gamestate::uninit();
	ddf::villa::timedevent_funk_3_event_finished::uninit();
	ddf::villa::timedevent_funk_3_event_gamestate::uninit();
	ddf::villa::timedevent_pc_1_event_finished::uninit();
	ddf::villa::timedevent_pc_1_event_gamestate::uninit();
	ddf::villa::timedevent_pc_2_event_finished::uninit();
	ddf::villa::timedevent_pc_2_event_gamestate::uninit();
	ddf::villa::timedevent_pc_3_event_finished::uninit();
	ddf::villa::timedevent_pc_3_event_gamestate::uninit();
	ddf::villa::video_playing::uninit();

	ddf::villa::control_room_controller::switch_1::uninit();
	ddf::villa::control_room_controller::rfid::uninit();
	ddf::villa::control_room_controller::magnetic_lock::uninit();
	ddf::villa::control_room_controller::debouncer_1::uninit();
	ddf::villa::control_room_controller::video_eject::uninit();
	ddf::villa::desk_controller::debouncer_3::uninit();
	ddf::villa::desk_controller::debouncer_4::uninit();
	ddf::villa::desktop_pc::started::uninit();
	ddf::villa::desktop_pc::shutdown::uninit();
	ddf::villa::desktop_pc::logged_in::uninit();
	ddf::villa::desktop_pc::recycled_restore::uninit();
	ddf::villa::desktop_pc::audioplay_started::uninit();
	ddf::villa::desktop_pc::audioplay_finished::uninit();
	ddf::villa::desktop_pc::audioplay_paused::uninit();
	ddf::villa::desktop_pc::restart_game::uninit();
	ddf::villa::desktop_pc::audioplay_startevent::uninit();
	ddf::villa::desktop_pc::audiopause_pauseevent::uninit();
	ddf::villa::entrance_controller::debouncer::uninit();
	ddf::villa::entrance_controller::led::uninit();
	ddf::villa::entrance_controller::magnetic_sensor::uninit();
	ddf::villa::safe_controller::pin_pad::uninit();
	ddf::villa::safe_controller::magnetic_lock::uninit();
	ddf::villa::safe_controller::debouncer_1::uninit();
	ddf::villa::safe_controller::debouncer_2::uninit();
	ddf::villa::video_device::started::uninit();
	ddf::villa::video_device::shutdown::uninit();
	ddf::villa::video_device::livecam_started::uninit();
	ddf::villa::video_device::livecamslides_started::uninit();
	ddf::villa::video_device::restart_game::uninit();
	ddf::villa::video_device::start_livecams::uninit();
	ddf::villa::video_device::stop_livecams::uninit();
	ddf::villa::video_device::start_tape::uninit();
	ddf::villa::video_device::stop_tape::uninit();
	ddf::villa::video_device::pause_tape::uninit();
	ddf::villa::video_device::enabled::uninit();
	ddf::villa::video_device::casette_id::uninit();
	ddf::villa::video_device::play_ongoing::uninit();
	ddf::villa::video_device::livecam_ongoing::uninit();

	ddf::villa::comdev_reset::uninit();
	ddf::villa::freezed1::uninit();
	ddf::villa::freezed5::uninit();
	ddf::villa::gm_help_status::uninit();
	ddf::villa::gamestate::uninit();
	ddf::villa::incoming_call::uninit();
	ddf::villa::incoming_call_status::uninit();
	ddf::villa::restart_game::uninit();
	ddf::villa::text_message::uninit();
	ddf::villa::text_message_sender::uninit();
	ddf::villa::game_end::uninit();
	ddf::villa::pin_code::uninit();
	ddf::villa::proper_video_casette_played::uninit();
	ddf::villa::timedevent_funk_1::uninit();
	ddf::villa::timedevent_funk_2::uninit();
	ddf::villa::timedevent_funk_3::uninit();
	ddf::villa::timedevent_pc_1::uninit();
	ddf::villa::timedevent_pc_2::uninit();
	ddf::villa::timedevent_pc_3::uninit();

	ddf::villa::room_1_content::chord::uninit();
	ddf::villa::room_1_content::careful::uninit();
	ddf::villa::room_1_content::gmhints::uninit();
	ddf::villa::room_1_content::rules::uninit();
	ddf::villa::room_1_content::techdiff::uninit();
	ddf::villa::room_1_content::event_1::uninit();
	ddf::villa::room_1_content::event_2::uninit();
	ddf::villa::room_1_content::event_3::uninit();
	ddf::villa::room_1_content::event_4::uninit();
	ddf::villa::room_1_content::event_5::uninit();
	ddf::villa::room_1::uninit();
	ddf::villa::room_2_content::chord::uninit();
	ddf::villa::room_2_content::careful::uninit();
	ddf::villa::room_2_content::gmhints::uninit();
	ddf::villa::room_2_content::rules::uninit();
	ddf::villa::room_2_content::techdiff::uninit();
	ddf::villa::room_2_content::event_1::uninit();
	ddf::villa::room_2_content::event_2::uninit();
	ddf::villa::room_2_content::event_3::uninit();
	ddf::villa::room_2_content::event_4::uninit();
	ddf::villa::room_2_content::event_5::uninit();
	ddf::villa::room_2::uninit();

	ddf::villa::freezetimer1::uninit();
	ddf::villa::freezetimer5::uninit();
	ddf::villa::gametimer::uninit();
	ddf::villa::eject_wait::uninit();
	ddf::villa::pin_timeout_timer::uninit();
	ddf::villa::timedevent_funk_1_timer::uninit();
	ddf::villa::timedevent_funk_2_timer::uninit();
	ddf::villa::timedevent_funk_3_timer::uninit();
	ddf::villa::timedevent_pc_1_timer::uninit();
	ddf::villa::timedevent_pc_2_timer::uninit();
	ddf::villa::timedevent_pc_3_timer::uninit();

	ddf::junkyard::freeze_1_start::uninit();
	ddf::junkyard::freeze_1_stop::uninit();
	ddf::junkyard::freeze_1_timeout::uninit();
	ddf::junkyard::freeze_5_start::uninit();
	ddf::junkyard::freeze_5_stop::uninit();
	ddf::junkyard::freeze_5_timeout::uninit();
	ddf::junkyard::game_timer_expired::uninit();
	ddf::junkyard::led_strip_update::uninit();
	ddf::junkyard::anamorphic_module::uninit();
	ddf::junkyard::game_end_button_activation::uninit();
	ddf::junkyard::game_end_button_push::uninit();
	ddf::junkyard::game_start::uninit();
	ddf::junkyard::gameevent_game_state_changed::uninit();
	ddf::junkyard::gameevent_ampmeter_turn_on::uninit();
	ddf::junkyard::gameevent_call_accepted::uninit();
	ddf::junkyard::gameevent_call_declined::uninit();
	ddf::junkyard::gameevent_call_finished::uninit();
	ddf::junkyard::gameevent_call_missed::uninit();
	ddf::junkyard::gameevent_call_ringing::uninit();
	ddf::junkyard::gameevent_labirynth_1::uninit();
	ddf::junkyard::gameevent_labirynth_2::uninit();
	ddf::junkyard::gameevent_labirynth_3::uninit();
	ddf::junkyard::gameevent_mona_lisa_rescue::uninit();
	ddf::junkyard::lockpick_module::uninit();
	ddf::junkyard::piano_key_pressed::uninit();
	ddf::junkyard::timedevent_pc_1_event_finished::uninit();
	ddf::junkyard::timedevent_pc_1_event_gamestate::uninit();
	ddf::junkyard::timedevent_pc_2_event_finished::uninit();
	ddf::junkyard::timedevent_pc_2_event_gamestate::uninit();
	ddf::junkyard::top_opening::uninit();

	ddf::junkyard::email_client::started::uninit();
	ddf::junkyard::email_client::shutdown::uninit();
	ddf::junkyard::email_client::restart_game::uninit();
	ddf::junkyard::entrance_controller::debouncer::uninit();
	ddf::junkyard::entrance_controller::led::uninit();
	ddf::junkyard::entrance_controller::magnetic_sensor::uninit();
	ddf::junkyard::secret_box_controller_1::button_grid::uninit();
	ddf::junkyard::secret_box_controller_1::debouncer_1::uninit();
	ddf::junkyard::secret_box_controller_1::debouncer_2::uninit();
	ddf::junkyard::secret_box_controller_1::debouncer_3::uninit();
	ddf::junkyard::secret_box_controller_1::debouncer_4::uninit();
	ddf::junkyard::secret_box_controller_1::debouncer_5::uninit();
	ddf::junkyard::secret_box_controller_1::debouncer_6::uninit();
	ddf::junkyard::secret_box_controller_1::debouncer_7::uninit();
	ddf::junkyard::secret_box_controller_1::magnetic_lock_1::uninit();
	ddf::junkyard::secret_box_controller_1::magnetic_lock_2::uninit();
	ddf::junkyard::secret_box_controller_1::magnetic_lock_3::uninit();
	ddf::junkyard::secret_box_controller_1::magnetic_lock_4::uninit();
	ddf::junkyard::secret_box_controller_1::addressable_led::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_1::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_2::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_3::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_4::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_5::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_6::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_7::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_8::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_9::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_10::uninit();
	ddf::junkyard::secret_box_controller_2::light_controller::uninit();
	ddf::junkyard::secret_box_controller_2::debouncer_12::uninit();
	ddf::junkyard::secret_box_controller_2::magnetic_lock_1::uninit();
	ddf::junkyard::secret_box_controller_2::magnetic_lock_2::uninit();
	ddf::junkyard::secret_box_controller_2::magnetic_lock_3::uninit();
	ddf::junkyard::secret_box_controller_2::magnetic_lock_4::uninit();

	ddf::junkyard::comdev_reset::uninit();
	ddf::junkyard::freezed1::uninit();
	ddf::junkyard::freezed5::uninit();
	ddf::junkyard::gm_help_status::uninit();
	ddf::junkyard::gamestate::uninit();
	ddf::junkyard::incoming_call::uninit();
	ddf::junkyard::incoming_call_status::uninit();
	ddf::junkyard::restart_game::uninit();
	ddf::junkyard::text_message::uninit();
	ddf::junkyard::text_message_sender::uninit();
	ddf::junkyard::correct_notes::uninit();
	ddf::junkyard::game_end::uninit();
	ddf::junkyard::last_led_index::uninit();
	ddf::junkyard::led_timer_start::uninit();
	ddf::junkyard::lock_pick_1_pressed::uninit();
	ddf::junkyard::lock_pick_2_pressed::uninit();
	ddf::junkyard::timedevent_pc_1::uninit();
	ddf::junkyard::timedevent_pc_2::uninit();

	ddf::junkyard::room_1_content::chord::uninit();
	ddf::junkyard::room_1_content::piano_a1::uninit();
	ddf::junkyard::room_1_content::piano_b1::uninit();
	ddf::junkyard::room_1_content::piano_c1::uninit();
	ddf::junkyard::room_1_content::piano_c2::uninit();
	ddf::junkyard::room_1_content::piano_d1::uninit();
	ddf::junkyard::room_1_content::piano_d2::uninit();
	ddf::junkyard::room_1_content::piano_e1::uninit();
	ddf::junkyard::room_1_content::piano_f1::uninit();
	ddf::junkyard::room_1_content::piano_g1::uninit();
	ddf::junkyard::room_1_content::careful::uninit();
	ddf::junkyard::room_1_content::gmhints::uninit();
	ddf::junkyard::room_1_content::rules::uninit();
	ddf::junkyard::room_1_content::techdiff::uninit();
	ddf::junkyard::room_1_content::event_1::uninit();
	ddf::junkyard::room_1_content::event_2::uninit();
	ddf::junkyard::room_1_content::event_3::uninit();
	ddf::junkyard::room_1_content::event_4::uninit();
	ddf::junkyard::room_1::uninit();
	ddf::junkyard::room_2_content::chord::uninit();
	ddf::junkyard::room_2_content::piano_a1::uninit();
	ddf::junkyard::room_2_content::piano_b1::uninit();
	ddf::junkyard::room_2_content::piano_c1::uninit();
	ddf::junkyard::room_2_content::piano_c2::uninit();
	ddf::junkyard::room_2_content::piano_d1::uninit();
	ddf::junkyard::room_2_content::piano_d2::uninit();
	ddf::junkyard::room_2_content::piano_e1::uninit();
	ddf::junkyard::room_2_content::piano_f1::uninit();
	ddf::junkyard::room_2_content::piano_g1::uninit();
	ddf::junkyard::room_2_content::careful::uninit();
	ddf::junkyard::room_2_content::gmhints::uninit();
	ddf::junkyard::room_2_content::rules::uninit();
	ddf::junkyard::room_2_content::techdiff::uninit();
	ddf::junkyard::room_2_content::event_1::uninit();
	ddf::junkyard::room_2_content::event_2::uninit();
	ddf::junkyard::room_2_content::event_3::uninit();
	ddf::junkyard::room_2_content::event_4::uninit();
	ddf::junkyard::room_2::uninit();

	ddf::junkyard::freezetimer1::uninit();
	ddf::junkyard::freezetimer5::uninit();
	ddf::junkyard::gametimer::uninit();
	ddf::junkyard::timedevent_pc_1_timer::uninit();
	ddf::junkyard::timedevent_pc_2_timer::uninit();

	ddf::service::statustimertick::uninit();


	ddf::service::servercpustatus::uninit();
	ddf::service::servermemorystatus::uninit();
	ddf::service::servernetworkstatus::uninit();
	ddf::service::serverstoragestatus::uninit();


	ddf::service::statustimer::uninit();

}
//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------
template<typename T>
bool set_property(const std::string &x)
{
	if(T::config::name == x)
	{
		typedef typename T::value_type Tv;
		typedef typename std::conditional<std::is_same<Tv,uint8_t>::value,uint16_t,Tv>::type Td;
		Td v;
		std::cin >> v;
		if(!std::cin.good())
		{
			std::string y;
			std::cin >> y;
			std::cout << "\e[31;01m[NOK]\e[0m Invalid value `"<<y<<"'" << std::endl;
		}
		else
		{
			T::value((Tv)v);
			std::cout << "\e[32;01m[OK]\e[0m " << v << std::endl;
		}

		return true;
	}

	else
		return false;
}

template<typename T>
bool get_property(const std::string &x)
{
	if(T::config::name == x)
	{
		typedef typename T::value_type Tv;
		typedef typename std::conditional<std::is_same<Tv,uint8_t>::value,uint16_t,Tv>::type Td;
		Td v = T::value();
		std::cout << "\e[32;01m[OK]\e[0m " << v << std::endl;
		return true;
	}

	else
		return false;
}


template<typename T>
bool set_peripheral(const std::string &x)
{
	if(T::config::name == x)
	{
		typedef typename T::value_type Tv;
		typedef typename std::conditional<std::is_same<Tv,uint8_t>::value,uint16_t,Tv>::type Td;
		Td v;
		std::cin >> v;
		if(!std::cin.good())
		{
			std::string y;
			std::cin >> y;
			std::cout << "\e[31;01m[NOK]\e[0m Invalid value `"<<y<<"'" << std::endl;
		}
		else
			std::cout << "\e[32;01m[OK]\e[0m " << (Td)(Tv)(typename T::value((Tv)v)) << std::endl;

		return true;
	}

	else
		return false;
}

template<typename T>
bool get_peripheral(const std::string &x)
{
	if(T::config::name == x)
	{
		typedef typename T::value_type Tv;
		typename std::conditional<std::is_same<Tv,uint8_t>::value,uint16_t,Tv>::type v = (typename T::value_type)typename T::value();
		std::cout << "\e[32;01m[OK]\e[0m " << v << std::endl;
		return true;
	}

	else
		return false;
}

template<typename T>
void rex_table_sensor_change()
{ std::cout << T::config::name << " " << (int)typename T::value() << std::endl; }

template<typename T>
void add_print_event()
{ T::value::on_change += rex_table_sensor_change<T>; }

template<typename T>
void set1()
{ typename T::value(true); }

void knock()
{
	std::cout << "knock" << std::endl;
}

int main()
{
	journal::init();

	alsa_host::init();

	process::sql_executor::init();

	wicc_earpc::init();

	dm::init();

	init();
	ddf::service::statustimer::start();

	ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor::value::on_change += knock;

	add_print_event<ddf::pirate::rex_flipper_controller::photosensor_1>();
	add_print_event<ddf::pirate::rex_flipper_controller::photosensor_2>();
	add_print_event<ddf::pirate::rex_flipper_controller::photosensor_3>();
	add_print_event<ddf::pirate::rex_flipper_controller::photosensor_4>();
	add_print_event<ddf::pirate::rex_flipper_controller::photosensor_5>();
	add_print_event<ddf::pirate::rex_flipper_controller::photosensor_6>();
	add_print_event<ddf::pirate::rex_flipper_controller::photosensor_7>();

	set1<ddf::pirate::rex_flipper_controller::light_controller_1>();
	set1<ddf::pirate::rex_flipper_controller::light_controller_2>();
	set1<ddf::pirate::rex_flipper_controller::light_controller_3>();
	set1<ddf::pirate::rex_flipper_controller::light_controller_4>();
	set1<ddf::pirate::rex_flipper_controller::light_controller_5>();
	set1<ddf::pirate::rex_flipper_controller::light_controller_6>();
	set1<ddf::pirate::rex_flipper_controller::light_controller_7>();



	std::string x;
	while(true)
	{

		std::cin >> x;
		if(x == "exit")
			break;

		else if(x == "1")
			ddf::pirate::room_1_content::chord::play();
		else if(x == "2")
			ddf::pirate::room_2_content::chord::play();
		else if(x == "3")
			ddf::magician::room_1_content::chord::play();
		else if(x == "4")
			ddf::magician::room_2_content::chord::play();
		else if(x == "5")
			ddf::villa::room_1_content::chord::play();
		else if(x == "6")
			ddf::villa::room_2_content::chord::play();
		else if(x == "7")
			ddf::junkyard::room_1_content::chord::play();
		else if(x == "8")
			ddf::junkyard::room_2_content::chord::play();

		else if(x=="ledon")
			ddf::junkyard::secret_box_controller_1::addressable_led::enabled(true);

		else if(x=="ledoff")
			ddf::junkyard::secret_box_controller_1::addressable_led::enabled(false);

		else if(x == "delay")
		{
			int delay;
			std::cin >> delay;

			std::this_thread::sleep_for(std::chrono::milliseconds(delay));
		}

		else if(x == "get")
		{
			std::cin >> x;

			if(get_peripheral<ddf::pirate::map_controller::magnetic_sensor_1>(x)) continue;
			if(get_peripheral<ddf::pirate::map_controller::magnetic_sensor_2>(x)) continue;
			if(get_peripheral<ddf::pirate::stone_chest_controller::magnetic_sensor_1>(x)) continue;
			if(get_peripheral<ddf::pirate::stone_chest_controller::magnetic_sensor_2>(x)) continue;
			if(get_peripheral<ddf::pirate::stone_chest_controller::magnetic_sensor_3>(x)) continue;
			if(get_peripheral<ddf::pirate::stone_chest_controller::magnetic_sensor_4>(x)) continue;
			if(get_peripheral<ddf::pirate::stone_chest_controller::magnetic_sensor_5>(x)) continue;
//			if(get_peripheral<ddf::pirate::cashier_laser_controller::pin_pad>(x)) continue;
			if(get_peripheral<ddf::pirate::cashier_laser_controller::switch_1>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::photosensor_1>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::photosensor_2>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::photosensor_3>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::photosensor_4>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::photosensor_5>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::photosensor_6>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::photosensor_7>(x)) continue;
			if(get_peripheral<ddf::pirate::rex_flipper_controller::rfid_reader>(x)) continue;
			if(get_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::debouncer>(x)) continue;
			if(get_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::photosensor>(x)) continue;
			if(get_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::knock_sensor>(x)) continue;
			if(get_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::potentiometer>(x)) continue;
			if(get_peripheral<ddf::pirate::entrance_hanger_controller::debouncer>(x)) continue;
			if(get_peripheral<ddf::pirate::entrance_hanger_controller::magnetic_sensor>(x)) continue;
			if(get_peripheral<ddf::pirate::entrance_hanger_controller::debouncer_2>(x)) continue;
			if(get_property<ddf::pirate::restart_game>(x)) continue;
			if(get_property<ddf::pirate::gm_help_status>(x)) continue;
			if(get_property<ddf::pirate::incoming_call>(x)) continue;
			if(get_property<ddf::pirate::incoming_call_status>(x)) continue;
			if(get_property<ddf::pirate::text_message>(x)) continue;
			if(get_property<ddf::pirate::text_message_sender>(x)) continue;
			if(get_peripheral<ddf::magician::cupboard_controller::debouncer>(x)) continue;
			if(get_peripheral<ddf::magician::cupboard_controller::magnetic_sensor>(x)) continue;
			if(get_peripheral<ddf::magician::design_board_controller::linear_magnetic_sensor_1>(x)) continue;
			if(get_peripheral<ddf::magician::design_board_controller::linear_magnetic_sensor_2>(x)) continue;
			if(get_peripheral<ddf::magician::design_board_controller::linear_magnetic_sensor_3>(x)) continue;
			if(get_peripheral<ddf::magician::futuristic_safe_controller::debouncer>(x)) continue;
			if(get_peripheral<ddf::magician::futuristic_safe_controller::rfid_reader>(x)) continue;
//			if(get_peripheral<ddf::magician::futuristic_safe_controller::pin_pad>(x)) continue;
			if(get_peripheral<ddf::magician::entrance_controller::debouncer>(x)) continue;
			if(get_peripheral<ddf::magician::entrance_controller::magnetic_sensor>(x)) continue;
			if(get_property<ddf::magician::restart_game>(x)) continue;
			if(get_property<ddf::magician::gm_help_status>(x)) continue;
			if(get_property<ddf::magician::incoming_call>(x)) continue;
			if(get_property<ddf::magician::incoming_call_status>(x)) continue;
			if(get_property<ddf::magician::text_message>(x)) continue;
			if(get_property<ddf::magician::text_message_sender>(x)) continue;
//			if(get_peripheral<ddf::villa::safe_controller::pin_pad>(x)) continue;
			if(get_peripheral<ddf::villa::safe_controller::debouncer_1>(x)) continue;
			if(get_peripheral<ddf::villa::safe_controller::debouncer_2>(x)) continue;
			if(get_peripheral<ddf::villa::desk_controller::debouncer_3>(x)) continue;
			if(get_peripheral<ddf::villa::desk_controller::debouncer_4>(x)) continue;
			if(get_peripheral<ddf::villa::control_room_controller::switch_1>(x)) continue;
			if(get_peripheral<ddf::villa::control_room_controller::rfid>(x)) continue;
			if(get_peripheral<ddf::villa::control_room_controller::debouncer_1>(x)) continue;
			if(get_peripheral<ddf::villa::entrance_controller::debouncer>(x)) continue;
			if(get_peripheral<ddf::villa::entrance_controller::magnetic_sensor>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::started>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::shutdown>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::logged_in>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::recycled_restore>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::audioplay_started>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::audioplay_finished>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::audioplay_paused>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::restart_game>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::audioplay_startevent>(x)) continue;
			if(get_property<ddf::villa::desktop_pc::audiopause_pauseevent>(x)) continue;
			if(get_property<ddf::villa::video_device::started>(x)) continue;
			if(get_property<ddf::villa::video_device::shutdown>(x)) continue;
			if(get_property<ddf::villa::video_device::livecam_started>(x)) continue;
			if(get_property<ddf::villa::video_device::livecamslides_started>(x)) continue;
			if(get_property<ddf::villa::video_device::restart_game>(x)) continue;
			if(get_property<ddf::villa::video_device::start_livecams>(x)) continue;
			if(get_property<ddf::villa::video_device::stop_livecams>(x)) continue;
			if(get_property<ddf::villa::video_device::start_tape>(x)) continue;
			if(get_property<ddf::villa::video_device::stop_tape>(x)) continue;
			if(get_property<ddf::villa::video_device::enabled>(x)) continue;
			if(get_property<ddf::villa::video_device::casette_id>(x)) continue;
			if(get_property<ddf::villa::video_device::play_ongoing>(x)) continue;
			if(get_property<ddf::villa::video_device::livecam_ongoing>(x)) continue;
			if(get_property<ddf::villa::restart_game>(x)) continue;
			if(get_property<ddf::villa::gm_help_status>(x)) continue;
			if(get_property<ddf::villa::incoming_call>(x)) continue;
			if(get_property<ddf::villa::incoming_call_status>(x)) continue;
			if(get_property<ddf::villa::text_message>(x)) continue;
			if(get_property<ddf::villa::text_message_sender>(x)) continue;
//			if(get_peripheral<ddf::junkyard::secret_box_controller_1::button_grid>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_1::debouncer_1>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_1::debouncer_2>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_1::debouncer_3>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_1::debouncer_4>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_1::debouncer_5>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_1::debouncer_6>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_1::debouncer_7>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_1>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_2>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_3>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_4>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_5>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_6>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_7>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_8>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_9>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_10>(x)) continue;
			if(get_peripheral<ddf::junkyard::secret_box_controller_2::debouncer_12>(x)) continue;
//			if(get_peripheral<ddf::junkyard::secret_box_controller_2::spare_in1>(x)) continue;
//			if(get_peripheral<ddf::junkyard::secret_box_controller_2::spare_in2>(x)) continue;
			if(get_peripheral<ddf::junkyard::entrance_controller::debouncer>(x)) continue;
			if(get_peripheral<ddf::junkyard::entrance_controller::magnetic_sensor>(x)) continue;
			if(get_property<ddf::junkyard::restart_game>(x)) continue;
			if(get_property<ddf::junkyard::gm_help_status>(x)) continue;
			if(get_property<ddf::junkyard::incoming_call>(x)) continue;
			if(get_property<ddf::junkyard::incoming_call_status>(x)) continue;
			if(get_property<ddf::junkyard::text_message>(x)) continue;
			if(get_property<ddf::junkyard::text_message_sender>(x)) continue;
			std::cout << "\e[31;01m[NOK]\e[0m No such peripheral" << std::endl;
		}

		else if(x == "set")
		{
			std::cin >> x;

			if(set_peripheral<ddf::pirate::map_controller::led_strip>(x)) continue;
			if(set_peripheral<ddf::pirate::stone_chest_controller::magnetic_lock_1>(x)) continue;
			if(set_peripheral<ddf::pirate::stone_chest_controller::magnetic_lock_2>(x)) continue;
			if(set_peripheral<ddf::pirate::stone_chest_controller::led_strip>(x)) continue;
			if(set_peripheral<ddf::pirate::cashier_laser_controller::laser>(x)) continue;
//			if(set_peripheral<ddf::pirate::cashier_laser_controller::lcd>(x)) continue;
			if(set_peripheral<ddf::pirate::cashier_laser_controller::cash_box>(x)) continue;
			if(set_peripheral<ddf::pirate::cashier_laser_controller::led_strip>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::light_controller_1>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::light_controller_2>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::light_controller_3>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::light_controller_4>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::light_controller_5>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::light_controller_6>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::light_controller_7>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::magnetic_lock>(x)) continue;
			if(set_peripheral<ddf::pirate::rex_flipper_controller::led>(x)) continue;
			if(set_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_1>(x)) continue;
			if(set_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_2>(x)) continue;
			if(set_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::magnetic_lock_3>(x)) continue;
			if(set_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_1>(x)) continue;
			if(set_peripheral<ddf::pirate::ghostbox_picture_laser_boat_wheel_controller::led_strip_2>(x)) continue;
			if(set_property<ddf::pirate::restart_game>(x)) continue;
			if(set_property<ddf::pirate::gm_help_status>(x)) continue;
			if(set_property<ddf::pirate::incoming_call>(x)) continue;
			if(set_property<ddf::pirate::incoming_call_status>(x)) continue;
			if(set_property<ddf::pirate::text_message>(x)) continue;
			if(set_property<ddf::pirate::text_message_sender>(x)) continue;
			if(set_peripheral<ddf::pirate::entrance_hanger_controller::led>(x)) continue;
			if(set_peripheral<ddf::magician::cupboard_controller::magnetic_lock>(x)) continue;
			if(set_peripheral<ddf::magician::cupboard_controller::led_strip>(x)) continue;
			if(set_peripheral<ddf::magician::design_board_controller::magnetic_lock>(x)) continue;
			if(set_peripheral<ddf::magician::futuristic_safe_controller::magnetic_lock>(x)) continue;
			if(set_peripheral<ddf::magician::futuristic_safe_controller::addressable_led_strip>(x)) continue;
			if(set_peripheral<ddf::magician::entrance_controller::led>(x)) continue;
			if(set_property<ddf::magician::restart_game>(x)) continue;
			if(set_property<ddf::magician::gm_help_status>(x)) continue;
			if(set_property<ddf::magician::incoming_call>(x)) continue;
			if(set_property<ddf::magician::incoming_call_status>(x)) continue;
			if(set_property<ddf::magician::text_message>(x)) continue;
			if(set_property<ddf::magician::text_message_sender>(x)) continue;
			if(set_peripheral<ddf::villa::safe_controller::magnetic_lock>(x)) continue;
			if(set_peripheral<ddf::villa::control_room_controller::magnetic_lock>(x)) continue;
			if(set_peripheral<ddf::villa::control_room_controller::video_eject>(x)) continue;
			if(set_peripheral<ddf::villa::entrance_controller::led>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::started>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::shutdown>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::logged_in>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::recycled_restore>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::audioplay_started>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::audioplay_finished>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::audioplay_paused>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::restart_game>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::audioplay_startevent>(x)) continue;
			if(set_property<ddf::villa::desktop_pc::audiopause_pauseevent>(x)) continue;
			if(set_property<ddf::villa::restart_game>(x)) continue;
			if(set_property<ddf::villa::gm_help_status>(x)) continue;
			if(set_property<ddf::villa::incoming_call>(x)) continue;
			if(set_property<ddf::villa::incoming_call_status>(x)) continue;
			if(set_property<ddf::villa::text_message>(x)) continue;
			if(set_property<ddf::villa::text_message_sender>(x)) continue;
			if(set_property<ddf::villa::video_device::started>(x)) continue;
			if(set_property<ddf::villa::video_device::shutdown>(x)) continue;
			if(set_property<ddf::villa::video_device::livecam_started>(x)) continue;
			if(set_property<ddf::villa::video_device::livecamslides_started>(x)) continue;
			if(set_property<ddf::villa::video_device::restart_game>(x)) continue;
			if(set_property<ddf::villa::video_device::start_livecams>(x)) continue;
			if(set_property<ddf::villa::video_device::stop_livecams>(x)) continue;
			if(set_property<ddf::villa::video_device::start_tape>(x)) continue;
			if(set_property<ddf::villa::video_device::stop_tape>(x)) continue;
			if(set_property<ddf::villa::video_device::enabled>(x)) continue;
			if(set_property<ddf::villa::video_device::casette_id>(x)) continue;
			if(set_property<ddf::villa::video_device::play_ongoing>(x)) continue;
			if(set_property<ddf::villa::video_device::livecam_ongoing>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_1::magnetic_lock_1>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_1::magnetic_lock_2>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_1::magnetic_lock_3>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_1::magnetic_lock_4>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_1::addressable_led>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_2::light_controller>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_2::magnetic_lock_1>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_2::magnetic_lock_2>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_2::magnetic_lock_3>(x)) continue;
			if(set_peripheral<ddf::junkyard::secret_box_controller_2::magnetic_lock_4>(x)) continue;
//			if(set_peripheral<ddf::junkyard::secret_box_controller_2::spare_out1>(x)) continue;
//			if(set_peripheral<ddf::junkyard::secret_box_controller_2::spare_out2>(x)) continue;
			if(set_peripheral<ddf::junkyard::entrance_controller::led>(x)) continue;
			if(set_property<ddf::junkyard::restart_game>(x)) continue;
			if(set_property<ddf::junkyard::gm_help_status>(x)) continue;
			if(set_property<ddf::junkyard::incoming_call>(x)) continue;
			if(set_property<ddf::junkyard::incoming_call_status>(x)) continue;
			if(set_property<ddf::junkyard::text_message>(x)) continue;
			if(set_property<ddf::junkyard::text_message_sender>(x)) continue;

			std::cout << "\e[31;01m[NOK]\e[0m No such peripheral" << std::endl;
		}
		else if(x == "game")
		{
			std::string game,action;
			std::cin >> game;
			std::cin >> action;

			uint8_t gamestate=0xff;
			if(action == "start")
				gamestate = 1;

			else if(action == "stop")
				gamestate = 0;

			else if(action == "gametime")
			{
				uint64_t t = 0xff;
				if(game == "pirate")
					t = ddf::pirate::gametimer::value();
				else if(game == "magician")
					t = ddf::magician::gametimer::value();
				else if(game == "villa")
					t = ddf::villa::gametimer::value();
				else if(game == "junkyard")
					t = ddf::junkyard::gametimer::value();
				else
				{
					std::cout << "\e[31;01m[NOK]\e[0m No such game" << std::endl;
					continue;
				}
				std::cout << "\e[32;01m[OK]\e[0m " << std::dec << t << std::endl;
				continue;
			}

			else
			{
				std::cout << "\e[31;01m[NOK]\e[0m No such action for a game" << std::endl;
				continue;
			}

			if(game == "pirate")
				ddf::pirate::gamestate::value(gamestate);
			else if(game == "magician")
				ddf::magician::gamestate::value(gamestate);
			else if(game == "villa")
				ddf::villa::gamestate::value(gamestate);
			else if(game == "junkyard")
				ddf::junkyard::gamestate::value(gamestate);
			else
			{
				std::cout << "\e[31;01m[NOK]\e[0m No such game" << std::endl;
				continue;
			}
		}
		else if(x == "play")
		{
			std::cin >> x;
			if(x == "magician")
			{
				std::cin >> x;
				if(x == "1")
					ddf::magician::room_1_content::event_1::playing(true);
				else if(x == "2")
					ddf::magician::room_1_content::event_2::playing(true);
				else
				{
					std::cout << "\e[31;01m[NOK]\e[0m No such sound in magician" << std::endl;
					continue;
				}
				std::cout << "\e[32;01m[OK]\e[0m" << std::endl;
			}
			else if(x == "villa")
			{
				std::cin >> x;
				if(x == "1")
					ddf::villa::room_1_content::event_1::playing(true);
				else if(x == "2")
					ddf::villa::room_1_content::event_2::playing(true);
				else if(x == "3")
					ddf::villa::room_1_content::event_3::playing(true);
				else
				{
					std::cout << "\e[31;01m[NOK]\e[0m No such sound in villa" << std::endl;
					continue;
				}
				std::cout << "\e[32;01m[OK]\e[0m" << std::endl;
			}
			else if(x == "junkyard")
			{
				std::cin >> x;
				if(x == "1")
					ddf::junkyard::room_1_content::event_1::playing(true);
				else if(x == "2")
					ddf::junkyard::room_1_content::event_2::playing(true);
				else
				{
					std::cout << "\e[31;01m[NOK]\e[0m No such sound in magician" << std::endl;
					continue;
				}
				std::cout << "\e[32;01m[OK]\e[0m" << std::endl;
			}
			else
				std::cout << "\e[31;01m[NOK]\e[0m No such room" << std::endl;
		
		}
		else if(x == "show")
		{
			std::cin >> x;
/*			if(x == "devices")
			{
				for(auto i : dm::roles())
				{
					std::string sstate;
					const uint8_t state = i.second->get_health();

					if(state == 0)
						sstate = "\e[30;01m(gone)\e[0m";
					else if(state < 96)
						sstate  = "\e[31;01m(poor)\e[0m";
					else if(state < 192)
						sstate = "\e[33;01m(moderate)\e[0m";
					else
						sstate = "\e[32;01m(good)\e[0m";

					
					std::cout << std::hex << i.second->serial << " " << (std::string)i.second->get_ip() << " " << sstate;
					if(state !=  0)
					{
						std::cout << " " << i.second->get_app_name() << " " <<
							(i.second->get_app_state()?"(\e[32mrunning\e[0m)":"(\e[31mnot running\e[0m)");

					}

					std::cout << std::endl;
				}
				std::cout << "\e[32;01m[OK]\e[0m" << std::endl;
			}
			else*/
				std::cout << "\e[31;01m[NOK]\e[0m No such thing to show" << std::endl;
		}

		else if(x == "journal")
		{
			std::cin >> x;
			if(x == "domains")
			{
				for(const auto &i : journal::get_domains())
					std::cout << i << std::endl;
				std::cout << "\e[32;01m[OK]\e[0m" << std::endl;
				
			}
			else if(x == "get")
			{
				std::cin >> x;
				std::cout << "\e[32;01m[OK]\e[0m " << (uint16_t)journal::domain_level(x)<< std::endl;
			}
			else if(x == "set")
			{
				uint16_t i;
				std::cin >> x;
				std::cin >> i;
				if(!std::cin.good())
				{
					std::string y;
					std::cin >> y;
					std::cout << "\e[31;01m[NOK]\e[0m Invalid value `"<<y<<"'" << std::endl;
				}
				else
				{
					journal::domain_level(x,i);
					std::cout << "\e[32;01m[OK]\e[0m"<< std::endl;
				}
			}
			else if(x == "setall")
			{
				uint16_t i;
				std::cin >> i;
				if(!std::cin.good())
				{
					std::string y;
					std::cin >> y;
					std::cout << "\e[31;01m[NOK]\e[0m Invalid value `"<<y<<"'" << std::endl;
				}
				else
				{
					for(const auto &d : journal::get_domains())
						journal::domain_level(d,i);
					std::cout << "\e[32;01m[OK]\e[0m"<< std::endl;
				}
			}
			else
				std::cout << "\e[31;01m[NOK]\e[0m No such thing for journal" << std::endl;
		
		}
		else
			std::cout << "\e[31;01m[NOK]\e[0m Bullshit, I can't hear you" << std::endl;
	}

	uninit();

	journal::uninit();
	return 0;
}

